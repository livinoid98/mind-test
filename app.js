/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/clipboard/dist/clipboard.js":
/*!**************************************************!*\
  !*** ./node_modules/clipboard/dist/clipboard.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * clipboard.js v2.0.6
 * https://clipboardjs.com/
 * 
 * Licensed MIT Â© Zeno Rocha
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else {}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 6);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

function select(element) {
    var selectedText;

    if (element.nodeName === 'SELECT') {
        element.focus();

        selectedText = element.value;
    }
    else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {
        var isReadOnly = element.hasAttribute('readonly');

        if (!isReadOnly) {
            element.setAttribute('readonly', '');
        }

        element.select();
        element.setSelectionRange(0, element.value.length);

        if (!isReadOnly) {
            element.removeAttribute('readonly');
        }

        selectedText = element.value;
    }
    else {
        if (element.hasAttribute('contenteditable')) {
            element.focus();
        }

        var selection = window.getSelection();
        var range = document.createRange();

        range.selectNodeContents(element);
        selection.removeAllRanges();
        selection.addRange(range);

        selectedText = selection.toString();
    }

    return selectedText;
}

module.exports = select;


/***/ }),
/* 1 */
/***/ (function(module, exports) {

function E () {
  // Keep this empty so it's easier to inherit from
  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
}

E.prototype = {
  on: function (name, callback, ctx) {
    var e = this.e || (this.e = {});

    (e[name] || (e[name] = [])).push({
      fn: callback,
      ctx: ctx
    });

    return this;
  },

  once: function (name, callback, ctx) {
    var self = this;
    function listener () {
      self.off(name, listener);
      callback.apply(ctx, arguments);
    };

    listener._ = callback
    return this.on(name, listener, ctx);
  },

  emit: function (name) {
    var data = [].slice.call(arguments, 1);
    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
    var i = 0;
    var len = evtArr.length;

    for (i; i < len; i++) {
      evtArr[i].fn.apply(evtArr[i].ctx, data);
    }

    return this;
  },

  off: function (name, callback) {
    var e = this.e || (this.e = {});
    var evts = e[name];
    var liveEvents = [];

    if (evts && callback) {
      for (var i = 0, len = evts.length; i < len; i++) {
        if (evts[i].fn !== callback && evts[i].fn._ !== callback)
          liveEvents.push(evts[i]);
      }
    }

    // Remove event from queue to prevent memory leak
    // Suggested by https://github.com/lazd
    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910

    (liveEvents.length)
      ? e[name] = liveEvents
      : delete e[name];

    return this;
  }
};

module.exports = E;
module.exports.TinyEmitter = E;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

var is = __webpack_require__(3);
var delegate = __webpack_require__(4);

/**
 * Validates all params and calls the right
 * listener function based on its target type.
 *
 * @param {String|HTMLElement|HTMLCollection|NodeList} target
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listen(target, type, callback) {
    if (!target && !type && !callback) {
        throw new Error('Missing required arguments');
    }

    if (!is.string(type)) {
        throw new TypeError('Second argument must be a String');
    }

    if (!is.fn(callback)) {
        throw new TypeError('Third argument must be a Function');
    }

    if (is.node(target)) {
        return listenNode(target, type, callback);
    }
    else if (is.nodeList(target)) {
        return listenNodeList(target, type, callback);
    }
    else if (is.string(target)) {
        return listenSelector(target, type, callback);
    }
    else {
        throw new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');
    }
}

/**
 * Adds an event listener to a HTML element
 * and returns a remove listener function.
 *
 * @param {HTMLElement} node
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listenNode(node, type, callback) {
    node.addEventListener(type, callback);

    return {
        destroy: function() {
            node.removeEventListener(type, callback);
        }
    }
}

/**
 * Add an event listener to a list of HTML elements
 * and returns a remove listener function.
 *
 * @param {NodeList|HTMLCollection} nodeList
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listenNodeList(nodeList, type, callback) {
    Array.prototype.forEach.call(nodeList, function(node) {
        node.addEventListener(type, callback);
    });

    return {
        destroy: function() {
            Array.prototype.forEach.call(nodeList, function(node) {
                node.removeEventListener(type, callback);
            });
        }
    }
}

/**
 * Add an event listener to a selector
 * and returns a remove listener function.
 *
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listenSelector(selector, type, callback) {
    return delegate(document.body, selector, type, callback);
}

module.exports = listen;


/***/ }),
/* 3 */
/***/ (function(module, exports) {

/**
 * Check if argument is a HTML element.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.node = function(value) {
    return value !== undefined
        && value instanceof HTMLElement
        && value.nodeType === 1;
};

/**
 * Check if argument is a list of HTML elements.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.nodeList = function(value) {
    var type = Object.prototype.toString.call(value);

    return value !== undefined
        && (type === '[object NodeList]' || type === '[object HTMLCollection]')
        && ('length' in value)
        && (value.length === 0 || exports.node(value[0]));
};

/**
 * Check if argument is a string.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.string = function(value) {
    return typeof value === 'string'
        || value instanceof String;
};

/**
 * Check if argument is a function.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.fn = function(value) {
    var type = Object.prototype.toString.call(value);

    return type === '[object Function]';
};


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

var closest = __webpack_require__(5);

/**
 * Delegates event to a selector.
 *
 * @param {Element} element
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @param {Boolean} useCapture
 * @return {Object}
 */
function _delegate(element, selector, type, callback, useCapture) {
    var listenerFn = listener.apply(this, arguments);

    element.addEventListener(type, listenerFn, useCapture);

    return {
        destroy: function() {
            element.removeEventListener(type, listenerFn, useCapture);
        }
    }
}

/**
 * Delegates event to a selector.
 *
 * @param {Element|String|Array} [elements]
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @param {Boolean} useCapture
 * @return {Object}
 */
function delegate(elements, selector, type, callback, useCapture) {
    // Handle the regular Element usage
    if (typeof elements.addEventListener === 'function') {
        return _delegate.apply(null, arguments);
    }

    // Handle Element-less usage, it defaults to global delegation
    if (typeof type === 'function') {
        // Use `document` as the first parameter, then apply arguments
        // This is a short way to .unshift `arguments` without running into deoptimizations
        return _delegate.bind(null, document).apply(null, arguments);
    }

    // Handle Selector-based usage
    if (typeof elements === 'string') {
        elements = document.querySelectorAll(elements);
    }

    // Handle Array-like based usage
    return Array.prototype.map.call(elements, function (element) {
        return _delegate(element, selector, type, callback, useCapture);
    });
}

/**
 * Finds closest match and invokes callback.
 *
 * @param {Element} element
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @return {Function}
 */
function listener(element, selector, type, callback) {
    return function(e) {
        e.delegateTarget = closest(e.target, selector);

        if (e.delegateTarget) {
            callback.call(element, e);
        }
    }
}

module.exports = delegate;


/***/ }),
/* 5 */
/***/ (function(module, exports) {

var DOCUMENT_NODE_TYPE = 9;

/**
 * A polyfill for Element.matches()
 */
if (typeof Element !== 'undefined' && !Element.prototype.matches) {
    var proto = Element.prototype;

    proto.matches = proto.matchesSelector ||
                    proto.mozMatchesSelector ||
                    proto.msMatchesSelector ||
                    proto.oMatchesSelector ||
                    proto.webkitMatchesSelector;
}

/**
 * Finds the closest parent that matches a selector.
 *
 * @param {Element} element
 * @param {String} selector
 * @return {Function}
 */
function closest (element, selector) {
    while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {
        if (typeof element.matches === 'function' &&
            element.matches(selector)) {
          return element;
        }
        element = element.parentNode;
    }
}

module.exports = closest;


/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./node_modules/select/src/select.js
var src_select = __webpack_require__(0);
var select_default = /*#__PURE__*/__webpack_require__.n(src_select);

// CONCATENATED MODULE: ./src/clipboard-action.js
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



/**
 * Inner class which performs selection from either `text` or `target`
 * properties and then executes copy or cut operations.
 */

var clipboard_action_ClipboardAction = function () {
    /**
     * @param {Object} options
     */
    function ClipboardAction(options) {
        _classCallCheck(this, ClipboardAction);

        this.resolveOptions(options);
        this.initSelection();
    }

    /**
     * Defines base properties passed from constructor.
     * @param {Object} options
     */


    _createClass(ClipboardAction, [{
        key: 'resolveOptions',
        value: function resolveOptions() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            this.action = options.action;
            this.container = options.container;
            this.emitter = options.emitter;
            this.target = options.target;
            this.text = options.text;
            this.trigger = options.trigger;

            this.selectedText = '';
        }

        /**
         * Decides which selection strategy is going to be applied based
         * on the existence of `text` and `target` properties.
         */

    }, {
        key: 'initSelection',
        value: function initSelection() {
            if (this.text) {
                this.selectFake();
            } else if (this.target) {
                this.selectTarget();
            }
        }

        /**
         * Creates a fake textarea element, sets its value from `text` property,
         * and makes a selection on it.
         */

    }, {
        key: 'selectFake',
        value: function selectFake() {
            var _this = this;

            var isRTL = document.documentElement.getAttribute('dir') == 'rtl';

            this.removeFake();

            this.fakeHandlerCallback = function () {
                return _this.removeFake();
            };
            this.fakeHandler = this.container.addEventListener('click', this.fakeHandlerCallback) || true;

            this.fakeElem = document.createElement('textarea');
            // Prevent zooming on iOS
            this.fakeElem.style.fontSize = '12pt';
            // Reset box model
            this.fakeElem.style.border = '0';
            this.fakeElem.style.padding = '0';
            this.fakeElem.style.margin = '0';
            // Move element out of screen horizontally
            this.fakeElem.style.position = 'absolute';
            this.fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px';
            // Move element to the same position vertically
            var yPosition = window.pageYOffset || document.documentElement.scrollTop;
            this.fakeElem.style.top = yPosition + 'px';

            this.fakeElem.setAttribute('readonly', '');
            this.fakeElem.value = this.text;

            this.container.appendChild(this.fakeElem);

            this.selectedText = select_default()(this.fakeElem);
            this.copyText();
        }

        /**
         * Only removes the fake element after another click event, that way
         * a user can hit `Ctrl+C` to copy because selection still exists.
         */

    }, {
        key: 'removeFake',
        value: function removeFake() {
            if (this.fakeHandler) {
                this.container.removeEventListener('click', this.fakeHandlerCallback);
                this.fakeHandler = null;
                this.fakeHandlerCallback = null;
            }

            if (this.fakeElem) {
                this.container.removeChild(this.fakeElem);
                this.fakeElem = null;
            }
        }

        /**
         * Selects the content from element passed on `target` property.
         */

    }, {
        key: 'selectTarget',
        value: function selectTarget() {
            this.selectedText = select_default()(this.target);
            this.copyText();
        }

        /**
         * Executes the copy operation based on the current selection.
         */

    }, {
        key: 'copyText',
        value: function copyText() {
            var succeeded = void 0;

            try {
                succeeded = document.execCommand(this.action);
            } catch (err) {
                succeeded = false;
            }

            this.handleResult(succeeded);
        }

        /**
         * Fires an event based on the copy operation result.
         * @param {Boolean} succeeded
         */

    }, {
        key: 'handleResult',
        value: function handleResult(succeeded) {
            this.emitter.emit(succeeded ? 'success' : 'error', {
                action: this.action,
                text: this.selectedText,
                trigger: this.trigger,
                clearSelection: this.clearSelection.bind(this)
            });
        }

        /**
         * Moves focus away from `target` and back to the trigger, removes current selection.
         */

    }, {
        key: 'clearSelection',
        value: function clearSelection() {
            if (this.trigger) {
                this.trigger.focus();
            }
            document.activeElement.blur();
            window.getSelection().removeAllRanges();
        }

        /**
         * Sets the `action` to be performed which can be either 'copy' or 'cut'.
         * @param {String} action
         */

    }, {
        key: 'destroy',


        /**
         * Destroy lifecycle.
         */
        value: function destroy() {
            this.removeFake();
        }
    }, {
        key: 'action',
        set: function set() {
            var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'copy';

            this._action = action;

            if (this._action !== 'copy' && this._action !== 'cut') {
                throw new Error('Invalid "action" value, use either "copy" or "cut"');
            }
        }

        /**
         * Gets the `action` property.
         * @return {String}
         */
        ,
        get: function get() {
            return this._action;
        }

        /**
         * Sets the `target` property using an element
         * that will be have its content copied.
         * @param {Element} target
         */

    }, {
        key: 'target',
        set: function set(target) {
            if (target !== undefined) {
                if (target && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' && target.nodeType === 1) {
                    if (this.action === 'copy' && target.hasAttribute('disabled')) {
                        throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
                    }

                    if (this.action === 'cut' && (target.hasAttribute('readonly') || target.hasAttribute('disabled'))) {
                        throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');
                    }

                    this._target = target;
                } else {
                    throw new Error('Invalid "target" value, use a valid Element');
                }
            }
        }

        /**
         * Gets the `target` property.
         * @return {String|HTMLElement}
         */
        ,
        get: function get() {
            return this._target;
        }
    }]);

    return ClipboardAction;
}();

/* harmony default export */ var clipboard_action = (clipboard_action_ClipboardAction);
// EXTERNAL MODULE: ./node_modules/tiny-emitter/index.js
var tiny_emitter = __webpack_require__(1);
var tiny_emitter_default = /*#__PURE__*/__webpack_require__.n(tiny_emitter);

// EXTERNAL MODULE: ./node_modules/good-listener/src/listen.js
var listen = __webpack_require__(2);
var listen_default = /*#__PURE__*/__webpack_require__.n(listen);

// CONCATENATED MODULE: ./src/clipboard.js
var clipboard_typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var clipboard_createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function clipboard_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





/**
 * Base class which takes one or more elements, adds event listeners to them,
 * and instantiates a new `ClipboardAction` on each click.
 */

var clipboard_Clipboard = function (_Emitter) {
    _inherits(Clipboard, _Emitter);

    /**
     * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
     * @param {Object} options
     */
    function Clipboard(trigger, options) {
        clipboard_classCallCheck(this, Clipboard);

        var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this));

        _this.resolveOptions(options);
        _this.listenClick(trigger);
        return _this;
    }

    /**
     * Defines if attributes would be resolved using internal setter functions
     * or custom functions that were passed in the constructor.
     * @param {Object} options
     */


    clipboard_createClass(Clipboard, [{
        key: 'resolveOptions',
        value: function resolveOptions() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            this.action = typeof options.action === 'function' ? options.action : this.defaultAction;
            this.target = typeof options.target === 'function' ? options.target : this.defaultTarget;
            this.text = typeof options.text === 'function' ? options.text : this.defaultText;
            this.container = clipboard_typeof(options.container) === 'object' ? options.container : document.body;
        }

        /**
         * Adds a click event listener to the passed trigger.
         * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
         */

    }, {
        key: 'listenClick',
        value: function listenClick(trigger) {
            var _this2 = this;

            this.listener = listen_default()(trigger, 'click', function (e) {
                return _this2.onClick(e);
            });
        }

        /**
         * Defines a new `ClipboardAction` on each click event.
         * @param {Event} e
         */

    }, {
        key: 'onClick',
        value: function onClick(e) {
            var trigger = e.delegateTarget || e.currentTarget;

            if (this.clipboardAction) {
                this.clipboardAction = null;
            }

            this.clipboardAction = new clipboard_action({
                action: this.action(trigger),
                target: this.target(trigger),
                text: this.text(trigger),
                container: this.container,
                trigger: trigger,
                emitter: this
            });
        }

        /**
         * Default `action` lookup function.
         * @param {Element} trigger
         */

    }, {
        key: 'defaultAction',
        value: function defaultAction(trigger) {
            return getAttributeValue('action', trigger);
        }

        /**
         * Default `target` lookup function.
         * @param {Element} trigger
         */

    }, {
        key: 'defaultTarget',
        value: function defaultTarget(trigger) {
            var selector = getAttributeValue('target', trigger);

            if (selector) {
                return document.querySelector(selector);
            }
        }

        /**
         * Returns the support of the given action, or all actions if no action is
         * given.
         * @param {String} [action]
         */

    }, {
        key: 'defaultText',


        /**
         * Default `text` lookup function.
         * @param {Element} trigger
         */
        value: function defaultText(trigger) {
            return getAttributeValue('text', trigger);
        }

        /**
         * Destroy lifecycle.
         */

    }, {
        key: 'destroy',
        value: function destroy() {
            this.listener.destroy();

            if (this.clipboardAction) {
                this.clipboardAction.destroy();
                this.clipboardAction = null;
            }
        }
    }], [{
        key: 'isSupported',
        value: function isSupported() {
            var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['copy', 'cut'];

            var actions = typeof action === 'string' ? [action] : action;
            var support = !!document.queryCommandSupported;

            actions.forEach(function (action) {
                support = support && !!document.queryCommandSupported(action);
            });

            return support;
        }
    }]);

    return Clipboard;
}(tiny_emitter_default.a);

/**
 * Helper function to retrieve attribute value.
 * @param {String} suffix
 * @param {Element} element
 */


function getAttributeValue(suffix, element) {
    var attribute = 'data-clipboard-' + suffix;

    if (!element.hasAttribute(attribute)) {
        return;
    }

    return element.getAttribute(attribute);
}

/* harmony default export */ var clipboard = __webpack_exports__["default"] = (clipboard_Clipboard);

/***/ })
/******/ ])["default"];
});

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6â8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(/*! setimmediate */ "./node_modules/setimmediate/setImmediate.js");
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/vue/dist/vue.common.dev.js":
/*!*************************************************!*\
  !*** ./node_modules/vue/dist/vue.common.dev.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, setImmediate) {/*!
 * Vue.js v2.6.12
 * (c) 2014-2020 Evan You
 * Released under the MIT License.
 */


/*  */

var emptyObject = Object.freeze({});

// These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.
function isUndef (v) {
  return v === undefined || v === null
}

function isDef (v) {
  return v !== undefined && v !== null
}

function isTrue (v) {
  return v === true
}

function isFalse (v) {
  return v === false
}

/**
 * Check if value is primitive.
 */
function isPrimitive (value) {
  return (
    typeof value === 'string' ||
    typeof value === 'number' ||
    // $flow-disable-line
    typeof value === 'symbol' ||
    typeof value === 'boolean'
  )
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

/**
 * Get the raw type string of a value, e.g., [object Object].
 */
var _toString = Object.prototype.toString;

function toRawType (value) {
  return _toString.call(value).slice(8, -1)
}

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
function isPlainObject (obj) {
  return _toString.call(obj) === '[object Object]'
}

function isRegExp (v) {
  return _toString.call(v) === '[object RegExp]'
}

/**
 * Check if val is a valid array index.
 */
function isValidArrayIndex (val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val)
}

function isPromise (val) {
  return (
    isDef(val) &&
    typeof val.then === 'function' &&
    typeof val.catch === 'function'
  )
}

/**
 * Convert a value to a string that is actually rendered.
 */
function toString (val) {
  return val == null
    ? ''
    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)
      ? JSON.stringify(val, null, 2)
      : String(val)
}

/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */
function toNumber (val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n
}

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
function makeMap (
  str,
  expectsLowerCase
) {
  var map = Object.create(null);
  var list = str.split(',');
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase
    ? function (val) { return map[val.toLowerCase()]; }
    : function (val) { return map[val]; }
}

/**
 * Check if a tag is a built-in tag.
 */
var isBuiltInTag = makeMap('slot,component', true);

/**
 * Check if an attribute is a reserved attribute.
 */
var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');

/**
 * Remove an item from an array.
 */
function remove (arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1)
    }
  }
}

/**
 * Check whether an object has the property.
 */
var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn (obj, key) {
  return hasOwnProperty.call(obj, key)
}

/**
 * Create a cached version of a pure function.
 */
function cached (fn) {
  var cache = Object.create(null);
  return (function cachedFn (str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str))
  })
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
});

/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1)
});

/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase()
});

/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */
function polyfillBind (fn, ctx) {
  function boundFn (a) {
    var l = arguments.length;
    return l
      ? l > 1
        ? fn.apply(ctx, arguments)
        : fn.call(ctx, a)
      : fn.call(ctx)
  }

  boundFn._length = fn.length;
  return boundFn
}

function nativeBind (fn, ctx) {
  return fn.bind(ctx)
}

var bind = Function.prototype.bind
  ? nativeBind
  : polyfillBind;

/**
 * Convert an Array-like object to a real Array.
 */
function toArray (list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret
}

/**
 * Mix properties into target object.
 */
function extend (to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to
}

/**
 * Merge an Array of Objects into a single Object.
 */
function toObject (arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res
}

/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */
function noop (a, b, c) {}

/**
 * Always return false.
 */
var no = function (a, b, c) { return false; };

/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */
var identity = function (_) { return _; };

/**
 * Generate a string containing static keys from compiler modules.
 */
function genStaticKeys (modules) {
  return modules.reduce(function (keys, m) {
    return keys.concat(m.staticKeys || [])
  }, []).join(',')
}

/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
function looseEqual (a, b) {
  if (a === b) { return true }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i])
        })
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime()
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key])
        })
      } else {
        /* istanbul ignore next */
        return false
      }
    } catch (e) {
      /* istanbul ignore next */
      return false
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */
function looseIndexOf (arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) { return i }
  }
  return -1
}

/**
 * Ensure a function is called only once.
 */
function once (fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  }
}

var SSR_ATTR = 'data-server-rendered';

var ASSET_TYPES = [
  'component',
  'directive',
  'filter'
];

var LIFECYCLE_HOOKS = [
  'beforeCreate',
  'created',
  'beforeMount',
  'mounted',
  'beforeUpdate',
  'updated',
  'beforeDestroy',
  'destroyed',
  'activated',
  'deactivated',
  'errorCaptured',
  'serverPrefetch'
];

/*  */



var config = ({
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
});

/*  */

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */
var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;

/**
 * Check if a string starts with $ or _
 */
function isReserved (str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F
}

/**
 * Define a property.
 */
function def (obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}

/**
 * Parse simple path.
 */
var bailRE = new RegExp(("[^" + (unicodeRegExp.source) + ".$_\\d]"));
function parsePath (path) {
  if (bailRE.test(path)) {
    return
  }
  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) { return }
      obj = obj[segments[i]];
    }
    return obj
  }
}

/*  */

// can we use __proto__?
var hasProto = '__proto__' in {};

// Browser environment sniffing
var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');
var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
var isPhantomJS = UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/);

// Firefox has a "watch" function on Object.prototype...
var nativeWatch = ({}).watch;

var supportsPassive = false;
if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', ({
      get: function get () {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    })); // https://github.com/facebook/flow/issues/285
    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
}

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
var _isServer;
var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }
  return _isServer
};

// detect devtools
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

/* istanbul ignore next */
function isNative (Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
}

var hasSymbol =
  typeof Symbol !== 'undefined' && isNative(Symbol) &&
  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */ // $flow-disable-line
if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = /*@__PURE__*/(function () {
    function Set () {
      this.set = Object.create(null);
    }
    Set.prototype.has = function has (key) {
      return this.set[key] === true
    };
    Set.prototype.add = function add (key) {
      this.set[key] = true;
    };
    Set.prototype.clear = function clear () {
      this.set = Object.create(null);
    };

    return Set;
  }());
}

/*  */

var warn = noop;
var tip = noop;
var generateComponentTrace = (noop); // work around flow check
var formatComponentName = (noop);

{
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;
  var classify = function (str) { return str
    .replace(classifyRE, function (c) { return c.toUpperCase(); })
    .replace(/[-_]/g, ''); };

  warn = function (msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && (!config.silent)) {
      console.error(("[Vue warn]: " + msg + trace));
    }
  };

  tip = function (msg, vm) {
    if (hasConsole && (!config.silent)) {
      console.warn("[Vue tip]: " + msg + (
        vm ? generateComponentTrace(vm) : ''
      ));
    }
  };

  formatComponentName = function (vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>'
    }
    var options = typeof vm === 'function' && vm.cid != null
      ? vm.options
      : vm._isVue
        ? vm.$options || vm.constructor.options
        : vm;
    var name = options.name || options._componentTag;
    var file = options.__file;
    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (
      (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
      (file && includeFile !== false ? (" at " + file) : '')
    )
  };

  var repeat = function (str, n) {
    var res = '';
    while (n) {
      if (n % 2 === 1) { res += str; }
      if (n > 1) { str += str; }
      n >>= 1;
    }
    return res
  };

  generateComponentTrace = function (vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;
      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];
          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }
        tree.push(vm);
        vm = vm.$parent;
      }
      return '\n\nfound in\n\n' + tree
        .map(function (vm, i) { return ("" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)
            ? ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)")
            : formatComponentName(vm))); })
        .join('\n')
    } else {
      return ("\n\n(found in " + (formatComponentName(vm)) + ")")
    }
  };
}

/*  */

var uid = 0;

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */
var Dep = function Dep () {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub (sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub (sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend () {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify () {
  // stabilize the subscriber list first
  var subs = this.subs.slice();
  if (!config.async) {
    // subs aren't sorted in scheduler if not running async
    // we need to sort them now to make sure they fire in correct
    // order
    subs.sort(function (a, b) { return a.id - b.id; });
  }
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};

// The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.
Dep.target = null;
var targetStack = [];

function pushTarget (target) {
  targetStack.push(target);
  Dep.target = target;
}

function popTarget () {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}

/*  */

var VNode = function VNode (
  tag,
  data,
  children,
  text,
  elm,
  context,
  componentOptions,
  asyncFactory
) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = { child: { configurable: true } };

// DEPRECATED: alias for componentInstance for backwards compat.
/* istanbul ignore next */
prototypeAccessors.child.get = function () {
  return this.componentInstance
};

Object.defineProperties( VNode.prototype, prototypeAccessors );

var createEmptyVNode = function (text) {
  if ( text === void 0 ) text = '';

  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node
};

function createTextVNode (val) {
  return new VNode(undefined, undefined, undefined, String(val))
}

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
function cloneVNode (vnode) {
  var cloned = new VNode(
    vnode.tag,
    vnode.data,
    // #7975
    // clone children array to avoid mutating original in case of cloning
    // a child.
    vnode.children && vnode.children.slice(),
    vnode.text,
    vnode.elm,
    vnode.context,
    vnode.componentOptions,
    vnode.asyncFactory
  );
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned
}

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);

var methodsToPatch = [
  'push',
  'pop',
  'shift',
  'unshift',
  'splice',
  'sort',
  'reverse'
];

/**
 * Intercept mutating methods and emit events
 */
methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break
      case 'splice':
        inserted = args.slice(2);
        break
    }
    if (inserted) { ob.observeArray(inserted); }
    // notify change
    ob.dep.notify();
    return result
  });
});

/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */
var shouldObserve = true;

function toggleObserving (value) {
  shouldObserve = value;
}

/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */
var Observer = function Observer (value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);
  if (Array.isArray(value)) {
    if (hasProto) {
      protoAugment(value, arrayMethods);
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};

/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */
Observer.prototype.walk = function walk (obj) {
  var keys = Object.keys(obj);
  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};

/**
 * Observe a list of Array items.
 */
Observer.prototype.observeArray = function observeArray (items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
};

// helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */
function protoAugment (target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}

/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */
/* istanbul ignore next */
function copyAugment (target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
function observe (value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return
  }
  var ob;
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (
    shouldObserve &&
    !isServerRendering() &&
    (Array.isArray(value) || isPlainObject(value)) &&
    Object.isExtensible(value) &&
    !value._isVue
  ) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob
}

/**
 * Define a reactive property on an Object.
 */
function defineReactive$$1 (
  obj,
  key,
  val,
  customSetter,
  shallow
) {
  var dep = new Dep();

  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return
  }

  // cater for pre-defined getter/setters
  var getter = property && property.get;
  var setter = property && property.set;
  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter () {
      var value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }
      return value
    },
    set: function reactiveSetter (newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */
      if (newVal === value || (newVal !== newVal && value !== value)) {
        return
      }
      /* eslint-enable no-self-compare */
      if (customSetter) {
        customSetter();
      }
      // #7981: for accessor properties without setter
      if (getter && !setter) { return }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
function set (target, key, val) {
  if (isUndef(target) || isPrimitive(target)
  ) {
    warn(("Cannot set reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val
  }
  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    warn(
      'Avoid adding reactive properties to a Vue instance or its root $data ' +
      'at runtime - declare it upfront in the data option.'
    );
    return val
  }
  if (!ob) {
    target[key] = val;
    return val
  }
  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val
}

/**
 * Delete a property and trigger change if necessary.
 */
function del (target, key) {
  if (isUndef(target) || isPrimitive(target)
  ) {
    warn(("Cannot delete reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    warn(
      'Avoid deleting properties on a Vue instance or its root $data ' +
      '- just set it to null.'
    );
    return
  }
  if (!hasOwn(target, key)) {
    return
  }
  delete target[key];
  if (!ob) {
    return
  }
  ob.dep.notify();
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray (value) {
  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}

/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
var strats = config.optionMergeStrategies;

/**
 * Options with restrictions
 */
{
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn(
        "option \"" + key + "\" can only be used during instance " +
        'creation with the `new` keyword.'
      );
    }
    return defaultStrat(parent, child)
  };
}

/**
 * Helper that recursively merges two data objects together.
 */
function mergeData (to, from) {
  if (!from) { return to }
  var key, toVal, fromVal;

  var keys = hasSymbol
    ? Reflect.ownKeys(from)
    : Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    // in case the object is already observed...
    if (key === '__ob__') { continue }
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (
      toVal !== fromVal &&
      isPlainObject(toVal) &&
      isPlainObject(fromVal)
    ) {
      mergeData(toVal, fromVal);
    }
  }
  return to
}

/**
 * Data
 */
function mergeDataOrFn (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal
    }
    if (!parentVal) {
      return childVal
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    return function mergedDataFn () {
      return mergeData(
        typeof childVal === 'function' ? childVal.call(this, this) : childVal,
        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal
      )
    }
  } else {
    return function mergedInstanceDataFn () {
      // instance merge
      var instanceData = typeof childVal === 'function'
        ? childVal.call(vm, vm)
        : childVal;
      var defaultData = typeof parentVal === 'function'
        ? parentVal.call(vm, vm)
        : parentVal;
      if (instanceData) {
        return mergeData(instanceData, defaultData)
      } else {
        return defaultData
      }
    }
  }
}

strats.data = function (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
      warn(
        'The "data" option should be a function ' +
        'that returns a per-instance value in component ' +
        'definitions.',
        vm
      );

      return parentVal
    }
    return mergeDataOrFn(parentVal, childVal)
  }

  return mergeDataOrFn(parentVal, childVal, vm)
};

/**
 * Hooks and props are merged as arrays.
 */
function mergeHook (
  parentVal,
  childVal
) {
  var res = childVal
    ? parentVal
      ? parentVal.concat(childVal)
      : Array.isArray(childVal)
        ? childVal
        : [childVal]
    : parentVal;
  return res
    ? dedupeHooks(res)
    : res
}

function dedupeHooks (hooks) {
  var res = [];
  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }
  return res
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
function mergeAssets (
  parentVal,
  childVal,
  vm,
  key
) {
  var res = Object.create(parentVal || null);
  if (childVal) {
    assertObjectType(key, childVal, vm);
    return extend(res, childVal)
  } else {
    return res
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
strats.watch = function (
  parentVal,
  childVal,
  vm,
  key
) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) { parentVal = undefined; }
  if (childVal === nativeWatch) { childVal = undefined; }
  /* istanbul ignore if */
  if (!childVal) { return Object.create(parentVal || null) }
  {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = {};
  extend(ret, parentVal);
  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];
    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }
    ret[key$1] = parent
      ? parent.concat(child)
      : Array.isArray(child) ? child : [child];
  }
  return ret
};

/**
 * Other object hashes.
 */
strats.props =
strats.methods =
strats.inject =
strats.computed = function (
  parentVal,
  childVal,
  vm,
  key
) {
  if (childVal && "development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = Object.create(null);
  extend(ret, parentVal);
  if (childVal) { extend(ret, childVal); }
  return ret
};
strats.provide = mergeDataOrFn;

/**
 * Default strategy.
 */
var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined
    ? parentVal
    : childVal
};

/**
 * Validate component names
 */
function checkComponents (options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName (name) {
  if (!new RegExp(("^[a-zA-Z][\\-\\.0-9_" + (unicodeRegExp.source) + "]*$")).test(name)) {
    warn(
      'Invalid component name: "' + name + '". Component names ' +
      'should conform to valid custom element name in html5 specification.'
    );
  }
  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn(
      'Do not use built-in or reserved HTML elements as component ' +
      'id: ' + name
    );
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
function normalizeProps (options, vm) {
  var props = options.props;
  if (!props) { return }
  var res = {};
  var i, val, name;
  if (Array.isArray(props)) {
    i = props.length;
    while (i--) {
      val = props[i];
      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = { type: null };
      } else {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val)
        ? val
        : { type: val };
    }
  } else {
    warn(
      "Invalid value for option \"props\": expected an Array or an Object, " +
      "but got " + (toRawType(props)) + ".",
      vm
    );
  }
  options.props = res;
}

/**
 * Normalize all injections into Object-based format
 */
function normalizeInject (options, vm) {
  var inject = options.inject;
  if (!inject) { return }
  var normalized = options.inject = {};
  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = { from: inject[i] };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val)
        ? extend({ from: key }, val)
        : { from: val };
    }
  } else {
    warn(
      "Invalid value for option \"inject\": expected an Array or an Object, " +
      "but got " + (toRawType(inject)) + ".",
      vm
    );
  }
}

/**
 * Normalize raw function directives into object format.
 */
function normalizeDirectives (options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def$$1 = dirs[key];
      if (typeof def$$1 === 'function') {
        dirs[key] = { bind: def$$1, update: def$$1 };
      }
    }
  }
}

function assertObjectType (name, value, vm) {
  if (!isPlainObject(value)) {
    warn(
      "Invalid value for option \"" + name + "\": expected an Object, " +
      "but got " + (toRawType(value)) + ".",
      vm
    );
  }
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
function mergeOptions (
  parent,
  child,
  vm
) {
  {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child);

  // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.
  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }
    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField (key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }
  return options
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
function resolveAsset (
  options,
  type,
  id,
  warnMissing
) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return
  }
  var assets = options[type];
  // check local registration variations first
  if (hasOwn(assets, id)) { return assets[id] }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
  // fallback to prototype chain
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if (warnMissing && !res) {
    warn(
      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
      options
    );
  }
  return res
}

/*  */



function validateProp (
  key,
  propOptions,
  propsData,
  vm
) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  // boolean casting
  var booleanIndex = getTypeIndex(Boolean, prop.type);
  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);
      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key);
    // since the default value is a fresh copy,
    // make sure to observe it.
    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }
  {
    assertProp(prop, key, value, vm, absent);
  }
  return value
}

/**
 * Get the default value of a prop.
 */
function getPropDefaultValue (vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined
  }
  var def = prop.default;
  // warn against non-factory defaults for Object & Array
  if (isObject(def)) {
    warn(
      'Invalid default value for prop "' + key + '": ' +
      'Props with type Object/Array must use a factory function ' +
      'to return the default value.',
      vm
    );
  }
  // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger
  if (vm && vm.$options.propsData &&
    vm.$options.propsData[key] === undefined &&
    vm._props[key] !== undefined
  ) {
    return vm._props[key]
  }
  // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context
  return typeof def === 'function' && getType(prop.type) !== 'Function'
    ? def.call(vm)
    : def
}

/**
 * Assert whether a prop is valid.
 */
function assertProp (
  prop,
  name,
  value,
  vm,
  absent
) {
  if (prop.required && absent) {
    warn(
      'Missing required prop: "' + name + '"',
      vm
    );
    return
  }
  if (value == null && !prop.required) {
    return
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  if (!valid) {
    warn(
      getInvalidTypeMessage(name, value, expectedTypes),
      vm
    );
    return
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn(
        'Invalid prop: custom validator check failed for prop "' + name + '".',
        vm
      );
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType (value, type) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase();
    // for primitive wrapper objects
    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }
  return {
    valid: valid,
    expectedType: expectedType
  }
}

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType (fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : ''
}

function isSameType (a, b) {
  return getType(a) === getType(b)
}

function getTypeIndex (type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1
  }
  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i
    }
  }
  return -1
}

function getInvalidTypeMessage (name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." +
    " Expected " + (expectedTypes.map(capitalize).join(', '));
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  var expectedValue = styleValue(value, expectedType);
  var receivedValue = styleValue(value, receivedType);
  // check if we need to specify expected value
  if (expectedTypes.length === 1 &&
      isExplicable(expectedType) &&
      !isBoolean(expectedType, receivedType)) {
    message += " with value " + expectedValue;
  }
  message += ", got " + receivedType + " ";
  // check if we need to specify received value
  if (isExplicable(receivedType)) {
    message += "with value " + receivedValue + ".";
  }
  return message
}

function styleValue (value, type) {
  if (type === 'String') {
    return ("\"" + value + "\"")
  } else if (type === 'Number') {
    return ("" + (Number(value)))
  } else {
    return ("" + value)
  }
}

function isExplicable (value) {
  var explicitTypes = ['string', 'number', 'boolean'];
  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })
}

function isBoolean () {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];

  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })
}

/*  */

function handleError (err, vm, info) {
  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
  // See: https://github.com/vuejs/vuex/issues/1505
  pushTarget();
  try {
    if (vm) {
      var cur = vm;
      while ((cur = cur.$parent)) {
        var hooks = cur.$options.errorCaptured;
        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;
              if (capture) { return }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }
    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}

function invokeWithErrorHandling (
  handler,
  context,
  args,
  vm,
  info
) {
  var res;
  try {
    res = args ? handler.apply(context, args) : handler.call(context);
    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res.catch(function (e) { return handleError(e, vm, info + " (Promise/async)"); });
      // issue #9511
      // avoid catch triggering multiple times when nested calls
      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }
  return res
}

function globalHandleError (err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info)
    } catch (e) {
      // if the user intentionally throws the original error in the handler,
      // do not log it twice
      if (e !== err) {
        logError(e, null, 'config.errorHandler');
      }
    }
  }
  logError(err, vm, info);
}

function logError (err, vm, info) {
  {
    warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
  }
  /* istanbul ignore else */
  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err
  }
}

/*  */

var isUsingMicroTask = false;

var callbacks = [];
var pending = false;

function flushCallbacks () {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;
  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
}

// Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).
var timerFunc;

// The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:
/* istanbul ignore next, $flow-disable-line */
if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();
  timerFunc = function () {
    p.then(flushCallbacks);
    // In problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.
    if (isIOS) { setTimeout(noop); }
  };
  isUsingMicroTask = true;
} else if (!isIE && typeof MutationObserver !== 'undefined' && (
  isNative(MutationObserver) ||
  // PhantomJS and iOS 7.x
  MutationObserver.toString() === '[object MutationObserverConstructor]'
)) {
  // Use MutationObserver where native Promise is not available,
  // e.g. PhantomJS, iOS7, Android 4.4
  // (#6466 MutationObserver is unreliable in IE11)
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });
  timerFunc = function () {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };
  isUsingMicroTask = true;
} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // Fallback to setImmediate.
  // Technically it leverages the (macro) task queue,
  // but it is still a better choice than setTimeout.
  timerFunc = function () {
    setImmediate(flushCallbacks);
  };
} else {
  // Fallback to setTimeout.
  timerFunc = function () {
    setTimeout(flushCallbacks, 0);
  };
}

function nextTick (cb, ctx) {
  var _resolve;
  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });
  if (!pending) {
    pending = true;
    timerFunc();
  }
  // $flow-disable-line
  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    })
  }
}

/*  */

var mark;
var measure;

{
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */
  if (
    perf &&
    perf.mark &&
    perf.measure &&
    perf.clearMarks &&
    perf.clearMeasures
  ) {
    mark = function (tag) { return perf.mark(tag); };
    measure = function (name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag);
      // perf.clearMeasures(name)
    };
  }
}

/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;

{
  var allowedGlobals = makeMap(
    'Infinity,undefined,NaN,isFinite,isNaN,' +
    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +
    'require' // for Webpack/Browserify
  );

  var warnNonPresent = function (target, key) {
    warn(
      "Property or method \"" + key + "\" is not defined on the instance but " +
      'referenced during render. Make sure that this property is reactive, ' +
      'either in the data option, or for class-based components, by ' +
      'initializing the property. ' +
      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',
      target
    );
  };

  var warnReservedPrefix = function (target, key) {
    warn(
      "Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " +
      'properties starting with "$" or "_" are not proxied in the Vue instance to ' +
      'prevent conflicts with Vue internals. ' +
      'See: https://vuejs.org/v2/api/#data',
      target
    );
  };

  var hasProxy =
    typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set (target, key, value) {
        if (isBuiltInModifier(key)) {
          warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
          return false
        } else {
          target[key] = value;
          return true
        }
      }
    });
  }

  var hasHandler = {
    has: function has (target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) ||
        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));
      if (!has && !isAllowed) {
        if (key in target.$data) { warnReservedPrefix(target, key); }
        else { warnNonPresent(target, key); }
      }
      return has || !isAllowed
    }
  };

  var getHandler = {
    get: function get (target, key) {
      if (typeof key === 'string' && !(key in target)) {
        if (key in target.$data) { warnReservedPrefix(target, key); }
        else { warnNonPresent(target, key); }
      }
      return target[key]
    }
  };

  initProxy = function initProxy (vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped
        ? getHandler
        : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}

/*  */

var seenObjects = new _Set();

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
function traverse (val) {
  _traverse(val, seenObjects);
  seenObjects.clear();
}

function _traverse (val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {
    return
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) { _traverse(val[i], seen); }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) { _traverse(val[keys[i]], seen); }
  }
}

/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  }
});

function createFnInvoker (fns, vm) {
  function invoker () {
    var arguments$1 = arguments;

    var fns = invoker.fns;
    if (Array.isArray(fns)) {
      var cloned = fns.slice();
      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      // return handler return value for single handlers
      return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler")
    }
  }
  invoker.fns = fns;
  return invoker
}

function updateListeners (
  on,
  oldOn,
  add,
  remove$$1,
  createOnceHandler,
  vm
) {
  var name, def$$1, cur, old, event;
  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    if (isUndef(cur)) {
      warn(
        "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
        vm
      );
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }
      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }
      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}

/*  */

function mergeVNodeHook (def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }
  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook () {
    hook.apply(this, arguments);
    // important: remove merged hook to ensure it's called only once
    // and prevent memory leak
    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}

/*  */

function extractPropsFromVNodeData (
  data,
  Ctor,
  tag
) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return
  }
  var res = {};
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      {
        var keyInLowerCase = key.toLowerCase();
        if (
          key !== keyInLowerCase &&
          attrs && hasOwn(attrs, keyInLowerCase)
        ) {
          tip(
            "Prop \"" + keyInLowerCase + "\" is passed to component " +
            (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +
            " \"" + key + "\". " +
            "Note that HTML attributes are case-insensitive and camelCased " +
            "props need to use their kebab-case equivalents when using in-DOM " +
            "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
          );
        }
      }
      checkProp(res, props, key, altKey, true) ||
      checkProp(res, attrs, key, altKey, false);
    }
  }
  return res
}

function checkProp (
  res,
  hash,
  key,
  altKey,
  preserve
) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true
    }
  }
  return false
}

/*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren (children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren (children) {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === 'boolean') { continue }
    lastIndex = res.length - 1;
    last = res[lastIndex];
    //  nested
    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));
        // merge adjacent text nodes
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]).text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res
}

/*  */

function initProvide (vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === 'function'
      ? provide.call(vm)
      : provide;
  }
}

function initInjections (vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      {
        defineReactive$$1(vm, key, result[key], function () {
          warn(
            "Avoid mutating an injected value directly since the changes will be " +
            "overwritten whenever the provided component re-renders. " +
            "injection being mutated: \"" + key + "\"",
            vm
          );
        });
      }
    });
    toggleObserving(true);
  }
}

function resolveInject (inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol
      ? Reflect.ownKeys(inject)
      : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      // #6574 in case the inject object is observed...
      if (key === '__ob__') { continue }
      var provideKey = inject[key].from;
      var source = vm;
      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break
        }
        source = source.$parent;
      }
      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function'
            ? provideDefault.call(vm)
            : provideDefault;
        } else {
          warn(("Injection \"" + key + "\" not found"), vm);
        }
      }
    }
    return result
  }
}

/*  */



/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */
function resolveSlots (
  children,
  context
) {
  if (!children || !children.length) {
    return {}
  }
  var slots = {};
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data;
    // remove slot attribute if the node is resolved as a Vue slot node
    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    }
    // named slots should only be respected if the vnode was rendered in the
    // same context.
    if ((child.context === context || child.fnContext === context) &&
      data && data.slot != null
    ) {
      var name = data.slot;
      var slot = (slots[name] || (slots[name] = []));
      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  }
  // ignore slots that contains only whitespace
  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }
  return slots
}

function isWhitespace (node) {
  return (node.isComment && !node.asyncFactory) || node.text === ' '
}

/*  */

function normalizeScopedSlots (
  slots,
  normalSlots,
  prevSlots
) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;
  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    // fast path 1: child component re-render only, parent did not change
    return slots._normalized
  } else if (
    isStable &&
    prevSlots &&
    prevSlots !== emptyObject &&
    key === prevSlots.$key &&
    !hasNormalSlots &&
    !prevSlots.$hasNormal
  ) {
    // fast path 2: stable scoped slots w/ no normal slots to proxy,
    // only need to normalize once
    return prevSlots
  } else {
    res = {};
    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== '$') {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  }
  // expose normal slots on scopedSlots
  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  }
  // avoriaz seems to mock a non-extensible $scopedSlots object
  // and when that is passed down this would cause an error
  if (slots && Object.isExtensible(slots)) {
    (slots)._normalized = res;
  }
  def(res, '$stable', isStable);
  def(res, '$key', key);
  def(res, '$hasNormal', hasNormalSlots);
  return res
}

function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function () {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === 'object' && !Array.isArray(res)
      ? [res] // single vnode
      : normalizeChildren(res);
    return res && (
      res.length === 0 ||
      (res.length === 1 && res[0].isComment) // #9658
    ) ? undefined
      : res
  };
  // this is a slot using the new v-slot syntax without scope. although it is
  // compiled as a scoped slot, render fn users would expect it to be present
  // on this.$slots because the usage is semantically a normal slot.
  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }
  return normalized
}

function proxyNormalSlot(slots, key) {
  return function () { return slots[key]; }
}

/*  */

/**
 * Runtime helper for rendering v-for lists.
 */
function renderList (
  val,
  render
) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();
      while (!result.done) {
        ret.push(render(result.value, ret.length));
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);
      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
  }
  if (!isDef(ret)) {
    ret = [];
  }
  (ret)._isVList = true;
  return ret
}

/*  */

/**
 * Runtime helper for rendering <slot>
 */
function renderSlot (
  name,
  fallback,
  props,
  bindObject
) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;
  if (scopedSlotFn) { // scoped slot
    props = props || {};
    if (bindObject) {
      if (!isObject(bindObject)) {
        warn(
          'slot v-bind without argument expects an Object',
          this
        );
      }
      props = extend(extend({}, bindObject), props);
    }
    nodes = scopedSlotFn(props) || fallback;
  } else {
    nodes = this.$slots[name] || fallback;
  }

  var target = props && props.slot;
  if (target) {
    return this.$createElement('template', { slot: target }, nodes)
  } else {
    return nodes
  }
}

/*  */

/**
 * Runtime helper for resolving filters
 */
function resolveFilter (id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity
}

/*  */

function isKeyNotMatch (expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1
  } else {
    return expect !== actual
  }
}

/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */
function checkKeyCodes (
  eventKeyCode,
  key,
  builtInKeyCode,
  eventKeyName,
  builtInKeyName
) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName)
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode)
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key
  }
}

/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */
function bindObjectProps (
  data,
  tag,
  value,
  asProp,
  isSync
) {
  if (value) {
    if (!isObject(value)) {
      warn(
        'v-bind without argument expects an Object or Array value',
        this
      );
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      var loop = function ( key ) {
        if (
          key === 'class' ||
          key === 'style' ||
          isReservedAttribute(key)
        ) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key)
            ? data.domProps || (data.domProps = {})
            : data.attrs || (data.attrs = {});
        }
        var camelizedKey = camelize(key);
        var hyphenatedKey = hyphenate(key);
        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});
            on[("update:" + key)] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop( key );
    }
  }
  return data
}

/*  */

/**
 * Runtime helper for rendering static trees.
 */
function renderStatic (
  index,
  isInFor
) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index];
  // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.
  if (tree && !isInFor) {
    return tree
  }
  // otherwise, render a fresh tree.
  tree = cached[index] = this.$options.staticRenderFns[index].call(
    this._renderProxy,
    null,
    this // for render fns generated for functional component templates
  );
  markStatic(tree, ("__static__" + index), false);
  return tree
}

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */
function markOnce (
  tree,
  index,
  key
) {
  markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
  return tree
}

function markStatic (
  tree,
  key,
  isOnce
) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], (key + "_" + i), isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode (node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}

/*  */

function bindObjectListeners (data, value) {
  if (value) {
    if (!isPlainObject(value)) {
      warn(
        'v-on without argument expects an Object value',
        this
      );
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};
      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }
  return data
}

/*  */

function resolveScopedSlots (
  fns, // see flow/vnode
  res,
  // the following are added in 2.6
  hasDynamicKeys,
  contentHashKey
) {
  res = res || { $stable: !hasDynamicKeys };
  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];
    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      // marker for reverse proxying v-slot without scope on this.$slots
      if (slot.proxy) {
        slot.fn.proxy = true;
      }
      res[slot.key] = slot.fn;
    }
  }
  if (contentHashKey) {
    (res).$key = contentHashKey;
  }
  return res
}

/*  */

function bindDynamicKeys (baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];
    if (typeof key === 'string' && key) {
      baseObj[values[i]] = values[i + 1];
    } else if (key !== '' && key !== null) {
      // null is a special value for explicitly removing a binding
      warn(
        ("Invalid value for dynamic directive argument (expected string or null): " + key),
        this
      );
    }
  }
  return baseObj
}

// helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.
function prependModifier (value, symbol) {
  return typeof value === 'string' ? symbol + value : value
}

/*  */

function installRenderHelpers (target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
  target._d = bindDynamicKeys;
  target._p = prependModifier;
}

/*  */

function FunctionalRenderContext (
  data,
  props,
  children,
  parent,
  Ctor
) {
  var this$1 = this;

  var options = Ctor.options;
  // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check
  var contextVm;
  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent);
    // $flow-disable-line
    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent;
    // $flow-disable-line
    parent = parent._original;
  }
  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;

  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);
  this.slots = function () {
    if (!this$1.$slots) {
      normalizeScopedSlots(
        data.scopedSlots,
        this$1.$slots = resolveSlots(children, parent)
      );
    }
    return this$1.$slots
  };

  Object.defineProperty(this, 'scopedSlots', ({
    enumerable: true,
    get: function get () {
      return normalizeScopedSlots(data.scopedSlots, this.slots())
    }
  }));

  // support for compiled functional template
  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options;
    // pre-resolve slots for renderSlot()
    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);
      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }
      return vnode
    };
  } else {
    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent (
  Ctor,
  propsData,
  data,
  contextVm,
  children
) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
    if (isDef(data.props)) { mergeProps(props, data.props); }
  }

  var renderContext = new FunctionalRenderContext(
    data,
    props,
    children,
    contextVm,
    Ctor
  );

  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);
    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }
    return res
  }
}

function cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;
  {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }
  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }
  return clone
}

function mergeProps (to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}

/*  */

/*  */

/*  */

/*  */

// inline hooks to be invoked on component VNodes during patch
var componentVNodeHooks = {
  init: function init (vnode, hydrating) {
    if (
      vnode.componentInstance &&
      !vnode.componentInstance._isDestroyed &&
      vnode.data.keepAlive
    ) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(
        vnode,
        activeInstance
      );
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },

  prepatch: function prepatch (oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(
      child,
      options.propsData, // updated props
      options.listeners, // updated listeners
      vnode, // new parent vnode
      options.children // new children
    );
  },

  insert: function insert (vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true /* direct */);
      }
    }
  },

  destroy: function destroy (vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true /* direct */);
      }
    }
  }
};

var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent (
  Ctor,
  data,
  context,
  children,
  tag
) {
  if (isUndef(Ctor)) {
    return
  }

  var baseCtor = context.$options._base;

  // plain options object: turn it into a constructor
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }

  // if at this stage it's not a constructor or an async component factory,
  // reject.
  if (typeof Ctor !== 'function') {
    {
      warn(("Invalid Component definition: " + (String(Ctor))), context);
    }
    return
  }

  // async component
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(
        asyncFactory,
        data,
        context,
        children,
        tag
      )
    }
  }

  data = data || {};

  // resolve constructor options in case global mixins are applied after
  // component constructor creation
  resolveConstructorOptions(Ctor);

  // transform component v-model data into props & events
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }

  // extract props
  var propsData = extractPropsFromVNodeData(data, Ctor, tag);

  // functional component
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children)
  }

  // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners
  var listeners = data.on;
  // replace with listeners with .native modifier
  // so it gets processed during parent component patch.
  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot

    // work around flow
    var slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }

  // install component management hooks onto the placeholder node
  installComponentHooks(data);

  // return a placeholder vnode
  var name = Ctor.options.name || tag;
  var vnode = new VNode(
    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
    data, undefined, undefined, undefined, context,
    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
    asyncFactory
  );

  return vnode
}

function createComponentInstanceForVnode (
  vnode, // we know it's MountedComponentVNode but flow doesn't
  parent // activeInstance in lifecycle state
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  };
  // check inline-template render functions
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnode.componentOptions.Ctor(options)
}

function installComponentHooks (data) {
  var hooks = data.hook || (data.hook = {});
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];
    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1 (f1, f2) {
  var merged = function (a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };
  merged._merged = true;
  return merged
}

// transform component v-model info (value and callback) into
// prop and event handler respectively.
function transformModel (options, data) {
  var prop = (options.model && options.model.prop) || 'value';
  var event = (options.model && options.model.event) || 'input'
  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;
  if (isDef(existing)) {
    if (
      Array.isArray(existing)
        ? existing.indexOf(callback) === -1
        : existing !== callback
    ) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}

/*  */

var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
function createElement (
  context,
  tag,
  data,
  children,
  normalizationType,
  alwaysNormalize
) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType)
}

function _createElement (
  context,
  tag,
  data,
  children,
  normalizationType
) {
  if (isDef(data) && isDef((data).__ob__)) {
    warn(
      "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
      'Always create fresh vnode data objects in each render!',
      context
    );
    return createEmptyVNode()
  }
  // object syntax in v-bind
  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }
  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode()
  }
  // warn against non-primitive key
  if (isDef(data) && isDef(data.key) && !isPrimitive(data.key)
  ) {
    {
      warn(
        'Avoid using non-primitive value as key, ' +
        'use string/number value instead.',
        context
      );
    }
  }
  // support single function children as default scoped slot
  if (Array.isArray(children) &&
    typeof children[0] === 'function'
  ) {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === 'string') {
    var Ctor;
    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      // platform built-in elements
      if (isDef(data) && isDef(data.nativeOn)) {
        warn(
          ("The .native modifier for v-on is only valid on components but it was used on <" + tag + ">."),
          context
        );
      }
      vnode = new VNode(
        config.parsePlatformTagName(tag), data, children,
        undefined, undefined, context
      );
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(
        tag, data, children,
        undefined, undefined, context
      );
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }
  if (Array.isArray(vnode)) {
    return vnode
  } else if (isDef(vnode)) {
    if (isDef(ns)) { applyNS(vnode, ns); }
    if (isDef(data)) { registerDeepBindings(data); }
    return vnode
  } else {
    return createEmptyVNode()
  }
}

function applyNS (vnode, ns, force) {
  vnode.ns = ns;
  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && (
        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {
        applyNS(child, ns, force);
      }
    }
  }
}

// ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes
function registerDeepBindings (data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }
  if (isObject(data.class)) {
    traverse(data.class);
  }
}

/*  */

function initRender (vm) {
  vm._vnode = null; // the root of the child tree
  vm._staticTrees = null; // v-once cached trees
  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
  // normalization is always applied for the public version, used in
  // user-written render functions.
  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };

  // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated
  var parentData = parentVnode && parentVnode.data;

  /* istanbul ignore else */
  {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  }
}

var currentRenderingInstance = null;

function renderMixin (Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this)
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(
        _parentVnode.data.scopedSlots,
        vm.$slots,
        vm.$scopedSlots
      );
    }

    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    vm.$vnode = _parentVnode;
    // render self
    var vnode;
    try {
      // There's no need to maintain a stack because all render fns are called
      // separately from one another. Nested component's render fns are called
      // when parent component is patched.
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render");
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      if (vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e) {
          handleError(e, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    }
    // if the returned array contains only a single node, allow it
    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof VNode)) {
      if (Array.isArray(vnode)) {
        warn(
          'Multiple root nodes returned from render function. Render function ' +
          'should return a single root node.',
          vm
        );
      }
      vnode = createEmptyVNode();
    }
    // set parent
    vnode.parent = _parentVnode;
    return vnode
  };
}

/*  */

function ensureCtor (comp, base) {
  if (
    comp.__esModule ||
    (hasSymbol && comp[Symbol.toStringTag] === 'Module')
  ) {
    comp = comp.default;
  }
  return isObject(comp)
    ? base.extend(comp)
    : comp
}

function createAsyncPlaceholder (
  factory,
  data,
  context,
  children,
  tag
) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data: data, context: context, children: children, tag: tag };
  return node
}

function resolveAsyncComponent (
  factory,
  baseCtor
) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp
  }

  if (isDef(factory.resolved)) {
    return factory.resolved
  }

  var owner = currentRenderingInstance;
  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    // already pending
    factory.owners.push(owner);
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp
  }

  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null

    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });

    var forceRender = function (renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        (owners[i]).$forceUpdate();
      }

      if (renderCompleted) {
        owners.length = 0;
        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }
        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor);
      // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)
      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });

    var reject = once(function (reason) {
      warn(
        "Failed to resolve async component: " + (String(factory)) +
        (reason ? ("\nReason: " + reason) : '')
      );
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });

    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (isPromise(res)) {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function () {
              timerLoading = null;
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function () {
            timerTimeout = null;
            if (isUndef(factory.resolved)) {
              reject(
                "timeout (" + (res.timeout) + "ms)"
              );
            }
          }, res.timeout);
        }
      }
    }

    sync = false;
    // return in case resolved synchronously
    return factory.loading
      ? factory.loadingComp
      : factory.resolved
  }
}

/*  */

function isAsyncPlaceholder (node) {
  return node.isComment && node.asyncFactory
}

/*  */

function getFirstComponentChild (children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c
      }
    }
  }
}

/*  */

/*  */

function initEvents (vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  // init parent attached events
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add (event, fn) {
  target.$on(event, fn);
}

function remove$1 (event, fn) {
  target.$off(event, fn);
}

function createOnceHandler (event, fn) {
  var _target = target;
  return function onceHandler () {
    var res = fn.apply(null, arguments);
    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  }
}

function updateComponentListeners (
  vm,
  listeners,
  oldListeners
) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin (Vue) {
  var hookRE = /^hook:/;
  Vue.prototype.$on = function (event, fn) {
    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;
    function on () {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this;
    // all
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm
    }
    // array of events
    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }
      return vm
    }
    // specific event
    var cbs = vm._events[event];
    if (!cbs) {
      return vm
    }
    if (!fn) {
      vm._events[event] = null;
      return vm
    }
    // specific handler
    var cb;
    var i = cbs.length;
    while (i--) {
      cb = cbs[i];
      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break
      }
    }
    return vm
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    {
      var lowerCaseEvent = event.toLowerCase();
      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip(
          "Event \"" + lowerCaseEvent + "\" is emitted in component " +
          (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
          "Note that HTML attributes are case-insensitive and you cannot use " +
          "v-on to listen to camelCase events when using in-DOM templates. " +
          "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
        );
      }
    }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = "event handler for \"" + event + "\"";
      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }
    return vm
  };
}

/*  */

var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  }
}

function initLifecycle (vm) {
  var options = vm.$options;

  // locate first non-abstract parent
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;

  vm.$children = [];
  vm.$refs = {};

  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin (Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode;
    // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.
    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    restoreActiveInstance();
    // update __vue__ reference
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    // if parent is an HOC, update its $el as well
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
    // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.
  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return
    }
    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true;
    // remove self from parent
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    // teardown watchers
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    // remove reference from data ob
    // frozen object may not have observer.
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    // call the last hook...
    vm._isDestroyed = true;
    // invoke destroy hooks on current rendered tree
    vm.__patch__(vm._vnode, null);
    // fire destroyed hook
    callHook(vm, 'destroyed');
    // turn off all instance listeners.
    vm.$off();
    // remove __vue__ reference
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
    // release circular reference (#6759)
    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent (
  vm,
  el,
  hydrating
) {
  vm.$el = el;
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    {
      /* istanbul ignore if */
      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
        vm.$options.el || el) {
        warn(
          'You are using the runtime-only build of Vue where the template ' +
          'compiler is not available. Either pre-compile the templates into ' +
          'render functions, or use the compiler-included build.',
          vm
        );
      } else {
        warn(
          'Failed to mount component: template or render function not defined.',
          vm
        );
      }
    }
  }
  callHook(vm, 'beforeMount');

  var updateComponent;
  /* istanbul ignore if */
  if (config.performance && mark) {
    updateComponent = function () {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;

      mark(startTag);
      var vnode = vm._render();
      mark(endTag);
      measure(("vue " + name + " render"), startTag, endTag);

      mark(startTag);
      vm._update(vnode, hydrating);
      mark(endTag);
      measure(("vue " + name + " patch"), startTag, endTag);
    };
  } else {
    updateComponent = function () {
      vm._update(vm._render(), hydrating);
    };
  }

  // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined
  new Watcher(vm, updateComponent, noop, {
    before: function before () {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true /* isRenderWatcher */);
  hydrating = false;

  // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook
  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }
  return vm
}

function updateChildComponent (
  vm,
  propsData,
  listeners,
  parentVnode,
  renderChildren
) {
  {
    isUpdatingChildComponent = true;
  }

  // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren.

  // check if there are dynamic scopedSlots (hand-written or compiled but with
  // dynamic slot names). Static scoped slots compiled from template has the
  // "$stable" marker.
  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(
    (newScopedSlots && !newScopedSlots.$stable) ||
    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||
    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)
  );

  // Any static slot children from the parent may have changed during parent's
  // update. Dynamic scoped slots may also have changed. In such cases, a forced
  // update is necessary to ensure correctness.
  var needsForceUpdate = !!(
    renderChildren ||               // has new static slots
    vm.$options._renderChildren ||  // has old static slots
    hasDynamicScopedSlot
  );

  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) { // update child tree's parent
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;

  // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render
  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject;

  // update props
  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?
      props[key] = validateProp(key, propOptions, propsData, vm);
    }
    toggleObserving(true);
    // keep a copy of raw propsData
    vm.$options.propsData = propsData;
  }

  // update listeners
  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners);

  // resolve slots + force update if has children
  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree (vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) { return true }
  }
  return false
}

function activateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return
    }
  } else if (vm._directInactive) {
    return
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'activated');
  }
}

function deactivateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'deactivated');
  }
}

function callHook (vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }
  popTarget();
}

/*  */

var MAX_UPDATE_COUNT = 100;

var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;

/**
 * Reset the scheduler's state.
 */
function resetSchedulerState () {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  {
    circular = {};
  }
  waiting = flushing = false;
}

// Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.
var currentFlushTimestamp = 0;

// Async edge case fix requires storing an event listener's attach timestamp.
var getNow = Date.now;

// Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)
if (inBrowser && !isIE) {
  var performance = window.performance;
  if (
    performance &&
    typeof performance.now === 'function' &&
    getNow() > document.createEvent('Event').timeStamp
  ) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = function () { return performance.now(); };
  }
}

/**
 * Flush both queues and run the watchers.
 */
function flushSchedulerQueue () {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id;

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
  queue.sort(function (a, b) { return a.id - b.id; });

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    if (watcher.before) {
      watcher.before();
    }
    id = watcher.id;
    has[id] = null;
    watcher.run();
    // in dev build, check and stop circular updates.
    if (has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;
      if (circular[id] > MAX_UPDATE_COUNT) {
        warn(
          'You may have an infinite update loop ' + (
            watcher.user
              ? ("in watcher with expression \"" + (watcher.expression) + "\"")
              : "in a component render function."
          ),
          watcher.vm
        );
        break
      }
    }
  }

  // keep copies of post queues before resetting state
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();

  resetSchedulerState();

  // call component updated and activated hooks
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);

  // devtool hook
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks (queue) {
  var i = queue.length;
  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
function queueActivatedComponent (vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks (queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true /* true */);
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
function queueWatcher (watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    // queue the flush
    if (!waiting) {
      waiting = true;

      if (!config.async) {
        flushSchedulerQueue();
        return
      }
      nextTick(flushSchedulerQueue);
    }
  }
}

/*  */



var uid$2 = 0;

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */
var Watcher = function Watcher (
  vm,
  expOrFn,
  cb,
  options,
  isRenderWatcher
) {
  this.vm = vm;
  if (isRenderWatcher) {
    vm._watcher = this;
  }
  vm._watchers.push(this);
  // options
  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }
  this.cb = cb;
  this.id = ++uid$2; // uid for batching
  this.active = true;
  this.dirty = this.lazy; // for lazy watchers
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression = expOrFn.toString();
  // parse expression for getter
  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);
    if (!this.getter) {
      this.getter = noop;
      warn(
        "Failed watching path: \"" + expOrFn + "\" " +
        'Watcher only accepts simple dot-delimited paths. ' +
        'For full control, use a function instead.',
        vm
      );
    }
  }
  this.value = this.lazy
    ? undefined
    : this.get();
};

/**
 * Evaluate the getter, and re-collect dependencies.
 */
Watcher.prototype.get = function get () {
  pushTarget(this);
  var value;
  var vm = this.vm;
  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
    } else {
      throw e
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }
    popTarget();
    this.cleanupDeps();
  }
  return value
};

/**
 * Add a dependency to this directive.
 */
Watcher.prototype.addDep = function addDep (dep) {
  var id = dep.id;
  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);
    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};

/**
 * Clean up for dependency collection.
 */
Watcher.prototype.cleanupDeps = function cleanupDeps () {
  var i = this.deps.length;
  while (i--) {
    var dep = this.deps[i];
    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */
Watcher.prototype.update = function update () {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */
Watcher.prototype.run = function run () {
  if (this.active) {
    var value = this.get();
    if (
      value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated.
      isObject(value) ||
      this.deep
    ) {
      // set new value
      var oldValue = this.value;
      this.value = value;
      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, ("callback for watcher \"" + (this.expression) + "\""));
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */
Watcher.prototype.evaluate = function evaluate () {
  this.value = this.get();
  this.dirty = false;
};

/**
 * Depend on all deps collected by this watcher.
 */
Watcher.prototype.depend = function depend () {
  var i = this.deps.length;
  while (i--) {
    this.deps[i].depend();
  }
};

/**
 * Remove self from all dependencies' subscriber list.
 */
Watcher.prototype.teardown = function teardown () {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }
    var i = this.deps.length;
    while (i--) {
      this.deps[i].removeSub(this);
    }
    this.active = false;
  }
};

/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy (target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter () {
    return this[sourceKey][key]
  };
  sharedPropertyDefinition.set = function proxySetter (val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState (vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) { initProps(vm, opts.props); }
  if (opts.methods) { initMethods(vm, opts.methods); }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true /* asRootData */);
  }
  if (opts.computed) { initComputed(vm, opts.computed); }
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps (vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {};
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  // root instance props should be converted
  if (!isRoot) {
    toggleObserving(false);
  }
  var loop = function ( key ) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */
    {
      var hyphenatedKey = hyphenate(key);
      if (isReservedAttribute(hyphenatedKey) ||
          config.isReservedAttr(hyphenatedKey)) {
        warn(
          ("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop."),
          vm
        );
      }
      defineReactive$$1(props, key, value, function () {
        if (!isRoot && !isUpdatingChildComponent) {
          warn(
            "Avoid mutating a prop directly since the value will be " +
            "overwritten whenever the parent component re-renders. " +
            "Instead, use a data or computed property based on the prop's " +
            "value. Prop being mutated: \"" + key + "\"",
            vm
          );
        }
      });
    }
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop( key );
  toggleObserving(true);
}

function initData (vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function'
    ? getData(data, vm)
    : data || {};
  if (!isPlainObject(data)) {
    data = {};
    warn(
      'data functions should return an object:\n' +
      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
      vm
    );
  }
  // proxy data on instance
  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;
  while (i--) {
    var key = keys[i];
    {
      if (methods && hasOwn(methods, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a data property."),
          vm
        );
      }
    }
    if (props && hasOwn(props, key)) {
      warn(
        "The data property \"" + key + "\" is already declared as a prop. " +
        "Use prop default value instead.",
        vm
      );
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  // observe data
  observe(data, true /* asRootData */);
}

function getData (data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();
  try {
    return data.call(vm, vm)
  } catch (e) {
    handleError(e, vm, "data()");
    return {}
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = { lazy: true };

function initComputed (vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null);
  // computed properties are just getters during SSR
  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;
    if (getter == null) {
      warn(
        ("Getter is missing for computed property \"" + key + "\"."),
        vm
      );
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(
        vm,
        getter || noop,
        noop,
        computedWatcherOptions
      );
    }

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else {
      if (key in vm.$data) {
        warn(("The computed property \"" + key + "\" is already defined in data."), vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn(("The computed property \"" + key + "\" is already defined as a prop."), vm);
      }
    }
  }
}

function defineComputed (
  target,
  key,
  userDef
) {
  var shouldCache = !isServerRendering();
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache
      ? createComputedGetter(key)
      : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get
      ? shouldCache && userDef.cache !== false
        ? createComputedGetter(key)
        : createGetterInvoker(userDef.get)
      : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }
  if (sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn(
        ("Computed property \"" + key + "\" was assigned to but it has no setter."),
        this
      );
    };
  }
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter (key) {
  return function computedGetter () {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value
    }
  }
}

function createGetterInvoker(fn) {
  return function computedGetter () {
    return fn.call(this, this)
  }
}

function initMethods (vm, methods) {
  var props = vm.$options.props;
  for (var key in methods) {
    {
      if (typeof methods[key] !== 'function') {
        warn(
          "Method \"" + key + "\" has type \"" + (typeof methods[key]) + "\" in the component definition. " +
          "Did you reference the function correctly?",
          vm
        );
      }
      if (props && hasOwn(props, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a prop."),
          vm
        );
      }
      if ((key in vm) && isReserved(key)) {
        warn(
          "Method \"" + key + "\" conflicts with an existing Vue instance method. " +
          "Avoid defining component methods that start with _ or $."
        );
      }
    }
    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch (vm, watch) {
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher (
  vm,
  expOrFn,
  handler,
  options
) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === 'string') {
    handler = vm[handler];
  }
  return vm.$watch(expOrFn, handler, options)
}

function stateMixin (Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};
  dataDef.get = function () { return this._data };
  var propsDef = {};
  propsDef.get = function () { return this._props };
  {
    dataDef.set = function () {
      warn(
        'Avoid replacing instance root $data. ' +
        'Use nested data properties instead.',
        this
      );
    };
    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);

  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (
    expOrFn,
    cb,
    options
  ) {
    var vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options)
    }
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      try {
        cb.call(vm, watcher.value);
      } catch (error) {
        handleError(error, vm, ("callback for immediate watcher \"" + (watcher.expression) + "\""));
      }
    }
    return function unwatchFn () {
      watcher.teardown();
    }
  };
}

/*  */

var uid$3 = 0;

function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    var vm = this;
    // a uid
    vm._uid = uid$3++;

    var startTag, endTag;
    /* istanbul ignore if */
    if (config.performance && mark) {
      startTag = "vue-perf-start:" + (vm._uid);
      endTag = "vue-perf-end:" + (vm._uid);
      mark(startTag);
    }

    // a flag to avoid this being observed
    vm._isVue = true;
    // merge options
    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(
        resolveConstructorOptions(vm.constructor),
        options || {},
        vm
      );
    }
    /* istanbul ignore else */
    {
      initProxy(vm);
    }
    // expose real self
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props
    initState(vm);
    initProvide(vm); // resolve provide after data/props
    callHook(vm, 'created');

    /* istanbul ignore if */
    if (config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure(("vue " + (vm._name) + " init"), startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent (vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  // doing this because it's faster than dynamic enumeration.
  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;

  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions (Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions;
      // check if there are any late-modified/attached options (#4976)
      var modifiedOptions = resolveModifiedOptions(Ctor);
      // update base extend options
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options
}

function resolveModifiedOptions (Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) { modified = {}; }
      modified[key] = latest[key];
    }
  }
  return modified
}

function Vue (options) {
  if (!(this instanceof Vue)
  ) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }
  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);

/*  */

function initUse (Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
    if (installedPlugins.indexOf(plugin) > -1) {
      return this
    }

    // additional parameters
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this
  };
}

/*  */

function initMixin$1 (Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this
  };
}

/*  */

function initExtend (Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;

  /**
   * Class inheritance
   */
  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId]
    }

    var name = extendOptions.name || Super.options.name;
    if (name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent (options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(
      Super.options,
      extendOptions
    );
    Sub['super'] = Super;

    // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }

    // allow further extension/mixin/plugin usage
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;

    // create asset registers, so extended classes
    // can have their private assets too.
    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    });
    // enable recursive self-lookup
    if (name) {
      Sub.options.components[name] = Sub;
    }

    // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);

    // cache constructor
    cachedCtors[SuperId] = Sub;
    return Sub
  };
}

function initProps$1 (Comp) {
  var props = Comp.options.props;
  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1 (Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}

/*  */

function initAssetRegisters (Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (
      id,
      definition
    ) {
      if (!definition) {
        return this.options[type + 's'][id]
      } else {
        /* istanbul ignore if */
        if (type === 'component') {
          validateComponentName(id);
        }
        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === 'directive' && typeof definition === 'function') {
          definition = { bind: definition, update: definition };
        }
        this.options[type + 's'][id] = definition;
        return definition
      }
    };
  });
}

/*  */



function getComponentName (opts) {
  return opts && (opts.Ctor.options.name || opts.tag)
}

function matches (pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1
  } else if (isRegExp(pattern)) {
    return pattern.test(name)
  }
  /* istanbul ignore next */
  return false
}

function pruneCache (keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;
  for (var key in cache) {
    var cachedNode = cache[key];
    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);
      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry (
  cache,
  key,
  keys,
  current
) {
  var cached$$1 = cache[key];
  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }
  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];

var KeepAlive = {
  name: 'keep-alive',
  abstract: true,

  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },

  created: function created () {
    this.cache = Object.create(null);
    this.keys = [];
  },

  destroyed: function destroyed () {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },

  mounted: function mounted () {
    var this$1 = this;

    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) { return matches(val, name); });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) { return !matches(val, name); });
    });
  },

  render: function render () {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;
      if (
        // not included
        (include && (!name || !matches(include, name))) ||
        // excluded
        (exclude && name && matches(exclude, name))
      ) {
        return vnode
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null
        // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
        : vnode.key;
      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance;
        // make current key freshest
        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key);
        // prune oldest entry
        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }
    return vnode || (slot && slot[0])
  }
};

var builtInComponents = {
  KeepAlive: KeepAlive
};

/*  */

function initGlobalAPI (Vue) {
  // config
  var configDef = {};
  configDef.get = function () { return config; };
  {
    configDef.set = function () {
      warn(
        'Do not replace the Vue.config object, set individual fields instead.'
      );
    };
  }
  Object.defineProperty(Vue, 'config', configDef);

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };

  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;

  // 2.6 explicit observable API
  Vue.observable = function (obj) {
    observe(obj);
    return obj
  };

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  });

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  Vue.options._base = Vue;

  extend(Vue.options.components, builtInComponents);

  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);

Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});

Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get () {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext
  }
});

// expose FunctionalRenderContext for ssr runtime helper installation
Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});

Vue.version = '2.6.12';

/*  */

// these are reserved for web because they are directly compiled away
// during template compilation
var isReservedAttr = makeMap('style,class');

// attributes that should be using props for binding
var acceptValue = makeMap('input,textarea,option,select,progress');
var mustUseProp = function (tag, type, attr) {
  return (
    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
    (attr === 'selected' && tag === 'option') ||
    (attr === 'checked' && tag === 'input') ||
    (attr === 'muted' && tag === 'video')
  )
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');

var convertEnumeratedValue = function (key, value) {
  return isFalsyAttrValue(value) || value === 'false'
    ? 'false'
    // allow arbitrary string value for contenteditable
    : key === 'contenteditable' && isValidContentEditableValue(value)
      ? value
      : 'true'
};

var isBooleanAttr = makeMap(
  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
  'required,reversed,scoped,seamless,selected,sortable,translate,' +
  'truespeed,typemustmatch,visible'
);

var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function (name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
};

var getXlinkProp = function (name) {
  return isXlink(name) ? name.slice(6, name.length) : ''
};

var isFalsyAttrValue = function (val) {
  return val == null || val === false
};

/*  */

function genClassForVnode (vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;
  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;
    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }
  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }
  return renderClass(data.staticClass, data.class)
}

function mergeClassData (child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class)
      ? [child.class, parent.class]
      : parent.class
  }
}

function renderClass (
  staticClass,
  dynamicClass
) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass))
  }
  /* istanbul ignore next */
  return ''
}

function concat (a, b) {
  return a ? b ? (a + ' ' + b) : a : (b || '')
}

function stringifyClass (value) {
  if (Array.isArray(value)) {
    return stringifyArray(value)
  }
  if (isObject(value)) {
    return stringifyObject(value)
  }
  if (typeof value === 'string') {
    return value
  }
  /* istanbul ignore next */
  return ''
}

function stringifyArray (value) {
  var res = '';
  var stringified;
  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) { res += ' '; }
      res += stringified;
    }
  }
  return res
}

function stringifyObject (value) {
  var res = '';
  for (var key in value) {
    if (value[key]) {
      if (res) { res += ' '; }
      res += key;
    }
  }
  return res
}

/*  */

var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};

var isHTMLTag = makeMap(
  'html,body,base,head,link,meta,style,title,' +
  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +
  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
  'embed,object,param,source,canvas,script,noscript,del,ins,' +
  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
  'output,progress,select,textarea,' +
  'details,dialog,menu,menuitem,summary,' +
  'content,element,shadow,template,blockquote,iframe,tfoot'
);

// this map is intentionally selective, only covering SVG elements that may
// contain child elements.
var isSVG = makeMap(
  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
  true
);

var isPreTag = function (tag) { return tag === 'pre'; };

var isReservedTag = function (tag) {
  return isHTMLTag(tag) || isSVG(tag)
};

function getTagNamespace (tag) {
  if (isSVG(tag)) {
    return 'svg'
  }
  // basic support for MathML
  // note it doesn't support other MathML elements being component roots
  if (tag === 'math') {
    return 'math'
  }
}

var unknownElementCache = Object.create(null);
function isUnknownElement (tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true
  }
  if (isReservedTag(tag)) {
    return false
  }
  tag = tag.toLowerCase();
  /* istanbul ignore if */
  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag]
  }
  var el = document.createElement(tag);
  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return (unknownElementCache[tag] = (
      el.constructor === window.HTMLUnknownElement ||
      el.constructor === window.HTMLElement
    ))
  } else {
    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');

/*  */

/**
 * Query an element selector if it's not an element already.
 */
function query (el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);
    if (!selected) {
      warn(
        'Cannot find element: ' + el
      );
      return document.createElement('div')
    }
    return selected
  } else {
    return el
  }
}

/*  */

function createElement$1 (tagName, vnode) {
  var elm = document.createElement(tagName);
  if (tagName !== 'select') {
    return elm
  }
  // false or null will remove the attribute but undefined will not
  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }
  return elm
}

function createElementNS (namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName)
}

function createTextNode (text) {
  return document.createTextNode(text)
}

function createComment (text) {
  return document.createComment(text)
}

function insertBefore (parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild (node, child) {
  node.removeChild(child);
}

function appendChild (node, child) {
  node.appendChild(child);
}

function parentNode (node) {
  return node.parentNode
}

function nextSibling (node) {
  return node.nextSibling
}

function tagName (node) {
  return node.tagName
}

function setTextContent (node, text) {
  node.textContent = text;
}

function setStyleScope (node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps = /*#__PURE__*/Object.freeze({
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setStyleScope: setStyleScope
});

/*  */

var ref = {
  create: function create (_, vnode) {
    registerRef(vnode);
  },
  update: function update (oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy (vnode) {
    registerRef(vnode, true);
  }
};

function registerRef (vnode, isRemoval) {
  var key = vnode.data.ref;
  if (!isDef(key)) { return }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;
  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}

/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

var emptyNode = new VNode('', {}, []);

var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode (a, b) {
  return (
    a.key === b.key && (
      (
        a.tag === b.tag &&
        a.isComment === b.isComment &&
        isDef(a.data) === isDef(b.data) &&
        sameInputType(a, b)
      ) || (
        isTrue(a.isAsyncPlaceholder) &&
        a.asyncFactory === b.asyncFactory &&
        isUndef(b.asyncFactory.error)
      )
    )
  )
}

function sameInputType (a, b) {
  if (a.tag !== 'input') { return true }
  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)
}

function createKeyToOldIdx (children, beginIdx, endIdx) {
  var i, key;
  var map = {};
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key)) { map[key] = i; }
  }
  return map
}

function createPatchFunction (backend) {
  var i, j;
  var cbs = {};

  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt (elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
  }

  function createRmCb (childElm, listeners) {
    function remove$$1 () {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }
    remove$$1.listeners = listeners;
    return remove$$1
  }

  function removeNode (el) {
    var parent = nodeOps.parentNode(el);
    // element may have already been removed due to v-html / v-text
    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1 (vnode, inVPre) {
    return (
      !inVPre &&
      !vnode.ns &&
      !(
        config.ignoredElements.length &&
        config.ignoredElements.some(function (ignore) {
          return isRegExp(ignore)
            ? ignore.test(vnode.tag)
            : ignore === vnode.tag
        })
      ) &&
      config.isUnknownElement(vnode.tag)
    )
  }

  var creatingElmInVPre = 0;

  function createElm (
    vnode,
    insertedVnodeQueue,
    parentElm,
    refElm,
    nested,
    ownerArray,
    index
  ) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check
    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;
    if (isDef(tag)) {
      {
        if (data && data.pre) {
          creatingElmInVPre++;
        }
        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn(
            'Unknown custom element: <' + tag + '> - did you ' +
            'register the component correctly? For recursive components, ' +
            'make sure to provide the "name" option.',
            vnode.context
          );
        }
      }

      vnode.elm = vnode.ns
        ? nodeOps.createElementNS(vnode.ns, tag)
        : nodeOps.createElement(tag, vnode);
      setScope(vnode);

      /* istanbul ignore if */
      {
        createChildren(vnode, children, insertedVnodeQueue);
        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }
        insert(parentElm, vnode.elm, refElm);
      }

      if (data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;
    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false /* hydrating */);
      }
      // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.
      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);
        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }
        return true
      }
    }
  }

  function initComponent (vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }
    vnode.elm = vnode.componentInstance.$el;
    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode);
      // make sure to invoke the insert hook
      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i;
    // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.
    var innerNode = vnode;
    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;
      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }
        insertedVnodeQueue.push(innerNode);
        break
      }
    }
    // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself
    insert(parentElm, vnode.elm, refElm);
  }

  function insert (parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (nodeOps.parentNode(ref$$1) === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren (vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      {
        checkDuplicateKeys(children);
      }
      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable (vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }
    return isDef(vnode.tag)
  }

  function invokeCreateHooks (vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }
    i = vnode.data.hook; // Reuse variable
    if (isDef(i)) {
      if (isDef(i.create)) { i.create(emptyNode, vnode); }
      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }
    }
  }

  // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.
  function setScope (vnode) {
    var i;
    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;
      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }
        ancestor = ancestor.parent;
      }
    }
    // for slot content they should also get the scopeId from the host instance.
    if (isDef(i = activeInstance) &&
      i !== vnode.context &&
      i !== vnode.fnContext &&
      isDef(i = i.$options._scopeId)
    ) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook (vnode) {
    var i, j;
    var data = vnode.data;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
    }
    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes (vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];
      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else { // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook (vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;
      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      }
      // recursively invoke hooks on child component root node
      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }
      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }
      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;

    // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions
    var canMove = !removeOnly;

    {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
        idxInOld = isDef(newStartVnode.key)
          ? oldKeyToIdx[newStartVnode.key]
          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
        if (isUndef(idxInOld)) { // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];
          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }
        newStartVnode = newCh[++newStartIdx];
      }
    }
    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys (children) {
    var seenKeys = {};
    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;
      if (isDef(key)) {
        if (seenKeys[key]) {
          warn(
            ("Duplicate keys detected: '" + key + "'. This may cause an update error."),
            vnode.context
          );
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld (node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];
      if (isDef(c) && sameVnode(node, c)) { return i }
    }
  }

  function patchVnode (
    oldVnode,
    vnode,
    insertedVnodeQueue,
    ownerArray,
    index,
    removeOnly
  ) {
    if (oldVnode === vnode) {
      return
    }

    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // clone reused vnode
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }
      return
    }

    // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.
    if (isTrue(vnode.isStatic) &&
      isTrue(oldVnode.isStatic) &&
      vnode.key === oldVnode.key &&
      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
    ) {
      vnode.componentInstance = oldVnode.componentInstance;
      return
    }

    var i;
    var data = vnode.data;
    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;
    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
    }
    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
      } else if (isDef(ch)) {
        {
          checkDuplicateKeys(ch);
        }
        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
    }
  }

  function invokeInsertHook (vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false;
  // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).
  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');

  // Note: this is a browser-only function so we can assume elms are DOM nodes.
  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || (data && data.pre);
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true
    }
    // assert node match
    {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false
      }
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true
      }
    }
    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if (typeof console !== 'undefined' &&
                !hydrationBailed
              ) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }
              return false
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;
            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break
              }
              childNode = childNode.nextSibling;
            }
            // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.
            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if (typeof console !== 'undefined' &&
                !hydrationBailed
              ) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }
              return false
            }
          }
        }
      }
      if (isDef(data)) {
        var fullInvoke = false;
        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break
          }
        }
        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }
    return true
  }

  function assertNodeMatch (node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || (
        !isUnknownElement$$1(vnode, inVPre) &&
        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
      )
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3)
    }
  }

  return function patch (oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }
      return
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);
      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }
          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode
            } else {
              warn(
                'The client-side rendered virtual DOM tree is not matching ' +
                'server-rendered content. This is likely caused by incorrect ' +
                'HTML markup, for example nesting block-level elements inside ' +
                '<p>, or missing <tbody>. Bailing hydration and performing ' +
                'full client-side render.'
              );
            }
          }
          // either not server-rendered, or hydration failed.
          // create an empty node and replace it
          oldVnode = emptyNodeAt(oldVnode);
        }

        // replacing existing element
        var oldElm = oldVnode.elm;
        var parentElm = nodeOps.parentNode(oldElm);

        // create new node
        createElm(
          vnode,
          insertedVnodeQueue,
          // extremely rare edge case: do not insert if old element is in a
          // leaving transition. Only happens when combining transition +
          // keep-alive + HOCs. (#4590)
          oldElm._leaveCb ? null : parentElm,
          nodeOps.nextSibling(oldElm)
        );

        // update parent placeholder node element, recursively
        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);
          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }
            ancestor.elm = vnode.elm;
            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              }
              // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.
              var insert = ancestor.data.hook.insert;
              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }
            ancestor = ancestor.parent;
          }
        }

        // destroy old node
        if (isDef(parentElm)) {
          removeVnodes([oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm
  }
}

/*  */

var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives (vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives (oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update (oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

  var dirsWithInsert = [];
  var dirsWithPostpatch = [];

  var key, oldDir, dir;
  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];
    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);
      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook$1(dir, 'update', vnode, oldVnode);
      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function () {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };
    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1 (
  dirs,
  vm
) {
  var res = Object.create(null);
  if (!dirs) {
    // $flow-disable-line
    return res
  }
  var i, dir;
  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];
    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }
    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  }
  // $flow-disable-line
  return res
}

function getRawDirName (dir) {
  return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
}

function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];
  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
    }
  }
}

var baseModules = [
  ref,
  directives
];

/*  */

function updateAttrs (oldVnode, vnode) {
  var opts = vnode.componentOptions;
  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return
  }
  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return
  }
  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];
    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  }
  // #4391: in IE9, setting type can reset value for input[type=radio]
  // #6666: IE/Edge forces progress value down to 1 before setting a max
  /* istanbul ignore if */
  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }
  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr (el, key, value) {
  if (el.tagName.indexOf('-') > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED'
        ? 'true'
        : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, convertEnumeratedValue(key, value));
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}

function baseSetAttr (el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    // #7138: IE10 & 11 fires input event when setting placeholder on
    // <textarea>... block the first input event and remove the blocker
    // immediately.
    /* istanbul ignore if */
    if (
      isIE && !isIE9 &&
      el.tagName === 'TEXTAREA' &&
      key === 'placeholder' && value !== '' && !el.__ieph
    ) {
      var blocker = function (e) {
        e.stopImmediatePropagation();
        el.removeEventListener('input', blocker);
      };
      el.addEventListener('input', blocker);
      // $flow-disable-line
      el.__ieph = true; /* IE placeholder patched */
    }
    el.setAttribute(key, value);
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};

/*  */

function updateClass (oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (
    isUndef(data.staticClass) &&
    isUndef(data.class) && (
      isUndef(oldData) || (
        isUndef(oldData.staticClass) &&
        isUndef(oldData.class)
      )
    )
  ) {
    return
  }

  var cls = genClassForVnode(vnode);

  // handle transition classes
  var transitionClass = el._transitionClasses;
  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  }

  // set the class
  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};

/*  */

var validDivisionCharRE = /[\w).+\-_$\]]/;

function parseFilters (exp) {
  var inSingle = false;
  var inDouble = false;
  var inTemplateString = false;
  var inRegex = false;
  var curly = 0;
  var square = 0;
  var paren = 0;
  var lastFilterIndex = 0;
  var c, prev, i, expression, filters;

  for (i = 0; i < exp.length; i++) {
    prev = c;
    c = exp.charCodeAt(i);
    if (inSingle) {
      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }
    } else if (inDouble) {
      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }
    } else if (inTemplateString) {
      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }
    } else if (inRegex) {
      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }
    } else if (
      c === 0x7C && // pipe
      exp.charCodeAt(i + 1) !== 0x7C &&
      exp.charCodeAt(i - 1) !== 0x7C &&
      !curly && !square && !paren
    ) {
      if (expression === undefined) {
        // first filter, end of expression
        lastFilterIndex = i + 1;
        expression = exp.slice(0, i).trim();
      } else {
        pushFilter();
      }
    } else {
      switch (c) {
        case 0x22: inDouble = true; break         // "
        case 0x27: inSingle = true; break         // '
        case 0x60: inTemplateString = true; break // `
        case 0x28: paren++; break                 // (
        case 0x29: paren--; break                 // )
        case 0x5B: square++; break                // [
        case 0x5D: square--; break                // ]
        case 0x7B: curly++; break                 // {
        case 0x7D: curly--; break                 // }
      }
      if (c === 0x2f) { // /
        var j = i - 1;
        var p = (void 0);
        // find first non-whitespace prev char
        for (; j >= 0; j--) {
          p = exp.charAt(j);
          if (p !== ' ') { break }
        }
        if (!p || !validDivisionCharRE.test(p)) {
          inRegex = true;
        }
      }
    }
  }

  if (expression === undefined) {
    expression = exp.slice(0, i).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }

  function pushFilter () {
    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
    lastFilterIndex = i + 1;
  }

  if (filters) {
    for (i = 0; i < filters.length; i++) {
      expression = wrapFilter(expression, filters[i]);
    }
  }

  return expression
}

function wrapFilter (exp, filter) {
  var i = filter.indexOf('(');
  if (i < 0) {
    // _f: resolveFilter
    return ("_f(\"" + filter + "\")(" + exp + ")")
  } else {
    var name = filter.slice(0, i);
    var args = filter.slice(i + 1);
    return ("_f(\"" + name + "\")(" + exp + (args !== ')' ? ',' + args : args))
  }
}

/*  */



/* eslint-disable no-unused-vars */
function baseWarn (msg, range) {
  console.error(("[Vue compiler]: " + msg));
}
/* eslint-enable no-unused-vars */

function pluckModuleFunction (
  modules,
  key
) {
  return modules
    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })
    : []
}

function addProp (el, name, value, range, dynamic) {
  (el.props || (el.props = [])).push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));
  el.plain = false;
}

function addAttr (el, name, value, range, dynamic) {
  var attrs = dynamic
    ? (el.dynamicAttrs || (el.dynamicAttrs = []))
    : (el.attrs || (el.attrs = []));
  attrs.push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));
  el.plain = false;
}

// add a raw attr (use this in preTransforms)
function addRawAttr (el, name, value, range) {
  el.attrsMap[name] = value;
  el.attrsList.push(rangeSetItem({ name: name, value: value }, range));
}

function addDirective (
  el,
  name,
  rawName,
  value,
  arg,
  isDynamicArg,
  modifiers,
  range
) {
  (el.directives || (el.directives = [])).push(rangeSetItem({
    name: name,
    rawName: rawName,
    value: value,
    arg: arg,
    isDynamicArg: isDynamicArg,
    modifiers: modifiers
  }, range));
  el.plain = false;
}

function prependModifierMarker (symbol, name, dynamic) {
  return dynamic
    ? ("_p(" + name + ",\"" + symbol + "\")")
    : symbol + name // mark the event as captured
}

function addHandler (
  el,
  name,
  value,
  modifiers,
  important,
  warn,
  range,
  dynamic
) {
  modifiers = modifiers || emptyObject;
  // warn prevent and passive modifier
  /* istanbul ignore if */
  if (
    warn &&
    modifiers.prevent && modifiers.passive
  ) {
    warn(
      'passive and prevent can\'t be used together. ' +
      'Passive handler can\'t prevent default event.',
      range
    );
  }

  // normalize click.right and click.middle since they don't actually fire
  // this is technically browser-specific, but at least for now browsers are
  // the only target envs that have right/middle clicks.
  if (modifiers.right) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'contextmenu':(" + name + ")";
    } else if (name === 'click') {
      name = 'contextmenu';
      delete modifiers.right;
    }
  } else if (modifiers.middle) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'mouseup':(" + name + ")";
    } else if (name === 'click') {
      name = 'mouseup';
    }
  }

  // check capture modifier
  if (modifiers.capture) {
    delete modifiers.capture;
    name = prependModifierMarker('!', name, dynamic);
  }
  if (modifiers.once) {
    delete modifiers.once;
    name = prependModifierMarker('~', name, dynamic);
  }
  /* istanbul ignore if */
  if (modifiers.passive) {
    delete modifiers.passive;
    name = prependModifierMarker('&', name, dynamic);
  }

  var events;
  if (modifiers.native) {
    delete modifiers.native;
    events = el.nativeEvents || (el.nativeEvents = {});
  } else {
    events = el.events || (el.events = {});
  }

  var newHandler = rangeSetItem({ value: value.trim(), dynamic: dynamic }, range);
  if (modifiers !== emptyObject) {
    newHandler.modifiers = modifiers;
  }

  var handlers = events[name];
  /* istanbul ignore if */
  if (Array.isArray(handlers)) {
    important ? handlers.unshift(newHandler) : handlers.push(newHandler);
  } else if (handlers) {
    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
  } else {
    events[name] = newHandler;
  }

  el.plain = false;
}

function getRawBindingAttr (
  el,
  name
) {
  return el.rawAttrsMap[':' + name] ||
    el.rawAttrsMap['v-bind:' + name] ||
    el.rawAttrsMap[name]
}

function getBindingAttr (
  el,
  name,
  getStatic
) {
  var dynamicValue =
    getAndRemoveAttr(el, ':' + name) ||
    getAndRemoveAttr(el, 'v-bind:' + name);
  if (dynamicValue != null) {
    return parseFilters(dynamicValue)
  } else if (getStatic !== false) {
    var staticValue = getAndRemoveAttr(el, name);
    if (staticValue != null) {
      return JSON.stringify(staticValue)
    }
  }
}

// note: this only removes the attr from the Array (attrsList) so that it
// doesn't get processed by processAttrs.
// By default it does NOT remove it from the map (attrsMap) because the map is
// needed during codegen.
function getAndRemoveAttr (
  el,
  name,
  removeFromMap
) {
  var val;
  if ((val = el.attrsMap[name]) != null) {
    var list = el.attrsList;
    for (var i = 0, l = list.length; i < l; i++) {
      if (list[i].name === name) {
        list.splice(i, 1);
        break
      }
    }
  }
  if (removeFromMap) {
    delete el.attrsMap[name];
  }
  return val
}

function getAndRemoveAttrByRegex (
  el,
  name
) {
  var list = el.attrsList;
  for (var i = 0, l = list.length; i < l; i++) {
    var attr = list[i];
    if (name.test(attr.name)) {
      list.splice(i, 1);
      return attr
    }
  }
}

function rangeSetItem (
  item,
  range
) {
  if (range) {
    if (range.start != null) {
      item.start = range.start;
    }
    if (range.end != null) {
      item.end = range.end;
    }
  }
  return item
}

/*  */

/**
 * Cross-platform code generation for component v-model
 */
function genComponentModel (
  el,
  value,
  modifiers
) {
  var ref = modifiers || {};
  var number = ref.number;
  var trim = ref.trim;

  var baseValueExpression = '$$v';
  var valueExpression = baseValueExpression;
  if (trim) {
    valueExpression =
      "(typeof " + baseValueExpression + " === 'string'" +
      "? " + baseValueExpression + ".trim()" +
      ": " + baseValueExpression + ")";
  }
  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }
  var assignment = genAssignmentCode(value, valueExpression);

  el.model = {
    value: ("(" + value + ")"),
    expression: JSON.stringify(value),
    callback: ("function (" + baseValueExpression + ") {" + assignment + "}")
  };
}

/**
 * Cross-platform codegen helper for generating v-model value assignment code.
 */
function genAssignmentCode (
  value,
  assignment
) {
  var res = parseModel(value);
  if (res.key === null) {
    return (value + "=" + assignment)
  } else {
    return ("$set(" + (res.exp) + ", " + (res.key) + ", " + assignment + ")")
  }
}

/**
 * Parse a v-model expression into a base path and a final key segment.
 * Handles both dot-path and possible square brackets.
 *
 * Possible cases:
 *
 * - test
 * - test[key]
 * - test[test1[key]]
 * - test["a"][key]
 * - xxx.test[a[a].test1[key]]
 * - test.xxx.a["asa"][test1[key]]
 *
 */

var len, str, chr, index$1, expressionPos, expressionEndPos;



function parseModel (val) {
  // Fix https://github.com/vuejs/vue/pull/7730
  // allow v-model="obj.val " (trailing whitespace)
  val = val.trim();
  len = val.length;

  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
    index$1 = val.lastIndexOf('.');
    if (index$1 > -1) {
      return {
        exp: val.slice(0, index$1),
        key: '"' + val.slice(index$1 + 1) + '"'
      }
    } else {
      return {
        exp: val,
        key: null
      }
    }
  }

  str = val;
  index$1 = expressionPos = expressionEndPos = 0;

  while (!eof()) {
    chr = next();
    /* istanbul ignore if */
    if (isStringStart(chr)) {
      parseString(chr);
    } else if (chr === 0x5B) {
      parseBracket(chr);
    }
  }

  return {
    exp: val.slice(0, expressionPos),
    key: val.slice(expressionPos + 1, expressionEndPos)
  }
}

function next () {
  return str.charCodeAt(++index$1)
}

function eof () {
  return index$1 >= len
}

function isStringStart (chr) {
  return chr === 0x22 || chr === 0x27
}

function parseBracket (chr) {
  var inBracket = 1;
  expressionPos = index$1;
  while (!eof()) {
    chr = next();
    if (isStringStart(chr)) {
      parseString(chr);
      continue
    }
    if (chr === 0x5B) { inBracket++; }
    if (chr === 0x5D) { inBracket--; }
    if (inBracket === 0) {
      expressionEndPos = index$1;
      break
    }
  }
}

function parseString (chr) {
  var stringQuote = chr;
  while (!eof()) {
    chr = next();
    if (chr === stringQuote) {
      break
    }
  }
}

/*  */

var warn$1;

// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.
var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';

function model (
  el,
  dir,
  _warn
) {
  warn$1 = _warn;
  var value = dir.value;
  var modifiers = dir.modifiers;
  var tag = el.tag;
  var type = el.attrsMap.type;

  {
    // inputs with type="file" are read only and setting the input's
    // value will throw an error.
    if (tag === 'input' && type === 'file') {
      warn$1(
        "<" + (el.tag) + " v-model=\"" + value + "\" type=\"file\">:\n" +
        "File inputs are read only. Use a v-on:change listener instead.",
        el.rawAttrsMap['v-model']
      );
    }
  }

  if (el.component) {
    genComponentModel(el, value, modifiers);
    // component v-model doesn't need extra runtime
    return false
  } else if (tag === 'select') {
    genSelect(el, value, modifiers);
  } else if (tag === 'input' && type === 'checkbox') {
    genCheckboxModel(el, value, modifiers);
  } else if (tag === 'input' && type === 'radio') {
    genRadioModel(el, value, modifiers);
  } else if (tag === 'input' || tag === 'textarea') {
    genDefaultModel(el, value, modifiers);
  } else if (!config.isReservedTag(tag)) {
    genComponentModel(el, value, modifiers);
    // component v-model doesn't need extra runtime
    return false
  } else {
    warn$1(
      "<" + (el.tag) + " v-model=\"" + value + "\">: " +
      "v-model is not supported on this element type. " +
      'If you are working with contenteditable, it\'s recommended to ' +
      'wrap a library dedicated for that purpose inside a custom component.',
      el.rawAttrsMap['v-model']
    );
  }

  // ensure runtime directive metadata
  return true
}

function genCheckboxModel (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
  addProp(el, 'checked',
    "Array.isArray(" + value + ")" +
    "?_i(" + value + "," + valueBinding + ")>-1" + (
      trueValueBinding === 'true'
        ? (":(" + value + ")")
        : (":_q(" + value + "," + trueValueBinding + ")")
    )
  );
  addHandler(el, 'change',
    "var $$a=" + value + "," +
        '$$el=$event.target,' +
        "$$c=$$el.checked?(" + trueValueBinding + "):(" + falseValueBinding + ");" +
    'if(Array.isArray($$a)){' +
      "var $$v=" + (number ? '_n(' + valueBinding + ')' : valueBinding) + "," +
          '$$i=_i($$a,$$v);' +
      "if($$el.checked){$$i<0&&(" + (genAssignmentCode(value, '$$a.concat([$$v])')) + ")}" +
      "else{$$i>-1&&(" + (genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))')) + ")}" +
    "}else{" + (genAssignmentCode(value, '$$c')) + "}",
    null, true
  );
}

function genRadioModel (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  valueBinding = number ? ("_n(" + valueBinding + ")") : valueBinding;
  addProp(el, 'checked', ("_q(" + value + "," + valueBinding + ")"));
  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);
}

function genSelect (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var selectedVal = "Array.prototype.filter" +
    ".call($event.target.options,function(o){return o.selected})" +
    ".map(function(o){var val = \"_value\" in o ? o._value : o.value;" +
    "return " + (number ? '_n(val)' : 'val') + "})";

  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';
  var code = "var $$selectedVal = " + selectedVal + ";";
  code = code + " " + (genAssignmentCode(value, assignment));
  addHandler(el, 'change', code, null, true);
}

function genDefaultModel (
  el,
  value,
  modifiers
) {
  var type = el.attrsMap.type;

  // warn if v-bind:value conflicts with v-model
  // except for inputs with v-bind:type
  {
    var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];
    var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];
    if (value$1 && !typeBinding) {
      var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';
      warn$1(
        binding + "=\"" + value$1 + "\" conflicts with v-model on the same element " +
        'because the latter already expands to a value binding internally',
        el.rawAttrsMap[binding]
      );
    }
  }

  var ref = modifiers || {};
  var lazy = ref.lazy;
  var number = ref.number;
  var trim = ref.trim;
  var needCompositionGuard = !lazy && type !== 'range';
  var event = lazy
    ? 'change'
    : type === 'range'
      ? RANGE_TOKEN
      : 'input';

  var valueExpression = '$event.target.value';
  if (trim) {
    valueExpression = "$event.target.value.trim()";
  }
  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var code = genAssignmentCode(value, valueExpression);
  if (needCompositionGuard) {
    code = "if($event.target.composing)return;" + code;
  }

  addProp(el, 'value', ("(" + value + ")"));
  addHandler(el, event, code, null, true);
  if (trim || number) {
    addHandler(el, 'blur', '$forceUpdate()');
  }
}

/*  */

// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.
function normalizeEvents (on) {
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  }
  // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4
  /* istanbul ignore if */
  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function createOnceHandler$1 (event, handler, capture) {
  var _target = target$1; // save current target element in closure
  return function onceHandler () {
    var res = handler.apply(null, arguments);
    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  }
}

// #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
// implementation and does not fire microtasks in between event propagation, so
// safe to exclude.
var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);

function add$1 (
  name,
  handler,
  capture,
  passive
) {
  // async edge case #6566: inner click event triggers patch, event handler
  // attached to outer element during patch, and triggered again. This
  // happens because browsers fire microtask ticks between event propagation.
  // the solution is simple: we save the timestamp when a handler is attached,
  // and the handler would only fire if the event passed to it was fired
  // AFTER it was attached.
  if (useMicrotaskFix) {
    var attachedTimestamp = currentFlushTimestamp;
    var original = handler;
    handler = original._wrapper = function (e) {
      if (
        // no bubbling, should always fire.
        // this is just a safety net in case event.timeStamp is unreliable in
        // certain weird environments...
        e.target === e.currentTarget ||
        // event is fired after handler attachment
        e.timeStamp >= attachedTimestamp ||
        // bail for environments that have buggy event.timeStamp implementations
        // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
        // #9681 QtWebEngine event.timeStamp is negative value
        e.timeStamp <= 0 ||
        // #9448 bail if event is fired in another document in a multi-page
        // electron/nw.js app, since event.timeStamp will be using a different
        // starting reference
        e.target.ownerDocument !== document
      ) {
        return original.apply(this, arguments)
      }
    };
  }
  target$1.addEventListener(
    name,
    handler,
    supportsPassive
      ? { capture: capture, passive: passive }
      : capture
  );
}

function remove$2 (
  name,
  handler,
  capture,
  _target
) {
  (_target || target$1).removeEventListener(
    name,
    handler._wrapper || handler,
    capture
  );
}

function updateDOMListeners (oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return
  }
  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
  target$1 = undefined;
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};

/*  */

var svgContainer;

function updateDOMProps (oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return
  }
  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (!(key in props)) {
      elm[key] = '';
    }
  }

  for (key in props) {
    cur = props[key];
    // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)
    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) { vnode.children.length = 0; }
      if (cur === oldProps[key]) { continue }
      // #6601 work around Chrome version <= 55 bug where single textNode
      // replaced by innerHTML/textContent retains its parentNode property
      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }

    if (key === 'value' && elm.tagName !== 'PROGRESS') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur;
      // avoid resetting cursor position when value is the same
      var strCur = isUndef(cur) ? '' : String(cur);
      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
      // IE doesn't support innerHTML for SVG elements
      svgContainer = svgContainer || document.createElement('div');
      svgContainer.innerHTML = "<svg>" + cur + "</svg>";
      var svg = svgContainer.firstChild;
      while (elm.firstChild) {
        elm.removeChild(elm.firstChild);
      }
      while (svg.firstChild) {
        elm.appendChild(svg.firstChild);
      }
    } else if (
      // skip the update if old and new VDOM state is the same.
      // `value` is handled separately because the DOM value may be temporarily
      // out of sync with VDOM state due to focus, composition and modifiers.
      // This  #4521 by skipping the unnecessary `checked` update.
      cur !== oldProps[key]
    ) {
      // some property updates can throw
      // e.g. `value` on <progress> w/ non-finite value
      try {
        elm[key] = cur;
      } catch (e) {}
    }
  }
}

// check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue (elm, checkVal) {
  return (!elm.composing && (
    elm.tagName === 'OPTION' ||
    isNotInFocusAndDirty(elm, checkVal) ||
    isDirtyWithModifiers(elm, checkVal)
  ))
}

function isNotInFocusAndDirty (elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true;
  // #6157
  // work around IE bug when accessing document.activeElement in an iframe
  try { notInFocus = document.activeElement !== elm; } catch (e) {}
  return notInFocus && elm.value !== checkVal
}

function isDirtyWithModifiers (elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime
  if (isDef(modifiers)) {
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal)
    }
    if (modifiers.trim) {
      return value.trim() !== newVal.trim()
    }
  }
  return value !== newVal
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};

/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res
});

// merge static and dynamic style data on the same vnode
function normalizeStyleData (data) {
  var style = normalizeStyleBinding(data.style);
  // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it
  return data.staticStyle
    ? extend(data.staticStyle, style)
    : style
}

// normalize possible array / string values into Object
function normalizeStyleBinding (bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle)
  }
  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle)
  }
  return bindingStyle
}

/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */
function getStyle (vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;
    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;
      if (
        childNode && childNode.data &&
        (styleData = normalizeStyleData(childNode.data))
      ) {
        extend(res, styleData);
      }
    }
  }

  if ((styleData = normalizeStyleData(vnode.data))) {
    extend(res, styleData);
  }

  var parentNode = vnode;
  while ((parentNode = parentNode.parent)) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }
  return res
}

/*  */

var cssVarRE = /^--/;
var importantRE = /\s*!important$/;
var setProp = function (el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);
    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];

var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);
  if (prop !== 'filter' && (prop in emptyStyle)) {
    return prop
  }
  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;
    if (name in emptyStyle) {
      return name
    }
  }
});

function updateStyle (oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) &&
    isUndef(oldData.staticStyle) && isUndef(oldData.style)
  ) {
    return
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

  // if static style exists, stylebinding already merged into it when doing normalizeStyleData
  var oldStyle = oldStaticStyle || oldStyleBinding;

  var style = normalizeStyleBinding(vnode.data.style) || {};

  // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.
  vnode.data.normalizedStyle = isDef(style.__ob__)
    ? extend({}, style)
    : style;

  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }
  for (name in newStyle) {
    cur = newStyle[name];
    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};

/*  */

var whitespaceRE = /\s+/;

/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function addClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) { return el.classList.add(c); });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}

/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function removeClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) { return el.classList.remove(c); });
    } else {
      el.classList.remove(cls);
    }
    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }
    cur = cur.trim();
    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}

/*  */

function resolveTransition (def$$1) {
  if (!def$$1) {
    return
  }
  /* istanbul ignore else */
  if (typeof def$$1 === 'object') {
    var res = {};
    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }
    extend(res, def$$1);
    return res
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1)
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: (name + "-enter"),
    enterToClass: (name + "-enter-to"),
    enterActiveClass: (name + "-enter-active"),
    leaveClass: (name + "-leave"),
    leaveToClass: (name + "-leave-to"),
    leaveActiveClass: (name + "-leave-active")
  }
});

var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation';

// Transition property/event sniffing
var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';
if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined &&
    window.onwebkittransitionend !== undefined
  ) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }
  if (window.onanimationend === undefined &&
    window.onwebkitanimationend !== undefined
  ) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
}

// binding to window is necessary to make hot reload work in IE in strict mode
var raf = inBrowser
  ? window.requestAnimationFrame
    ? window.requestAnimationFrame.bind(window)
    : setTimeout
  : /* istanbul ignore next */ function (fn) { return fn(); };

function nextFrame (fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass (el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass (el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }
  removeClass(el, cls);
}

function whenTransitionEnds (
  el,
  expectedType,
  cb
) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;
  if (!type) { return cb() }
  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;
  var end = function () {
    el.removeEventListener(event, onEnd);
    cb();
  };
  var onEnd = function (e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo (el, expectedType) {
  var styles = window.getComputedStyle(el);
  // JSDOM may return undefined for transition properties
  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);

  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0
      ? transitionTimeout > animationTimeout
        ? TRANSITION
        : ANIMATION
      : null;
    propCount = type
      ? type === TRANSITION
        ? transitionDurations.length
        : animationDurations.length
      : 0;
  }
  var hasTransform =
    type === TRANSITION &&
    transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  }
}

function getTimeout (delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i])
  }))
}

// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
// in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down (i.e. acting
// as a floor function) causing unexpected behaviors
function toMs (s) {
  return Number(s.slice(0, -1).replace(',', '.')) * 1000
}

/*  */

function enter (vnode, toggleDisplay) {
  var el = vnode.elm;

  // call leave callback now
  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;
    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return
  }

  /* istanbul ignore if */
  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration;

  // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.
  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;
  while (transitionNode && transitionNode.parent) {
    context = transitionNode.context;
    transitionNode = transitionNode.parent;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return
  }

  var startClass = isAppear && appearClass
    ? appearClass
    : enterClass;
  var activeClass = isAppear && appearActiveClass
    ? appearActiveClass
    : enterActiveClass;
  var toClass = isAppear && appearToClass
    ? appearToClass
    : enterToClass;

  var beforeEnterHook = isAppear
    ? (beforeAppear || beforeEnter)
    : beforeEnter;
  var enterHook = isAppear
    ? (typeof appear === 'function' ? appear : enter)
    : enter;
  var afterEnterHook = isAppear
    ? (afterAppear || afterEnter)
    : afterEnter;
  var enterCancelledHook = isAppear
    ? (appearCancelled || enterCancelled)
    : enterCancelled;

  var explicitEnterDuration = toNumber(
    isObject(duration)
      ? duration.enter
      : duration
  );

  if (explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);

  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }
      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }
    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
      if (pendingNode &&
        pendingNode.tag === vnode.tag &&
        pendingNode.elm._leaveCb
      ) {
        pendingNode.elm._leaveCb();
      }
      enterHook && enterHook(el, cb);
    });
  }

  // start enter transition
  beforeEnterHook && beforeEnterHook(el);
  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);
      if (!cb.cancelled) {
        addTransitionClass(el, toClass);
        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave (vnode, rm) {
  var el = vnode.elm;

  // call enter callback now
  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;
    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data) || el.nodeType !== 1) {
    return rm()
  }

  /* istanbul ignore if */
  if (isDef(el._leaveCb)) {
    return
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);

  var explicitLeaveDuration = toNumber(
    isObject(duration)
      ? duration.leave
      : duration
  );

  if (isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }
    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }
      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }
    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave () {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return
    }
    // record leaving element
    if (!vnode.data.show && el.parentNode) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
    }
    beforeLeave && beforeLeave(el);
    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);
        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);
          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }
    leave && leave(el, cb);
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
}

// only used in dev mode
function checkDuration (val, name, vnode) {
  if (typeof val !== 'number') {
    warn(
      "<transition> explicit " + name + " duration is not a valid number - " +
      "got " + (JSON.stringify(val)) + ".",
      vnode.context
    );
  } else if (isNaN(val)) {
    warn(
      "<transition> explicit " + name + " duration is NaN - " +
      'the duration expression might be incorrect.',
      vnode.context
    );
  }
}

function isValidDuration (val) {
  return typeof val === 'number' && !isNaN(val)
}

/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */
function getHookArgumentsLength (fn) {
  if (isUndef(fn)) {
    return false
  }
  var invokerFns = fn.fns;
  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(
      Array.isArray(invokerFns)
        ? invokerFns[0]
        : invokerFns
    )
  } else {
    return (fn._length || fn.length) > 1
  }
}

function _enter (_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1 (vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};

var platformModules = [
  attrs,
  klass,
  events,
  domProps,
  style,
  transition
];

/*  */

// the directive module should be applied last, after all
// built-in modules have been applied.
var modules = platformModules.concat(baseModules);

var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */
if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;
    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var directive = {
  inserted: function inserted (el, binding, vnode, oldVnode) {
    if (vnode.tag === 'select') {
      // #6903
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }
      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;
      if (!binding.modifiers.lazy) {
        el.addEventListener('compositionstart', onCompositionStart);
        el.addEventListener('compositionend', onCompositionEnd);
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        el.addEventListener('change', onCompositionEnd);
        /* istanbul ignore if */
        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },

  componentUpdated: function componentUpdated (el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context);
      // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.
      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);
      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple
          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })
          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected (el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */
  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected (el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;
  if (isMultiple && !Array.isArray(value)) {
    warn(
      "<select multiple v-model=\"" + (binding.expression) + "\"> " +
      "expects an Array value for its binding, but got " + (Object.prototype.toString.call(value).slice(8, -1)),
      vm
    );
    return
  }
  var selected, option;
  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];
    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;
      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }
        return
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption (value, options) {
  return options.every(function (o) { return !looseEqual(o, value); })
}

function getValue (option) {
  return '_value' in option
    ? option._value
    : option.value
}

function onCompositionStart (e) {
  e.target.composing = true;
}

function onCompositionEnd (e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) { return }
  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger (el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}

/*  */

// recursively search for possible transition defined inside the component root
function locateNode (vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
    ? locateNode(vnode.componentInstance._vnode)
    : vnode
}

var show = {
  bind: function bind (el, ref, vnode) {
    var value = ref.value;

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay =
      el.style.display === 'none' ? '' : el.style.display;
    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },

  update: function update (el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;

    /* istanbul ignore if */
    if (!value === !oldValue) { return }
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    if (transition$$1) {
      vnode.data.show = true;
      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },

  unbind: function unbind (
    el,
    binding,
    vnode,
    oldVnode,
    isDestroy
  ) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};

var platformDirectives = {
  model: directive,
  show: show
};

/*  */

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
};

// in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered
function getRealChild (vnode) {
  var compOptions = vnode && vnode.componentOptions;
  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children))
  } else {
    return vnode
  }
}

function extractTransitionData (comp) {
  var data = {};
  var options = comp.$options;
  // props
  for (var key in options.propsData) {
    data[key] = comp[key];
  }
  // events.
  // extract listeners and pass them directly to the transition methods
  var listeners = options._parentListeners;
  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }
  return data
}

function placeholder (h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    })
  }
}

function hasParentTransition (vnode) {
  while ((vnode = vnode.parent)) {
    if (vnode.data.transition) {
      return true
    }
  }
}

function isSameChild (child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag
}

var isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };

var isVShowDirective = function (d) { return d.name === 'show'; };

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,

  render: function render (h) {
    var this$1 = this;

    var children = this.$slots.default;
    if (!children) {
      return
    }

    // filter out text nodes (possible whitespaces)
    children = children.filter(isNotTextNode);
    /* istanbul ignore if */
    if (!children.length) {
      return
    }

    // warn multiple elements
    if (children.length > 1) {
      warn(
        '<transition> can only be used on a single element. Use ' +
        '<transition-group> for lists.',
        this.$parent
      );
    }

    var mode = this.mode;

    // warn invalid mode
    if (mode && mode !== 'in-out' && mode !== 'out-in'
    ) {
      warn(
        'invalid <transition> mode: ' + mode,
        this.$parent
      );
    }

    var rawChild = children[0];

    // if this is a component root node and the component's
    // parent container node also has transition, skip.
    if (hasParentTransition(this.$vnode)) {
      return rawChild
    }

    // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive
    var child = getRealChild(rawChild);
    /* istanbul ignore if */
    if (!child) {
      return rawChild
    }

    if (this._leaving) {
      return placeholder(h, rawChild)
    }

    // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.
    var id = "__transition-" + (this._uid) + "-";
    child.key = child.key == null
      ? child.isComment
        ? id + 'comment'
        : id + child.tag
      : isPrimitive(child.key)
        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
        : child.key;

    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild);

    // mark v-show
    // so that the transition module can hand over the control to the directive
    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }

    if (
      oldChild &&
      oldChild.data &&
      !isSameChild(child, oldChild) &&
      !isAsyncPlaceholder(oldChild) &&
      // #6687 component root is a comment node
      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)
    ) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data);
      // handle transition mode
      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild)
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild
        }
        var delayedLeave;
        var performLeave = function () { delayedLeave(); };
        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });
      }
    }

    return rawChild
  }
};

/*  */

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);

delete props.mode;

var TransitionGroup = {
  props: props,

  beforeMount: function beforeMount () {
    var this$1 = this;

    var update = this._update;
    this._update = function (vnode, hydrating) {
      var restoreActiveInstance = setActiveInstance(this$1);
      // force removing pass
      this$1.__patch__(
        this$1._vnode,
        this$1.kept,
        false, // hydrating
        true // removeOnly (!important, avoids unnecessary moves)
      );
      this$1._vnode = this$1.kept;
      restoreActiveInstance();
      update.call(this$1, vnode, hydrating);
    };
  },

  render: function render (h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];
      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c
          ;(c.data || (c.data = {})).transition = transitionData;
        } else {
          var opts = c.componentOptions;
          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;
          warn(("<transition-group> children must be keyed: <" + name + ">"));
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];
      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();
        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }
      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children)
  },

  updated: function updated () {
    var children = this.prevChildren;
    var moveClass = this.moveClass || ((this.name || 'v') + '-move');
    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return
    }

    // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.
    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation);

    // force reflow to put everything in position
    // assign to this to avoid being removed in tree-shaking
    // $flow-disable-line
    this._reflow = document.body.offsetHeight;

    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
          if (e && e.target !== el) {
            return
          }
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },

  methods: {
    hasMove: function hasMove (el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false
      }
      /* istanbul ignore if */
      if (this._hasMove) {
        return this._hasMove
      }
      // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.
      var clone = el.cloneNode();
      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });
      }
      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return (this._hasMove = info.hasTransform)
    }
  }
};

function callPendingCbs (c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */
  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition (c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation (c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;
  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};

/*  */

// install platform specific utils
Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement;

// install platform runtime directives & components
extend(Vue.options.directives, platformDirectives);
extend(Vue.options.components, platformComponents);

// install platform patch function
Vue.prototype.__patch__ = inBrowser ? patch : noop;

// public mount method
Vue.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating)
};

// devtools global hook
/* istanbul ignore next */
if (inBrowser) {
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue);
      } else {
        console[console.info ? 'info' : 'log'](
          'Download the Vue Devtools extension for a better development experience:\n' +
          'https://github.com/vuejs/vue-devtools'
        );
      }
    }
    if (config.productionTip !== false &&
      typeof console !== 'undefined'
    ) {
      console[console.info ? 'info' : 'log'](
        "You are running Vue in development mode.\n" +
        "Make sure to turn on production mode when deploying for production.\n" +
        "See more tips at https://vuejs.org/guide/deployment.html"
      );
    }
  }, 0);
}

/*  */

var defaultTagRE = /\{\{((?:.|\r?\n)+?)\}\}/g;
var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;

var buildRegex = cached(function (delimiters) {
  var open = delimiters[0].replace(regexEscapeRE, '\\$&');
  var close = delimiters[1].replace(regexEscapeRE, '\\$&');
  return new RegExp(open + '((?:.|\\n)+?)' + close, 'g')
});



function parseText (
  text,
  delimiters
) {
  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;
  if (!tagRE.test(text)) {
    return
  }
  var tokens = [];
  var rawTokens = [];
  var lastIndex = tagRE.lastIndex = 0;
  var match, index, tokenValue;
  while ((match = tagRE.exec(text))) {
    index = match.index;
    // push text token
    if (index > lastIndex) {
      rawTokens.push(tokenValue = text.slice(lastIndex, index));
      tokens.push(JSON.stringify(tokenValue));
    }
    // tag token
    var exp = parseFilters(match[1].trim());
    tokens.push(("_s(" + exp + ")"));
    rawTokens.push({ '@binding': exp });
    lastIndex = index + match[0].length;
  }
  if (lastIndex < text.length) {
    rawTokens.push(tokenValue = text.slice(lastIndex));
    tokens.push(JSON.stringify(tokenValue));
  }
  return {
    expression: tokens.join('+'),
    tokens: rawTokens
  }
}

/*  */

function transformNode (el, options) {
  var warn = options.warn || baseWarn;
  var staticClass = getAndRemoveAttr(el, 'class');
  if (staticClass) {
    var res = parseText(staticClass, options.delimiters);
    if (res) {
      warn(
        "class=\"" + staticClass + "\": " +
        'Interpolation inside attributes has been removed. ' +
        'Use v-bind or the colon shorthand instead. For example, ' +
        'instead of <div class="{{ val }}">, use <div :class="val">.',
        el.rawAttrsMap['class']
      );
    }
  }
  if (staticClass) {
    el.staticClass = JSON.stringify(staticClass);
  }
  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);
  if (classBinding) {
    el.classBinding = classBinding;
  }
}

function genData (el) {
  var data = '';
  if (el.staticClass) {
    data += "staticClass:" + (el.staticClass) + ",";
  }
  if (el.classBinding) {
    data += "class:" + (el.classBinding) + ",";
  }
  return data
}

var klass$1 = {
  staticKeys: ['staticClass'],
  transformNode: transformNode,
  genData: genData
};

/*  */

function transformNode$1 (el, options) {
  var warn = options.warn || baseWarn;
  var staticStyle = getAndRemoveAttr(el, 'style');
  if (staticStyle) {
    /* istanbul ignore if */
    {
      var res = parseText(staticStyle, options.delimiters);
      if (res) {
        warn(
          "style=\"" + staticStyle + "\": " +
          'Interpolation inside attributes has been removed. ' +
          'Use v-bind or the colon shorthand instead. For example, ' +
          'instead of <div style="{{ val }}">, use <div :style="val">.',
          el.rawAttrsMap['style']
        );
      }
    }
    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
  }

  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);
  if (styleBinding) {
    el.styleBinding = styleBinding;
  }
}

function genData$1 (el) {
  var data = '';
  if (el.staticStyle) {
    data += "staticStyle:" + (el.staticStyle) + ",";
  }
  if (el.styleBinding) {
    data += "style:(" + (el.styleBinding) + "),";
  }
  return data
}

var style$1 = {
  staticKeys: ['staticStyle'],
  transformNode: transformNode$1,
  genData: genData$1
};

/*  */

var decoder;

var he = {
  decode: function decode (html) {
    decoder = decoder || document.createElement('div');
    decoder.innerHTML = html;
    return decoder.textContent
  }
};

/*  */

var isUnaryTag = makeMap(
  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +
  'link,meta,param,source,track,wbr'
);

// Elements that you can, intentionally, leave open
// (and which close themselves)
var canBeLeftOpenTag = makeMap(
  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'
);

// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content
var isNonPhrasingTag = makeMap(
  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +
  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +
  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +
  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +
  'title,tr,track'
);

/**
 * Not type-checking this file because it's mostly vendor code.
 */

// Regular Expressions for parsing tags and attributes
var attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var dynamicArgAttribute = /^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var ncname = "[a-zA-Z_][\\-\\.0-9_a-zA-Z" + (unicodeRegExp.source) + "]*";
var qnameCapture = "((?:" + ncname + "\\:)?" + ncname + ")";
var startTagOpen = new RegExp(("^<" + qnameCapture));
var startTagClose = /^\s*(\/?)>/;
var endTag = new RegExp(("^<\\/" + qnameCapture + "[^>]*>"));
var doctype = /^<!DOCTYPE [^>]+>/i;
// #7298: escape - to avoid being passed as HTML comment when inlined in page
var comment = /^<!\--/;
var conditionalComment = /^<!\[/;

// Special Elements (can contain anything)
var isPlainTextElement = makeMap('script,style,textarea', true);
var reCache = {};

var decodingMap = {
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&amp;': '&',
  '&#10;': '\n',
  '&#9;': '\t',
  '&#39;': "'"
};
var encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;
var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g;

// #5992
var isIgnoreNewlineTag = makeMap('pre,textarea', true);
var shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\n'; };

function decodeAttr (value, shouldDecodeNewlines) {
  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
  return value.replace(re, function (match) { return decodingMap[match]; })
}

function parseHTML (html, options) {
  var stack = [];
  var expectHTML = options.expectHTML;
  var isUnaryTag$$1 = options.isUnaryTag || no;
  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;
  var index = 0;
  var last, lastTag;
  while (html) {
    last = html;
    // Make sure we're not in a plaintext content element like script/style
    if (!lastTag || !isPlainTextElement(lastTag)) {
      var textEnd = html.indexOf('<');
      if (textEnd === 0) {
        // Comment:
        if (comment.test(html)) {
          var commentEnd = html.indexOf('-->');

          if (commentEnd >= 0) {
            if (options.shouldKeepComment) {
              options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3);
            }
            advance(commentEnd + 3);
            continue
          }
        }

        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment
        if (conditionalComment.test(html)) {
          var conditionalEnd = html.indexOf(']>');

          if (conditionalEnd >= 0) {
            advance(conditionalEnd + 2);
            continue
          }
        }

        // Doctype:
        var doctypeMatch = html.match(doctype);
        if (doctypeMatch) {
          advance(doctypeMatch[0].length);
          continue
        }

        // End tag:
        var endTagMatch = html.match(endTag);
        if (endTagMatch) {
          var curIndex = index;
          advance(endTagMatch[0].length);
          parseEndTag(endTagMatch[1], curIndex, index);
          continue
        }

        // Start tag:
        var startTagMatch = parseStartTag();
        if (startTagMatch) {
          handleStartTag(startTagMatch);
          if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {
            advance(1);
          }
          continue
        }
      }

      var text = (void 0), rest = (void 0), next = (void 0);
      if (textEnd >= 0) {
        rest = html.slice(textEnd);
        while (
          !endTag.test(rest) &&
          !startTagOpen.test(rest) &&
          !comment.test(rest) &&
          !conditionalComment.test(rest)
        ) {
          // < in plain text, be forgiving and treat it as text
          next = rest.indexOf('<', 1);
          if (next < 0) { break }
          textEnd += next;
          rest = html.slice(textEnd);
        }
        text = html.substring(0, textEnd);
      }

      if (textEnd < 0) {
        text = html;
      }

      if (text) {
        advance(text.length);
      }

      if (options.chars && text) {
        options.chars(text, index - text.length, index);
      }
    } else {
      var endTagLength = 0;
      var stackedTag = lastTag.toLowerCase();
      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {
        endTagLength = endTag.length;
        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
          text = text
            .replace(/<!\--([\s\S]*?)-->/g, '$1') // #7298
            .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
        }
        if (shouldIgnoreFirstNewline(stackedTag, text)) {
          text = text.slice(1);
        }
        if (options.chars) {
          options.chars(text);
        }
        return ''
      });
      index += html.length - rest$1.length;
      html = rest$1;
      parseEndTag(stackedTag, index - endTagLength, index);
    }

    if (html === last) {
      options.chars && options.chars(html);
      if (!stack.length && options.warn) {
        options.warn(("Mal-formatted tag at end of template: \"" + html + "\""), { start: index + html.length });
      }
      break
    }
  }

  // Clean up any remaining tags
  parseEndTag();

  function advance (n) {
    index += n;
    html = html.substring(n);
  }

  function parseStartTag () {
    var start = html.match(startTagOpen);
    if (start) {
      var match = {
        tagName: start[1],
        attrs: [],
        start: index
      };
      advance(start[0].length);
      var end, attr;
      while (!(end = html.match(startTagClose)) && (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {
        attr.start = index;
        advance(attr[0].length);
        attr.end = index;
        match.attrs.push(attr);
      }
      if (end) {
        match.unarySlash = end[1];
        advance(end[0].length);
        match.end = index;
        return match
      }
    }
  }

  function handleStartTag (match) {
    var tagName = match.tagName;
    var unarySlash = match.unarySlash;

    if (expectHTML) {
      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
        parseEndTag(lastTag);
      }
      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {
        parseEndTag(tagName);
      }
    }

    var unary = isUnaryTag$$1(tagName) || !!unarySlash;

    var l = match.attrs.length;
    var attrs = new Array(l);
    for (var i = 0; i < l; i++) {
      var args = match.attrs[i];
      var value = args[3] || args[4] || args[5] || '';
      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'
        ? options.shouldDecodeNewlinesForHref
        : options.shouldDecodeNewlines;
      attrs[i] = {
        name: args[1],
        value: decodeAttr(value, shouldDecodeNewlines)
      };
      if (options.outputSourceRange) {
        attrs[i].start = args.start + args[0].match(/^\s*/).length;
        attrs[i].end = args.end;
      }
    }

    if (!unary) {
      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs, start: match.start, end: match.end });
      lastTag = tagName;
    }

    if (options.start) {
      options.start(tagName, attrs, unary, match.start, match.end);
    }
  }

  function parseEndTag (tagName, start, end) {
    var pos, lowerCasedTagName;
    if (start == null) { start = index; }
    if (end == null) { end = index; }

    // Find the closest opened tag of the same type
    if (tagName) {
      lowerCasedTagName = tagName.toLowerCase();
      for (pos = stack.length - 1; pos >= 0; pos--) {
        if (stack[pos].lowerCasedTag === lowerCasedTagName) {
          break
        }
      }
    } else {
      // If no tag name is provided, clean shop
      pos = 0;
    }

    if (pos >= 0) {
      // Close all the open elements, up the stack
      for (var i = stack.length - 1; i >= pos; i--) {
        if (i > pos || !tagName &&
          options.warn
        ) {
          options.warn(
            ("tag <" + (stack[i].tag) + "> has no matching end tag."),
            { start: stack[i].start, end: stack[i].end }
          );
        }
        if (options.end) {
          options.end(stack[i].tag, start, end);
        }
      }

      // Remove the open elements from the stack
      stack.length = pos;
      lastTag = pos && stack[pos - 1].tag;
    } else if (lowerCasedTagName === 'br') {
      if (options.start) {
        options.start(tagName, [], true, start, end);
      }
    } else if (lowerCasedTagName === 'p') {
      if (options.start) {
        options.start(tagName, [], false, start, end);
      }
      if (options.end) {
        options.end(tagName, start, end);
      }
    }
  }
}

/*  */

var onRE = /^@|^v-on:/;
var dirRE = /^v-|^@|^:|^#/;
var forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
var forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
var stripParensRE = /^\(|\)$/g;
var dynamicArgRE = /^\[.*\]$/;

var argRE = /:(.*)$/;
var bindRE = /^:|^\.|^v-bind:/;
var modifierRE = /\.[^.\]]+(?=[^\]]*$)/g;

var slotRE = /^v-slot(:|$)|^#/;

var lineBreakRE = /[\r\n]/;
var whitespaceRE$1 = /\s+/g;

var invalidAttributeRE = /[\s"'<>\/=]/;

var decodeHTMLCached = cached(he.decode);

var emptySlotScopeToken = "_empty_";

// configurable state
var warn$2;
var delimiters;
var transforms;
var preTransforms;
var postTransforms;
var platformIsPreTag;
var platformMustUseProp;
var platformGetTagNamespace;
var maybeComponent;

function createASTElement (
  tag,
  attrs,
  parent
) {
  return {
    type: 1,
    tag: tag,
    attrsList: attrs,
    attrsMap: makeAttrsMap(attrs),
    rawAttrsMap: {},
    parent: parent,
    children: []
  }
}

/**
 * Convert HTML string to AST.
 */
function parse (
  template,
  options
) {
  warn$2 = options.warn || baseWarn;

  platformIsPreTag = options.isPreTag || no;
  platformMustUseProp = options.mustUseProp || no;
  platformGetTagNamespace = options.getTagNamespace || no;
  var isReservedTag = options.isReservedTag || no;
  maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };

  transforms = pluckModuleFunction(options.modules, 'transformNode');
  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');

  delimiters = options.delimiters;

  var stack = [];
  var preserveWhitespace = options.preserveWhitespace !== false;
  var whitespaceOption = options.whitespace;
  var root;
  var currentParent;
  var inVPre = false;
  var inPre = false;
  var warned = false;

  function warnOnce (msg, range) {
    if (!warned) {
      warned = true;
      warn$2(msg, range);
    }
  }

  function closeElement (element) {
    trimEndingWhitespace(element);
    if (!inVPre && !element.processed) {
      element = processElement(element, options);
    }
    // tree management
    if (!stack.length && element !== root) {
      // allow root elements with v-if, v-else-if and v-else
      if (root.if && (element.elseif || element.else)) {
        {
          checkRootConstraints(element);
        }
        addIfCondition(root, {
          exp: element.elseif,
          block: element
        });
      } else {
        warnOnce(
          "Component template should contain exactly one root element. " +
          "If you are using v-if on multiple elements, " +
          "use v-else-if to chain them instead.",
          { start: element.start }
        );
      }
    }
    if (currentParent && !element.forbidden) {
      if (element.elseif || element.else) {
        processIfConditions(element, currentParent);
      } else {
        if (element.slotScope) {
          // scoped slot
          // keep it in the children list so that v-else(-if) conditions can
          // find it as the prev node.
          var name = element.slotTarget || '"default"'
          ;(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
        }
        currentParent.children.push(element);
        element.parent = currentParent;
      }
    }

    // final children cleanup
    // filter out scoped slots
    element.children = element.children.filter(function (c) { return !(c).slotScope; });
    // remove trailing whitespace node again
    trimEndingWhitespace(element);

    // check pre state
    if (element.pre) {
      inVPre = false;
    }
    if (platformIsPreTag(element.tag)) {
      inPre = false;
    }
    // apply post-transforms
    for (var i = 0; i < postTransforms.length; i++) {
      postTransforms[i](element, options);
    }
  }

  function trimEndingWhitespace (el) {
    // remove trailing whitespace node
    if (!inPre) {
      var lastNode;
      while (
        (lastNode = el.children[el.children.length - 1]) &&
        lastNode.type === 3 &&
        lastNode.text === ' '
      ) {
        el.children.pop();
      }
    }
  }

  function checkRootConstraints (el) {
    if (el.tag === 'slot' || el.tag === 'template') {
      warnOnce(
        "Cannot use <" + (el.tag) + "> as component root element because it may " +
        'contain multiple nodes.',
        { start: el.start }
      );
    }
    if (el.attrsMap.hasOwnProperty('v-for')) {
      warnOnce(
        'Cannot use v-for on stateful component root element because ' +
        'it renders multiple elements.',
        el.rawAttrsMap['v-for']
      );
    }
  }

  parseHTML(template, {
    warn: warn$2,
    expectHTML: options.expectHTML,
    isUnaryTag: options.isUnaryTag,
    canBeLeftOpenTag: options.canBeLeftOpenTag,
    shouldDecodeNewlines: options.shouldDecodeNewlines,
    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,
    shouldKeepComment: options.comments,
    outputSourceRange: options.outputSourceRange,
    start: function start (tag, attrs, unary, start$1, end) {
      // check namespace.
      // inherit parent ns if there is one
      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);

      // handle IE svg bug
      /* istanbul ignore if */
      if (isIE && ns === 'svg') {
        attrs = guardIESVGBug(attrs);
      }

      var element = createASTElement(tag, attrs, currentParent);
      if (ns) {
        element.ns = ns;
      }

      {
        if (options.outputSourceRange) {
          element.start = start$1;
          element.end = end;
          element.rawAttrsMap = element.attrsList.reduce(function (cumulated, attr) {
            cumulated[attr.name] = attr;
            return cumulated
          }, {});
        }
        attrs.forEach(function (attr) {
          if (invalidAttributeRE.test(attr.name)) {
            warn$2(
              "Invalid dynamic argument expression: attribute names cannot contain " +
              "spaces, quotes, <, >, / or =.",
              {
                start: attr.start + attr.name.indexOf("["),
                end: attr.start + attr.name.length
              }
            );
          }
        });
      }

      if (isForbiddenTag(element) && !isServerRendering()) {
        element.forbidden = true;
        warn$2(
          'Templates should only be responsible for mapping the state to the ' +
          'UI. Avoid placing tags with side-effects in your templates, such as ' +
          "<" + tag + ">" + ', as they will not be parsed.',
          { start: element.start }
        );
      }

      // apply pre-transforms
      for (var i = 0; i < preTransforms.length; i++) {
        element = preTransforms[i](element, options) || element;
      }

      if (!inVPre) {
        processPre(element);
        if (element.pre) {
          inVPre = true;
        }
      }
      if (platformIsPreTag(element.tag)) {
        inPre = true;
      }
      if (inVPre) {
        processRawAttrs(element);
      } else if (!element.processed) {
        // structural directives
        processFor(element);
        processIf(element);
        processOnce(element);
      }

      if (!root) {
        root = element;
        {
          checkRootConstraints(root);
        }
      }

      if (!unary) {
        currentParent = element;
        stack.push(element);
      } else {
        closeElement(element);
      }
    },

    end: function end (tag, start, end$1) {
      var element = stack[stack.length - 1];
      // pop stack
      stack.length -= 1;
      currentParent = stack[stack.length - 1];
      if (options.outputSourceRange) {
        element.end = end$1;
      }
      closeElement(element);
    },

    chars: function chars (text, start, end) {
      if (!currentParent) {
        {
          if (text === template) {
            warnOnce(
              'Component template requires a root element, rather than just text.',
              { start: start }
            );
          } else if ((text = text.trim())) {
            warnOnce(
              ("text \"" + text + "\" outside root element will be ignored."),
              { start: start }
            );
          }
        }
        return
      }
      // IE textarea placeholder bug
      /* istanbul ignore if */
      if (isIE &&
        currentParent.tag === 'textarea' &&
        currentParent.attrsMap.placeholder === text
      ) {
        return
      }
      var children = currentParent.children;
      if (inPre || text.trim()) {
        text = isTextTag(currentParent) ? text : decodeHTMLCached(text);
      } else if (!children.length) {
        // remove the whitespace-only node right after an opening tag
        text = '';
      } else if (whitespaceOption) {
        if (whitespaceOption === 'condense') {
          // in condense mode, remove the whitespace node if it contains
          // line break, otherwise condense to a single space
          text = lineBreakRE.test(text) ? '' : ' ';
        } else {
          text = ' ';
        }
      } else {
        text = preserveWhitespace ? ' ' : '';
      }
      if (text) {
        if (!inPre && whitespaceOption === 'condense') {
          // condense consecutive whitespaces into single space
          text = text.replace(whitespaceRE$1, ' ');
        }
        var res;
        var child;
        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {
          child = {
            type: 2,
            expression: res.expression,
            tokens: res.tokens,
            text: text
          };
        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
          child = {
            type: 3,
            text: text
          };
        }
        if (child) {
          if (options.outputSourceRange) {
            child.start = start;
            child.end = end;
          }
          children.push(child);
        }
      }
    },
    comment: function comment (text, start, end) {
      // adding anything as a sibling to the root node is forbidden
      // comments should still be allowed, but ignored
      if (currentParent) {
        var child = {
          type: 3,
          text: text,
          isComment: true
        };
        if (options.outputSourceRange) {
          child.start = start;
          child.end = end;
        }
        currentParent.children.push(child);
      }
    }
  });
  return root
}

function processPre (el) {
  if (getAndRemoveAttr(el, 'v-pre') != null) {
    el.pre = true;
  }
}

function processRawAttrs (el) {
  var list = el.attrsList;
  var len = list.length;
  if (len) {
    var attrs = el.attrs = new Array(len);
    for (var i = 0; i < len; i++) {
      attrs[i] = {
        name: list[i].name,
        value: JSON.stringify(list[i].value)
      };
      if (list[i].start != null) {
        attrs[i].start = list[i].start;
        attrs[i].end = list[i].end;
      }
    }
  } else if (!el.pre) {
    // non root node in pre blocks with no attributes
    el.plain = true;
  }
}

function processElement (
  element,
  options
) {
  processKey(element);

  // determine whether this is a plain element after
  // removing structural attributes
  element.plain = (
    !element.key &&
    !element.scopedSlots &&
    !element.attrsList.length
  );

  processRef(element);
  processSlotContent(element);
  processSlotOutlet(element);
  processComponent(element);
  for (var i = 0; i < transforms.length; i++) {
    element = transforms[i](element, options) || element;
  }
  processAttrs(element);
  return element
}

function processKey (el) {
  var exp = getBindingAttr(el, 'key');
  if (exp) {
    {
      if (el.tag === 'template') {
        warn$2(
          "<template> cannot be keyed. Place the key on real elements instead.",
          getRawBindingAttr(el, 'key')
        );
      }
      if (el.for) {
        var iterator = el.iterator2 || el.iterator1;
        var parent = el.parent;
        if (iterator && iterator === exp && parent && parent.tag === 'transition-group') {
          warn$2(
            "Do not use v-for index as key on <transition-group> children, " +
            "this is the same as not using keys.",
            getRawBindingAttr(el, 'key'),
            true /* tip */
          );
        }
      }
    }
    el.key = exp;
  }
}

function processRef (el) {
  var ref = getBindingAttr(el, 'ref');
  if (ref) {
    el.ref = ref;
    el.refInFor = checkInFor(el);
  }
}

function processFor (el) {
  var exp;
  if ((exp = getAndRemoveAttr(el, 'v-for'))) {
    var res = parseFor(exp);
    if (res) {
      extend(el, res);
    } else {
      warn$2(
        ("Invalid v-for expression: " + exp),
        el.rawAttrsMap['v-for']
      );
    }
  }
}



function parseFor (exp) {
  var inMatch = exp.match(forAliasRE);
  if (!inMatch) { return }
  var res = {};
  res.for = inMatch[2].trim();
  var alias = inMatch[1].trim().replace(stripParensRE, '');
  var iteratorMatch = alias.match(forIteratorRE);
  if (iteratorMatch) {
    res.alias = alias.replace(forIteratorRE, '').trim();
    res.iterator1 = iteratorMatch[1].trim();
    if (iteratorMatch[2]) {
      res.iterator2 = iteratorMatch[2].trim();
    }
  } else {
    res.alias = alias;
  }
  return res
}

function processIf (el) {
  var exp = getAndRemoveAttr(el, 'v-if');
  if (exp) {
    el.if = exp;
    addIfCondition(el, {
      exp: exp,
      block: el
    });
  } else {
    if (getAndRemoveAttr(el, 'v-else') != null) {
      el.else = true;
    }
    var elseif = getAndRemoveAttr(el, 'v-else-if');
    if (elseif) {
      el.elseif = elseif;
    }
  }
}

function processIfConditions (el, parent) {
  var prev = findPrevElement(parent.children);
  if (prev && prev.if) {
    addIfCondition(prev, {
      exp: el.elseif,
      block: el
    });
  } else {
    warn$2(
      "v-" + (el.elseif ? ('else-if="' + el.elseif + '"') : 'else') + " " +
      "used on element <" + (el.tag) + "> without corresponding v-if.",
      el.rawAttrsMap[el.elseif ? 'v-else-if' : 'v-else']
    );
  }
}

function findPrevElement (children) {
  var i = children.length;
  while (i--) {
    if (children[i].type === 1) {
      return children[i]
    } else {
      if (children[i].text !== ' ') {
        warn$2(
          "text \"" + (children[i].text.trim()) + "\" between v-if and v-else(-if) " +
          "will be ignored.",
          children[i]
        );
      }
      children.pop();
    }
  }
}

function addIfCondition (el, condition) {
  if (!el.ifConditions) {
    el.ifConditions = [];
  }
  el.ifConditions.push(condition);
}

function processOnce (el) {
  var once$$1 = getAndRemoveAttr(el, 'v-once');
  if (once$$1 != null) {
    el.once = true;
  }
}

// handle content being passed to a component as slot,
// e.g. <template slot="xxx">, <div slot-scope="xxx">
function processSlotContent (el) {
  var slotScope;
  if (el.tag === 'template') {
    slotScope = getAndRemoveAttr(el, 'scope');
    /* istanbul ignore if */
    if (slotScope) {
      warn$2(
        "the \"scope\" attribute for scoped slots have been deprecated and " +
        "replaced by \"slot-scope\" since 2.5. The new \"slot-scope\" attribute " +
        "can also be used on plain elements in addition to <template> to " +
        "denote scoped slots.",
        el.rawAttrsMap['scope'],
        true
      );
    }
    el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');
  } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {
    /* istanbul ignore if */
    if (el.attrsMap['v-for']) {
      warn$2(
        "Ambiguous combined usage of slot-scope and v-for on <" + (el.tag) + "> " +
        "(v-for takes higher priority). Use a wrapper <template> for the " +
        "scoped slot to make it clearer.",
        el.rawAttrsMap['slot-scope'],
        true
      );
    }
    el.slotScope = slotScope;
  }

  // slot="xxx"
  var slotTarget = getBindingAttr(el, 'slot');
  if (slotTarget) {
    el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
    el.slotTargetDynamic = !!(el.attrsMap[':slot'] || el.attrsMap['v-bind:slot']);
    // preserve slot as an attribute for native shadow DOM compat
    // only for non-scoped slots.
    if (el.tag !== 'template' && !el.slotScope) {
      addAttr(el, 'slot', slotTarget, getRawBindingAttr(el, 'slot'));
    }
  }

  // 2.6 v-slot syntax
  {
    if (el.tag === 'template') {
      // v-slot on <template>
      var slotBinding = getAndRemoveAttrByRegex(el, slotRE);
      if (slotBinding) {
        {
          if (el.slotTarget || el.slotScope) {
            warn$2(
              "Unexpected mixed usage of different slot syntaxes.",
              el
            );
          }
          if (el.parent && !maybeComponent(el.parent)) {
            warn$2(
              "<template v-slot> can only appear at the root level inside " +
              "the receiving component",
              el
            );
          }
        }
        var ref = getSlotName(slotBinding);
        var name = ref.name;
        var dynamic = ref.dynamic;
        el.slotTarget = name;
        el.slotTargetDynamic = dynamic;
        el.slotScope = slotBinding.value || emptySlotScopeToken; // force it into a scoped slot for perf
      }
    } else {
      // v-slot on component, denotes default slot
      var slotBinding$1 = getAndRemoveAttrByRegex(el, slotRE);
      if (slotBinding$1) {
        {
          if (!maybeComponent(el)) {
            warn$2(
              "v-slot can only be used on components or <template>.",
              slotBinding$1
            );
          }
          if (el.slotScope || el.slotTarget) {
            warn$2(
              "Unexpected mixed usage of different slot syntaxes.",
              el
            );
          }
          if (el.scopedSlots) {
            warn$2(
              "To avoid scope ambiguity, the default slot should also use " +
              "<template> syntax when there are other named slots.",
              slotBinding$1
            );
          }
        }
        // add the component's children to its default slot
        var slots = el.scopedSlots || (el.scopedSlots = {});
        var ref$1 = getSlotName(slotBinding$1);
        var name$1 = ref$1.name;
        var dynamic$1 = ref$1.dynamic;
        var slotContainer = slots[name$1] = createASTElement('template', [], el);
        slotContainer.slotTarget = name$1;
        slotContainer.slotTargetDynamic = dynamic$1;
        slotContainer.children = el.children.filter(function (c) {
          if (!c.slotScope) {
            c.parent = slotContainer;
            return true
          }
        });
        slotContainer.slotScope = slotBinding$1.value || emptySlotScopeToken;
        // remove children as they are returned from scopedSlots now
        el.children = [];
        // mark el non-plain so data gets generated
        el.plain = false;
      }
    }
  }
}

function getSlotName (binding) {
  var name = binding.name.replace(slotRE, '');
  if (!name) {
    if (binding.name[0] !== '#') {
      name = 'default';
    } else {
      warn$2(
        "v-slot shorthand syntax requires a slot name.",
        binding
      );
    }
  }
  return dynamicArgRE.test(name)
    // dynamic [name]
    ? { name: name.slice(1, -1), dynamic: true }
    // static name
    : { name: ("\"" + name + "\""), dynamic: false }
}

// handle <slot/> outlets
function processSlotOutlet (el) {
  if (el.tag === 'slot') {
    el.slotName = getBindingAttr(el, 'name');
    if (el.key) {
      warn$2(
        "`key` does not work on <slot> because slots are abstract outlets " +
        "and can possibly expand into multiple elements. " +
        "Use the key on a wrapping element instead.",
        getRawBindingAttr(el, 'key')
      );
    }
  }
}

function processComponent (el) {
  var binding;
  if ((binding = getBindingAttr(el, 'is'))) {
    el.component = binding;
  }
  if (getAndRemoveAttr(el, 'inline-template') != null) {
    el.inlineTemplate = true;
  }
}

function processAttrs (el) {
  var list = el.attrsList;
  var i, l, name, rawName, value, modifiers, syncGen, isDynamic;
  for (i = 0, l = list.length; i < l; i++) {
    name = rawName = list[i].name;
    value = list[i].value;
    if (dirRE.test(name)) {
      // mark element as dynamic
      el.hasBindings = true;
      // modifiers
      modifiers = parseModifiers(name.replace(dirRE, ''));
      // support .foo shorthand syntax for the .prop modifier
      if (modifiers) {
        name = name.replace(modifierRE, '');
      }
      if (bindRE.test(name)) { // v-bind
        name = name.replace(bindRE, '');
        value = parseFilters(value);
        isDynamic = dynamicArgRE.test(name);
        if (isDynamic) {
          name = name.slice(1, -1);
        }
        if (
          value.trim().length === 0
        ) {
          warn$2(
            ("The value for a v-bind expression cannot be empty. Found in \"v-bind:" + name + "\"")
          );
        }
        if (modifiers) {
          if (modifiers.prop && !isDynamic) {
            name = camelize(name);
            if (name === 'innerHtml') { name = 'innerHTML'; }
          }
          if (modifiers.camel && !isDynamic) {
            name = camelize(name);
          }
          if (modifiers.sync) {
            syncGen = genAssignmentCode(value, "$event");
            if (!isDynamic) {
              addHandler(
                el,
                ("update:" + (camelize(name))),
                syncGen,
                null,
                false,
                warn$2,
                list[i]
              );
              if (hyphenate(name) !== camelize(name)) {
                addHandler(
                  el,
                  ("update:" + (hyphenate(name))),
                  syncGen,
                  null,
                  false,
                  warn$2,
                  list[i]
                );
              }
            } else {
              // handler w/ dynamic event name
              addHandler(
                el,
                ("\"update:\"+(" + name + ")"),
                syncGen,
                null,
                false,
                warn$2,
                list[i],
                true // dynamic
              );
            }
          }
        }
        if ((modifiers && modifiers.prop) || (
          !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)
        )) {
          addProp(el, name, value, list[i], isDynamic);
        } else {
          addAttr(el, name, value, list[i], isDynamic);
        }
      } else if (onRE.test(name)) { // v-on
        name = name.replace(onRE, '');
        isDynamic = dynamicArgRE.test(name);
        if (isDynamic) {
          name = name.slice(1, -1);
        }
        addHandler(el, name, value, modifiers, false, warn$2, list[i], isDynamic);
      } else { // normal directives
        name = name.replace(dirRE, '');
        // parse arg
        var argMatch = name.match(argRE);
        var arg = argMatch && argMatch[1];
        isDynamic = false;
        if (arg) {
          name = name.slice(0, -(arg.length + 1));
          if (dynamicArgRE.test(arg)) {
            arg = arg.slice(1, -1);
            isDynamic = true;
          }
        }
        addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);
        if (name === 'model') {
          checkForAliasModel(el, value);
        }
      }
    } else {
      // literal attribute
      {
        var res = parseText(value, delimiters);
        if (res) {
          warn$2(
            name + "=\"" + value + "\": " +
            'Interpolation inside attributes has been removed. ' +
            'Use v-bind or the colon shorthand instead. For example, ' +
            'instead of <div id="{{ val }}">, use <div :id="val">.',
            list[i]
          );
        }
      }
      addAttr(el, name, JSON.stringify(value), list[i]);
      // #6887 firefox doesn't update muted state if set via attribute
      // even immediately after element creation
      if (!el.component &&
          name === 'muted' &&
          platformMustUseProp(el.tag, el.attrsMap.type, name)) {
        addProp(el, name, 'true', list[i]);
      }
    }
  }
}

function checkInFor (el) {
  var parent = el;
  while (parent) {
    if (parent.for !== undefined) {
      return true
    }
    parent = parent.parent;
  }
  return false
}

function parseModifiers (name) {
  var match = name.match(modifierRE);
  if (match) {
    var ret = {};
    match.forEach(function (m) { ret[m.slice(1)] = true; });
    return ret
  }
}

function makeAttrsMap (attrs) {
  var map = {};
  for (var i = 0, l = attrs.length; i < l; i++) {
    if (
      map[attrs[i].name] && !isIE && !isEdge
    ) {
      warn$2('duplicate attribute: ' + attrs[i].name, attrs[i]);
    }
    map[attrs[i].name] = attrs[i].value;
  }
  return map
}

// for script (e.g. type="x/template") or style, do not decode content
function isTextTag (el) {
  return el.tag === 'script' || el.tag === 'style'
}

function isForbiddenTag (el) {
  return (
    el.tag === 'style' ||
    (el.tag === 'script' && (
      !el.attrsMap.type ||
      el.attrsMap.type === 'text/javascript'
    ))
  )
}

var ieNSBug = /^xmlns:NS\d+/;
var ieNSPrefix = /^NS\d+:/;

/* istanbul ignore next */
function guardIESVGBug (attrs) {
  var res = [];
  for (var i = 0; i < attrs.length; i++) {
    var attr = attrs[i];
    if (!ieNSBug.test(attr.name)) {
      attr.name = attr.name.replace(ieNSPrefix, '');
      res.push(attr);
    }
  }
  return res
}

function checkForAliasModel (el, value) {
  var _el = el;
  while (_el) {
    if (_el.for && _el.alias === value) {
      warn$2(
        "<" + (el.tag) + " v-model=\"" + value + "\">: " +
        "You are binding v-model directly to a v-for iteration alias. " +
        "This will not be able to modify the v-for source array because " +
        "writing to the alias is like modifying a function local variable. " +
        "Consider using an array of objects and use v-model on an object property instead.",
        el.rawAttrsMap['v-model']
      );
    }
    _el = _el.parent;
  }
}

/*  */

function preTransformNode (el, options) {
  if (el.tag === 'input') {
    var map = el.attrsMap;
    if (!map['v-model']) {
      return
    }

    var typeBinding;
    if (map[':type'] || map['v-bind:type']) {
      typeBinding = getBindingAttr(el, 'type');
    }
    if (!map.type && !typeBinding && map['v-bind']) {
      typeBinding = "(" + (map['v-bind']) + ").type";
    }

    if (typeBinding) {
      var ifCondition = getAndRemoveAttr(el, 'v-if', true);
      var ifConditionExtra = ifCondition ? ("&&(" + ifCondition + ")") : "";
      var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;
      var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);
      // 1. checkbox
      var branch0 = cloneASTElement(el);
      // process for on the main node
      processFor(branch0);
      addRawAttr(branch0, 'type', 'checkbox');
      processElement(branch0, options);
      branch0.processed = true; // prevent it from double-processed
      branch0.if = "(" + typeBinding + ")==='checkbox'" + ifConditionExtra;
      addIfCondition(branch0, {
        exp: branch0.if,
        block: branch0
      });
      // 2. add radio else-if condition
      var branch1 = cloneASTElement(el);
      getAndRemoveAttr(branch1, 'v-for', true);
      addRawAttr(branch1, 'type', 'radio');
      processElement(branch1, options);
      addIfCondition(branch0, {
        exp: "(" + typeBinding + ")==='radio'" + ifConditionExtra,
        block: branch1
      });
      // 3. other
      var branch2 = cloneASTElement(el);
      getAndRemoveAttr(branch2, 'v-for', true);
      addRawAttr(branch2, ':type', typeBinding);
      processElement(branch2, options);
      addIfCondition(branch0, {
        exp: ifCondition,
        block: branch2
      });

      if (hasElse) {
        branch0.else = true;
      } else if (elseIfCondition) {
        branch0.elseif = elseIfCondition;
      }

      return branch0
    }
  }
}

function cloneASTElement (el) {
  return createASTElement(el.tag, el.attrsList.slice(), el.parent)
}

var model$1 = {
  preTransformNode: preTransformNode
};

var modules$1 = [
  klass$1,
  style$1,
  model$1
];

/*  */

function text (el, dir) {
  if (dir.value) {
    addProp(el, 'textContent', ("_s(" + (dir.value) + ")"), dir);
  }
}

/*  */

function html (el, dir) {
  if (dir.value) {
    addProp(el, 'innerHTML', ("_s(" + (dir.value) + ")"), dir);
  }
}

var directives$1 = {
  model: model,
  text: text,
  html: html
};

/*  */

var baseOptions = {
  expectHTML: true,
  modules: modules$1,
  directives: directives$1,
  isPreTag: isPreTag,
  isUnaryTag: isUnaryTag,
  mustUseProp: mustUseProp,
  canBeLeftOpenTag: canBeLeftOpenTag,
  isReservedTag: isReservedTag,
  getTagNamespace: getTagNamespace,
  staticKeys: genStaticKeys(modules$1)
};

/*  */

var isStaticKey;
var isPlatformReservedTag;

var genStaticKeysCached = cached(genStaticKeys$1);

/**
 * Goal of the optimizer: walk the generated template AST tree
 * and detect sub-trees that are purely static, i.e. parts of
 * the DOM that never needs to change.
 *
 * Once we detect these sub-trees, we can:
 *
 * 1. Hoist them into constants, so that we no longer need to
 *    create fresh nodes for them on each re-render;
 * 2. Completely skip them in the patching process.
 */
function optimize (root, options) {
  if (!root) { return }
  isStaticKey = genStaticKeysCached(options.staticKeys || '');
  isPlatformReservedTag = options.isReservedTag || no;
  // first pass: mark all non-static nodes.
  markStatic$1(root);
  // second pass: mark static roots.
  markStaticRoots(root, false);
}

function genStaticKeys$1 (keys) {
  return makeMap(
    'type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' +
    (keys ? ',' + keys : '')
  )
}

function markStatic$1 (node) {
  node.static = isStatic(node);
  if (node.type === 1) {
    // do not make component slot content static. this avoids
    // 1. components not able to mutate slot nodes
    // 2. static slot content fails for hot-reloading
    if (
      !isPlatformReservedTag(node.tag) &&
      node.tag !== 'slot' &&
      node.attrsMap['inline-template'] == null
    ) {
      return
    }
    for (var i = 0, l = node.children.length; i < l; i++) {
      var child = node.children[i];
      markStatic$1(child);
      if (!child.static) {
        node.static = false;
      }
    }
    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        var block = node.ifConditions[i$1].block;
        markStatic$1(block);
        if (!block.static) {
          node.static = false;
        }
      }
    }
  }
}

function markStaticRoots (node, isInFor) {
  if (node.type === 1) {
    if (node.static || node.once) {
      node.staticInFor = isInFor;
    }
    // For a node to qualify as a static root, it should have children that
    // are not just static text. Otherwise the cost of hoisting out will
    // outweigh the benefits and it's better off to just always render it fresh.
    if (node.static && node.children.length && !(
      node.children.length === 1 &&
      node.children[0].type === 3
    )) {
      node.staticRoot = true;
      return
    } else {
      node.staticRoot = false;
    }
    if (node.children) {
      for (var i = 0, l = node.children.length; i < l; i++) {
        markStaticRoots(node.children[i], isInFor || !!node.for);
      }
    }
    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        markStaticRoots(node.ifConditions[i$1].block, isInFor);
      }
    }
  }
}

function isStatic (node) {
  if (node.type === 2) { // expression
    return false
  }
  if (node.type === 3) { // text
    return true
  }
  return !!(node.pre || (
    !node.hasBindings && // no dynamic bindings
    !node.if && !node.for && // not v-if or v-for or v-else
    !isBuiltInTag(node.tag) && // not a built-in
    isPlatformReservedTag(node.tag) && // not a component
    !isDirectChildOfTemplateFor(node) &&
    Object.keys(node).every(isStaticKey)
  ))
}

function isDirectChildOfTemplateFor (node) {
  while (node.parent) {
    node = node.parent;
    if (node.tag !== 'template') {
      return false
    }
    if (node.for) {
      return true
    }
  }
  return false
}

/*  */

var fnExpRE = /^([\w$_]+|\([^)]*?\))\s*=>|^function(?:\s+[\w$]+)?\s*\(/;
var fnInvokeRE = /\([^)]*?\);*$/;
var simplePathRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/;

// KeyboardEvent.keyCode aliases
var keyCodes = {
  esc: 27,
  tab: 9,
  enter: 13,
  space: 32,
  up: 38,
  left: 37,
  right: 39,
  down: 40,
  'delete': [8, 46]
};

// KeyboardEvent.key aliases
var keyNames = {
  // #7880: IE11 and Edge use `Esc` for Escape key name.
  esc: ['Esc', 'Escape'],
  tab: 'Tab',
  enter: 'Enter',
  // #9112: IE11 uses `Spacebar` for Space key name.
  space: [' ', 'Spacebar'],
  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.
  up: ['Up', 'ArrowUp'],
  left: ['Left', 'ArrowLeft'],
  right: ['Right', 'ArrowRight'],
  down: ['Down', 'ArrowDown'],
  // #9112: IE11 uses `Del` for Delete key name.
  'delete': ['Backspace', 'Delete', 'Del']
};

// #4868: modifiers that prevent the execution of the listener
// need to explicitly return null so that we can determine whether to remove
// the listener for .once
var genGuard = function (condition) { return ("if(" + condition + ")return null;"); };

var modifierCode = {
  stop: '$event.stopPropagation();',
  prevent: '$event.preventDefault();',
  self: genGuard("$event.target !== $event.currentTarget"),
  ctrl: genGuard("!$event.ctrlKey"),
  shift: genGuard("!$event.shiftKey"),
  alt: genGuard("!$event.altKey"),
  meta: genGuard("!$event.metaKey"),
  left: genGuard("'button' in $event && $event.button !== 0"),
  middle: genGuard("'button' in $event && $event.button !== 1"),
  right: genGuard("'button' in $event && $event.button !== 2")
};

function genHandlers (
  events,
  isNative
) {
  var prefix = isNative ? 'nativeOn:' : 'on:';
  var staticHandlers = "";
  var dynamicHandlers = "";
  for (var name in events) {
    var handlerCode = genHandler(events[name]);
    if (events[name] && events[name].dynamic) {
      dynamicHandlers += name + "," + handlerCode + ",";
    } else {
      staticHandlers += "\"" + name + "\":" + handlerCode + ",";
    }
  }
  staticHandlers = "{" + (staticHandlers.slice(0, -1)) + "}";
  if (dynamicHandlers) {
    return prefix + "_d(" + staticHandlers + ",[" + (dynamicHandlers.slice(0, -1)) + "])"
  } else {
    return prefix + staticHandlers
  }
}

function genHandler (handler) {
  if (!handler) {
    return 'function(){}'
  }

  if (Array.isArray(handler)) {
    return ("[" + (handler.map(function (handler) { return genHandler(handler); }).join(',')) + "]")
  }

  var isMethodPath = simplePathRE.test(handler.value);
  var isFunctionExpression = fnExpRE.test(handler.value);
  var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''));

  if (!handler.modifiers) {
    if (isMethodPath || isFunctionExpression) {
      return handler.value
    }
    return ("function($event){" + (isFunctionInvocation ? ("return " + (handler.value)) : handler.value) + "}") // inline statement
  } else {
    var code = '';
    var genModifierCode = '';
    var keys = [];
    for (var key in handler.modifiers) {
      if (modifierCode[key]) {
        genModifierCode += modifierCode[key];
        // left/right
        if (keyCodes[key]) {
          keys.push(key);
        }
      } else if (key === 'exact') {
        var modifiers = (handler.modifiers);
        genModifierCode += genGuard(
          ['ctrl', 'shift', 'alt', 'meta']
            .filter(function (keyModifier) { return !modifiers[keyModifier]; })
            .map(function (keyModifier) { return ("$event." + keyModifier + "Key"); })
            .join('||')
        );
      } else {
        keys.push(key);
      }
    }
    if (keys.length) {
      code += genKeyFilter(keys);
    }
    // Make sure modifiers like prevent and stop get executed after key filtering
    if (genModifierCode) {
      code += genModifierCode;
    }
    var handlerCode = isMethodPath
      ? ("return " + (handler.value) + "($event)")
      : isFunctionExpression
        ? ("return (" + (handler.value) + ")($event)")
        : isFunctionInvocation
          ? ("return " + (handler.value))
          : handler.value;
    return ("function($event){" + code + handlerCode + "}")
  }
}

function genKeyFilter (keys) {
  return (
    // make sure the key filters only apply to KeyboardEvents
    // #9441: can't use 'keyCode' in $event because Chrome autofill fires fake
    // key events that do not have keyCode property...
    "if(!$event.type.indexOf('key')&&" +
    (keys.map(genFilterCode).join('&&')) + ")return null;"
  )
}

function genFilterCode (key) {
  var keyVal = parseInt(key, 10);
  if (keyVal) {
    return ("$event.keyCode!==" + keyVal)
  }
  var keyCode = keyCodes[key];
  var keyName = keyNames[key];
  return (
    "_k($event.keyCode," +
    (JSON.stringify(key)) + "," +
    (JSON.stringify(keyCode)) + "," +
    "$event.key," +
    "" + (JSON.stringify(keyName)) +
    ")"
  )
}

/*  */

function on (el, dir) {
  if (dir.modifiers) {
    warn("v-on without argument does not support modifiers.");
  }
  el.wrapListeners = function (code) { return ("_g(" + code + "," + (dir.value) + ")"); };
}

/*  */

function bind$1 (el, dir) {
  el.wrapData = function (code) {
    return ("_b(" + code + ",'" + (el.tag) + "'," + (dir.value) + "," + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + ")")
  };
}

/*  */

var baseDirectives = {
  on: on,
  bind: bind$1,
  cloak: noop
};

/*  */





var CodegenState = function CodegenState (options) {
  this.options = options;
  this.warn = options.warn || baseWarn;
  this.transforms = pluckModuleFunction(options.modules, 'transformCode');
  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');
  this.directives = extend(extend({}, baseDirectives), options.directives);
  var isReservedTag = options.isReservedTag || no;
  this.maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };
  this.onceId = 0;
  this.staticRenderFns = [];
  this.pre = false;
};



function generate (
  ast,
  options
) {
  var state = new CodegenState(options);
  var code = ast ? genElement(ast, state) : '_c("div")';
  return {
    render: ("with(this){return " + code + "}"),
    staticRenderFns: state.staticRenderFns
  }
}

function genElement (el, state) {
  if (el.parent) {
    el.pre = el.pre || el.parent.pre;
  }

  if (el.staticRoot && !el.staticProcessed) {
    return genStatic(el, state)
  } else if (el.once && !el.onceProcessed) {
    return genOnce(el, state)
  } else if (el.for && !el.forProcessed) {
    return genFor(el, state)
  } else if (el.if && !el.ifProcessed) {
    return genIf(el, state)
  } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {
    return genChildren(el, state) || 'void 0'
  } else if (el.tag === 'slot') {
    return genSlot(el, state)
  } else {
    // component or element
    var code;
    if (el.component) {
      code = genComponent(el.component, el, state);
    } else {
      var data;
      if (!el.plain || (el.pre && state.maybeComponent(el))) {
        data = genData$2(el, state);
      }

      var children = el.inlineTemplate ? null : genChildren(el, state, true);
      code = "_c('" + (el.tag) + "'" + (data ? ("," + data) : '') + (children ? ("," + children) : '') + ")";
    }
    // module transforms
    for (var i = 0; i < state.transforms.length; i++) {
      code = state.transforms[i](el, code);
    }
    return code
  }
}

// hoist static sub-trees out
function genStatic (el, state) {
  el.staticProcessed = true;
  // Some elements (templates) need to behave differently inside of a v-pre
  // node.  All pre nodes are static roots, so we can use this as a location to
  // wrap a state change and reset it upon exiting the pre node.
  var originalPreState = state.pre;
  if (el.pre) {
    state.pre = el.pre;
  }
  state.staticRenderFns.push(("with(this){return " + (genElement(el, state)) + "}"));
  state.pre = originalPreState;
  return ("_m(" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")")
}

// v-once
function genOnce (el, state) {
  el.onceProcessed = true;
  if (el.if && !el.ifProcessed) {
    return genIf(el, state)
  } else if (el.staticInFor) {
    var key = '';
    var parent = el.parent;
    while (parent) {
      if (parent.for) {
        key = parent.key;
        break
      }
      parent = parent.parent;
    }
    if (!key) {
      state.warn(
        "v-once can only be used inside v-for that is keyed. ",
        el.rawAttrsMap['v-once']
      );
      return genElement(el, state)
    }
    return ("_o(" + (genElement(el, state)) + "," + (state.onceId++) + "," + key + ")")
  } else {
    return genStatic(el, state)
  }
}

function genIf (
  el,
  state,
  altGen,
  altEmpty
) {
  el.ifProcessed = true; // avoid recursion
  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)
}

function genIfConditions (
  conditions,
  state,
  altGen,
  altEmpty
) {
  if (!conditions.length) {
    return altEmpty || '_e()'
  }

  var condition = conditions.shift();
  if (condition.exp) {
    return ("(" + (condition.exp) + ")?" + (genTernaryExp(condition.block)) + ":" + (genIfConditions(conditions, state, altGen, altEmpty)))
  } else {
    return ("" + (genTernaryExp(condition.block)))
  }

  // v-if with v-once should generate code like (a)?_m(0):_m(1)
  function genTernaryExp (el) {
    return altGen
      ? altGen(el, state)
      : el.once
        ? genOnce(el, state)
        : genElement(el, state)
  }
}

function genFor (
  el,
  state,
  altGen,
  altHelper
) {
  var exp = el.for;
  var alias = el.alias;
  var iterator1 = el.iterator1 ? ("," + (el.iterator1)) : '';
  var iterator2 = el.iterator2 ? ("," + (el.iterator2)) : '';

  if (state.maybeComponent(el) &&
    el.tag !== 'slot' &&
    el.tag !== 'template' &&
    !el.key
  ) {
    state.warn(
      "<" + (el.tag) + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " +
      "v-for should have explicit keys. " +
      "See https://vuejs.org/guide/list.html#key for more info.",
      el.rawAttrsMap['v-for'],
      true /* tip */
    );
  }

  el.forProcessed = true; // avoid recursion
  return (altHelper || '_l') + "((" + exp + ")," +
    "function(" + alias + iterator1 + iterator2 + "){" +
      "return " + ((altGen || genElement)(el, state)) +
    '})'
}

function genData$2 (el, state) {
  var data = '{';

  // directives first.
  // directives may mutate the el's other properties before they are generated.
  var dirs = genDirectives(el, state);
  if (dirs) { data += dirs + ','; }

  // key
  if (el.key) {
    data += "key:" + (el.key) + ",";
  }
  // ref
  if (el.ref) {
    data += "ref:" + (el.ref) + ",";
  }
  if (el.refInFor) {
    data += "refInFor:true,";
  }
  // pre
  if (el.pre) {
    data += "pre:true,";
  }
  // record original tag name for components using "is" attribute
  if (el.component) {
    data += "tag:\"" + (el.tag) + "\",";
  }
  // module data generation functions
  for (var i = 0; i < state.dataGenFns.length; i++) {
    data += state.dataGenFns[i](el);
  }
  // attributes
  if (el.attrs) {
    data += "attrs:" + (genProps(el.attrs)) + ",";
  }
  // DOM props
  if (el.props) {
    data += "domProps:" + (genProps(el.props)) + ",";
  }
  // event handlers
  if (el.events) {
    data += (genHandlers(el.events, false)) + ",";
  }
  if (el.nativeEvents) {
    data += (genHandlers(el.nativeEvents, true)) + ",";
  }
  // slot target
  // only for non-scoped slots
  if (el.slotTarget && !el.slotScope) {
    data += "slot:" + (el.slotTarget) + ",";
  }
  // scoped slots
  if (el.scopedSlots) {
    data += (genScopedSlots(el, el.scopedSlots, state)) + ",";
  }
  // component v-model
  if (el.model) {
    data += "model:{value:" + (el.model.value) + ",callback:" + (el.model.callback) + ",expression:" + (el.model.expression) + "},";
  }
  // inline-template
  if (el.inlineTemplate) {
    var inlineTemplate = genInlineTemplate(el, state);
    if (inlineTemplate) {
      data += inlineTemplate + ",";
    }
  }
  data = data.replace(/,$/, '') + '}';
  // v-bind dynamic argument wrap
  // v-bind with dynamic arguments must be applied using the same v-bind object
  // merge helper so that class/style/mustUseProp attrs are handled correctly.
  if (el.dynamicAttrs) {
    data = "_b(" + data + ",\"" + (el.tag) + "\"," + (genProps(el.dynamicAttrs)) + ")";
  }
  // v-bind data wrap
  if (el.wrapData) {
    data = el.wrapData(data);
  }
  // v-on data wrap
  if (el.wrapListeners) {
    data = el.wrapListeners(data);
  }
  return data
}

function genDirectives (el, state) {
  var dirs = el.directives;
  if (!dirs) { return }
  var res = 'directives:[';
  var hasRuntime = false;
  var i, l, dir, needRuntime;
  for (i = 0, l = dirs.length; i < l; i++) {
    dir = dirs[i];
    needRuntime = true;
    var gen = state.directives[dir.name];
    if (gen) {
      // compile-time directive that manipulates AST.
      // returns true if it also needs a runtime counterpart.
      needRuntime = !!gen(el, dir, state.warn);
    }
    if (needRuntime) {
      hasRuntime = true;
      res += "{name:\"" + (dir.name) + "\",rawName:\"" + (dir.rawName) + "\"" + (dir.value ? (",value:(" + (dir.value) + "),expression:" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (",arg:" + (dir.isDynamicArg ? dir.arg : ("\"" + (dir.arg) + "\""))) : '') + (dir.modifiers ? (",modifiers:" + (JSON.stringify(dir.modifiers))) : '') + "},";
    }
  }
  if (hasRuntime) {
    return res.slice(0, -1) + ']'
  }
}

function genInlineTemplate (el, state) {
  var ast = el.children[0];
  if (el.children.length !== 1 || ast.type !== 1) {
    state.warn(
      'Inline-template components must have exactly one child element.',
      { start: el.start }
    );
  }
  if (ast && ast.type === 1) {
    var inlineRenderFns = generate(ast, state.options);
    return ("inlineTemplate:{render:function(){" + (inlineRenderFns.render) + "},staticRenderFns:[" + (inlineRenderFns.staticRenderFns.map(function (code) { return ("function(){" + code + "}"); }).join(',')) + "]}")
  }
}

function genScopedSlots (
  el,
  slots,
  state
) {
  // by default scoped slots are considered "stable", this allows child
  // components with only scoped slots to skip forced updates from parent.
  // but in some cases we have to bail-out of this optimization
  // for example if the slot contains dynamic names, has v-if or v-for on them...
  var needsForceUpdate = el.for || Object.keys(slots).some(function (key) {
    var slot = slots[key];
    return (
      slot.slotTargetDynamic ||
      slot.if ||
      slot.for ||
      containsSlotChild(slot) // is passing down slot from parent which may be dynamic
    )
  });

  // #9534: if a component with scoped slots is inside a conditional branch,
  // it's possible for the same component to be reused but with different
  // compiled slot content. To avoid that, we generate a unique key based on
  // the generated code of all the slot contents.
  var needsKey = !!el.if;

  // OR when it is inside another scoped slot or v-for (the reactivity may be
  // disconnected due to the intermediate scope variable)
  // #9438, #9506
  // TODO: this can be further optimized by properly analyzing in-scope bindings
  // and skip force updating ones that do not actually use scope variables.
  if (!needsForceUpdate) {
    var parent = el.parent;
    while (parent) {
      if (
        (parent.slotScope && parent.slotScope !== emptySlotScopeToken) ||
        parent.for
      ) {
        needsForceUpdate = true;
        break
      }
      if (parent.if) {
        needsKey = true;
      }
      parent = parent.parent;
    }
  }

  var generatedSlots = Object.keys(slots)
    .map(function (key) { return genScopedSlot(slots[key], state); })
    .join(',');

  return ("scopedSlots:_u([" + generatedSlots + "]" + (needsForceUpdate ? ",null,true" : "") + (!needsForceUpdate && needsKey ? (",null,false," + (hash(generatedSlots))) : "") + ")")
}

function hash(str) {
  var hash = 5381;
  var i = str.length;
  while(i) {
    hash = (hash * 33) ^ str.charCodeAt(--i);
  }
  return hash >>> 0
}

function containsSlotChild (el) {
  if (el.type === 1) {
    if (el.tag === 'slot') {
      return true
    }
    return el.children.some(containsSlotChild)
  }
  return false
}

function genScopedSlot (
  el,
  state
) {
  var isLegacySyntax = el.attrsMap['slot-scope'];
  if (el.if && !el.ifProcessed && !isLegacySyntax) {
    return genIf(el, state, genScopedSlot, "null")
  }
  if (el.for && !el.forProcessed) {
    return genFor(el, state, genScopedSlot)
  }
  var slotScope = el.slotScope === emptySlotScopeToken
    ? ""
    : String(el.slotScope);
  var fn = "function(" + slotScope + "){" +
    "return " + (el.tag === 'template'
      ? el.if && isLegacySyntax
        ? ("(" + (el.if) + ")?" + (genChildren(el, state) || 'undefined') + ":undefined")
        : genChildren(el, state) || 'undefined'
      : genElement(el, state)) + "}";
  // reverse proxy v-slot without scope on this.$slots
  var reverseProxy = slotScope ? "" : ",proxy:true";
  return ("{key:" + (el.slotTarget || "\"default\"") + ",fn:" + fn + reverseProxy + "}")
}

function genChildren (
  el,
  state,
  checkSkip,
  altGenElement,
  altGenNode
) {
  var children = el.children;
  if (children.length) {
    var el$1 = children[0];
    // optimize single v-for
    if (children.length === 1 &&
      el$1.for &&
      el$1.tag !== 'template' &&
      el$1.tag !== 'slot'
    ) {
      var normalizationType = checkSkip
        ? state.maybeComponent(el$1) ? ",1" : ",0"
        : "";
      return ("" + ((altGenElement || genElement)(el$1, state)) + normalizationType)
    }
    var normalizationType$1 = checkSkip
      ? getNormalizationType(children, state.maybeComponent)
      : 0;
    var gen = altGenNode || genNode;
    return ("[" + (children.map(function (c) { return gen(c, state); }).join(',')) + "]" + (normalizationType$1 ? ("," + normalizationType$1) : ''))
  }
}

// determine the normalization needed for the children array.
// 0: no normalization needed
// 1: simple normalization needed (possible 1-level deep nested array)
// 2: full normalization needed
function getNormalizationType (
  children,
  maybeComponent
) {
  var res = 0;
  for (var i = 0; i < children.length; i++) {
    var el = children[i];
    if (el.type !== 1) {
      continue
    }
    if (needsNormalization(el) ||
        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {
      res = 2;
      break
    }
    if (maybeComponent(el) ||
        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {
      res = 1;
    }
  }
  return res
}

function needsNormalization (el) {
  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'
}

function genNode (node, state) {
  if (node.type === 1) {
    return genElement(node, state)
  } else if (node.type === 3 && node.isComment) {
    return genComment(node)
  } else {
    return genText(node)
  }
}

function genText (text) {
  return ("_v(" + (text.type === 2
    ? text.expression // no need for () because already wrapped in _s()
    : transformSpecialNewlines(JSON.stringify(text.text))) + ")")
}

function genComment (comment) {
  return ("_e(" + (JSON.stringify(comment.text)) + ")")
}

function genSlot (el, state) {
  var slotName = el.slotName || '"default"';
  var children = genChildren(el, state);
  var res = "_t(" + slotName + (children ? ("," + children) : '');
  var attrs = el.attrs || el.dynamicAttrs
    ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map(function (attr) { return ({
        // slot props are camelized
        name: camelize(attr.name),
        value: attr.value,
        dynamic: attr.dynamic
      }); }))
    : null;
  var bind$$1 = el.attrsMap['v-bind'];
  if ((attrs || bind$$1) && !children) {
    res += ",null";
  }
  if (attrs) {
    res += "," + attrs;
  }
  if (bind$$1) {
    res += (attrs ? '' : ',null') + "," + bind$$1;
  }
  return res + ')'
}

// componentName is el.component, take it as argument to shun flow's pessimistic refinement
function genComponent (
  componentName,
  el,
  state
) {
  var children = el.inlineTemplate ? null : genChildren(el, state, true);
  return ("_c(" + componentName + "," + (genData$2(el, state)) + (children ? ("," + children) : '') + ")")
}

function genProps (props) {
  var staticProps = "";
  var dynamicProps = "";
  for (var i = 0; i < props.length; i++) {
    var prop = props[i];
    var value = transformSpecialNewlines(prop.value);
    if (prop.dynamic) {
      dynamicProps += (prop.name) + "," + value + ",";
    } else {
      staticProps += "\"" + (prop.name) + "\":" + value + ",";
    }
  }
  staticProps = "{" + (staticProps.slice(0, -1)) + "}";
  if (dynamicProps) {
    return ("_d(" + staticProps + ",[" + (dynamicProps.slice(0, -1)) + "])")
  } else {
    return staticProps
  }
}

// #3895, #4268
function transformSpecialNewlines (text) {
  return text
    .replace(/\u2028/g, '\\u2028')
    .replace(/\u2029/g, '\\u2029')
}

/*  */



// these keywords should not appear inside expressions, but operators like
// typeof, instanceof and in are allowed
var prohibitedKeywordRE = new RegExp('\\b' + (
  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +
  'super,throw,while,yield,delete,export,import,return,switch,default,' +
  'extends,finally,continue,debugger,function,arguments'
).split(',').join('\\b|\\b') + '\\b');

// these unary operators should not be used as property/method names
var unaryOperatorsRE = new RegExp('\\b' + (
  'delete,typeof,void'
).split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)');

// strip strings in expressions
var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;

// detect problematic expressions in a template
function detectErrors (ast, warn) {
  if (ast) {
    checkNode(ast, warn);
  }
}

function checkNode (node, warn) {
  if (node.type === 1) {
    for (var name in node.attrsMap) {
      if (dirRE.test(name)) {
        var value = node.attrsMap[name];
        if (value) {
          var range = node.rawAttrsMap[name];
          if (name === 'v-for') {
            checkFor(node, ("v-for=\"" + value + "\""), warn, range);
          } else if (name === 'v-slot' || name[0] === '#') {
            checkFunctionParameterExpression(value, (name + "=\"" + value + "\""), warn, range);
          } else if (onRE.test(name)) {
            checkEvent(value, (name + "=\"" + value + "\""), warn, range);
          } else {
            checkExpression(value, (name + "=\"" + value + "\""), warn, range);
          }
        }
      }
    }
    if (node.children) {
      for (var i = 0; i < node.children.length; i++) {
        checkNode(node.children[i], warn);
      }
    }
  } else if (node.type === 2) {
    checkExpression(node.expression, node.text, warn, node);
  }
}

function checkEvent (exp, text, warn, range) {
  var stripped = exp.replace(stripStringRE, '');
  var keywordMatch = stripped.match(unaryOperatorsRE);
  if (keywordMatch && stripped.charAt(keywordMatch.index - 1) !== '$') {
    warn(
      "avoid using JavaScript unary operator as property name: " +
      "\"" + (keywordMatch[0]) + "\" in expression " + (text.trim()),
      range
    );
  }
  checkExpression(exp, text, warn, range);
}

function checkFor (node, text, warn, range) {
  checkExpression(node.for || '', text, warn, range);
  checkIdentifier(node.alias, 'v-for alias', text, warn, range);
  checkIdentifier(node.iterator1, 'v-for iterator', text, warn, range);
  checkIdentifier(node.iterator2, 'v-for iterator', text, warn, range);
}

function checkIdentifier (
  ident,
  type,
  text,
  warn,
  range
) {
  if (typeof ident === 'string') {
    try {
      new Function(("var " + ident + "=_"));
    } catch (e) {
      warn(("invalid " + type + " \"" + ident + "\" in expression: " + (text.trim())), range);
    }
  }
}

function checkExpression (exp, text, warn, range) {
  try {
    new Function(("return " + exp));
  } catch (e) {
    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);
    if (keywordMatch) {
      warn(
        "avoid using JavaScript keyword as property name: " +
        "\"" + (keywordMatch[0]) + "\"\n  Raw expression: " + (text.trim()),
        range
      );
    } else {
      warn(
        "invalid expression: " + (e.message) + " in\n\n" +
        "    " + exp + "\n\n" +
        "  Raw expression: " + (text.trim()) + "\n",
        range
      );
    }
  }
}

function checkFunctionParameterExpression (exp, text, warn, range) {
  try {
    new Function(exp, '');
  } catch (e) {
    warn(
      "invalid function parameter expression: " + (e.message) + " in\n\n" +
      "    " + exp + "\n\n" +
      "  Raw expression: " + (text.trim()) + "\n",
      range
    );
  }
}

/*  */

var range = 2;

function generateCodeFrame (
  source,
  start,
  end
) {
  if ( start === void 0 ) start = 0;
  if ( end === void 0 ) end = source.length;

  var lines = source.split(/\r?\n/);
  var count = 0;
  var res = [];
  for (var i = 0; i < lines.length; i++) {
    count += lines[i].length + 1;
    if (count >= start) {
      for (var j = i - range; j <= i + range || end > count; j++) {
        if (j < 0 || j >= lines.length) { continue }
        res.push(("" + (j + 1) + (repeat$1(" ", 3 - String(j + 1).length)) + "|  " + (lines[j])));
        var lineLength = lines[j].length;
        if (j === i) {
          // push underline
          var pad = start - (count - lineLength) + 1;
          var length = end > count ? lineLength - pad : end - start;
          res.push("   |  " + repeat$1(" ", pad) + repeat$1("^", length));
        } else if (j > i) {
          if (end > count) {
            var length$1 = Math.min(end - count, lineLength);
            res.push("   |  " + repeat$1("^", length$1));
          }
          count += lineLength + 1;
        }
      }
      break
    }
  }
  return res.join('\n')
}

function repeat$1 (str, n) {
  var result = '';
  if (n > 0) {
    while (true) { // eslint-disable-line
      if (n & 1) { result += str; }
      n >>>= 1;
      if (n <= 0) { break }
      str += str;
    }
  }
  return result
}

/*  */



function createFunction (code, errors) {
  try {
    return new Function(code)
  } catch (err) {
    errors.push({ err: err, code: code });
    return noop
  }
}

function createCompileToFunctionFn (compile) {
  var cache = Object.create(null);

  return function compileToFunctions (
    template,
    options,
    vm
  ) {
    options = extend({}, options);
    var warn$$1 = options.warn || warn;
    delete options.warn;

    /* istanbul ignore if */
    {
      // detect possible CSP restriction
      try {
        new Function('return 1');
      } catch (e) {
        if (e.toString().match(/unsafe-eval|CSP/)) {
          warn$$1(
            'It seems you are using the standalone build of Vue.js in an ' +
            'environment with Content Security Policy that prohibits unsafe-eval. ' +
            'The template compiler cannot work in this environment. Consider ' +
            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +
            'templates into render functions.'
          );
        }
      }
    }

    // check cache
    var key = options.delimiters
      ? String(options.delimiters) + template
      : template;
    if (cache[key]) {
      return cache[key]
    }

    // compile
    var compiled = compile(template, options);

    // check compilation errors/tips
    {
      if (compiled.errors && compiled.errors.length) {
        if (options.outputSourceRange) {
          compiled.errors.forEach(function (e) {
            warn$$1(
              "Error compiling template:\n\n" + (e.msg) + "\n\n" +
              generateCodeFrame(template, e.start, e.end),
              vm
            );
          });
        } else {
          warn$$1(
            "Error compiling template:\n\n" + template + "\n\n" +
            compiled.errors.map(function (e) { return ("- " + e); }).join('\n') + '\n',
            vm
          );
        }
      }
      if (compiled.tips && compiled.tips.length) {
        if (options.outputSourceRange) {
          compiled.tips.forEach(function (e) { return tip(e.msg, vm); });
        } else {
          compiled.tips.forEach(function (msg) { return tip(msg, vm); });
        }
      }
    }

    // turn code into functions
    var res = {};
    var fnGenErrors = [];
    res.render = createFunction(compiled.render, fnGenErrors);
    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {
      return createFunction(code, fnGenErrors)
    });

    // check function generation errors.
    // this should only happen if there is a bug in the compiler itself.
    // mostly for codegen development use
    /* istanbul ignore if */
    {
      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
        warn$$1(
          "Failed to generate render function:\n\n" +
          fnGenErrors.map(function (ref) {
            var err = ref.err;
            var code = ref.code;

            return ((err.toString()) + " in\n\n" + code + "\n");
        }).join('\n'),
          vm
        );
      }
    }

    return (cache[key] = res)
  }
}

/*  */

function createCompilerCreator (baseCompile) {
  return function createCompiler (baseOptions) {
    function compile (
      template,
      options
    ) {
      var finalOptions = Object.create(baseOptions);
      var errors = [];
      var tips = [];

      var warn = function (msg, range, tip) {
        (tip ? tips : errors).push(msg);
      };

      if (options) {
        if (options.outputSourceRange) {
          // $flow-disable-line
          var leadingSpaceLength = template.match(/^\s*/)[0].length;

          warn = function (msg, range, tip) {
            var data = { msg: msg };
            if (range) {
              if (range.start != null) {
                data.start = range.start + leadingSpaceLength;
              }
              if (range.end != null) {
                data.end = range.end + leadingSpaceLength;
              }
            }
            (tip ? tips : errors).push(data);
          };
        }
        // merge custom modules
        if (options.modules) {
          finalOptions.modules =
            (baseOptions.modules || []).concat(options.modules);
        }
        // merge custom directives
        if (options.directives) {
          finalOptions.directives = extend(
            Object.create(baseOptions.directives || null),
            options.directives
          );
        }
        // copy other options
        for (var key in options) {
          if (key !== 'modules' && key !== 'directives') {
            finalOptions[key] = options[key];
          }
        }
      }

      finalOptions.warn = warn;

      var compiled = baseCompile(template.trim(), finalOptions);
      {
        detectErrors(compiled.ast, warn);
      }
      compiled.errors = errors;
      compiled.tips = tips;
      return compiled
    }

    return {
      compile: compile,
      compileToFunctions: createCompileToFunctionFn(compile)
    }
  }
}

/*  */

// `createCompilerCreator` allows creating compilers that use alternative
// parser/optimizer/codegen, e.g the SSR optimizing compiler.
// Here we just export a default compiler using the default parts.
var createCompiler = createCompilerCreator(function baseCompile (
  template,
  options
) {
  var ast = parse(template.trim(), options);
  if (options.optimize !== false) {
    optimize(ast, options);
  }
  var code = generate(ast, options);
  return {
    ast: ast,
    render: code.render,
    staticRenderFns: code.staticRenderFns
  }
});

/*  */

var ref$1 = createCompiler(baseOptions);
var compile = ref$1.compile;
var compileToFunctions = ref$1.compileToFunctions;

/*  */

// check whether current browser encodes a char inside attribute values
var div;
function getShouldDecode (href) {
  div = div || document.createElement('div');
  div.innerHTML = href ? "<a href=\"\n\"/>" : "<div a=\"\n\"/>";
  return div.innerHTML.indexOf('&#10;') > 0
}

// #3663: IE encodes newlines inside attribute values while other browsers don't
var shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;
// #6828: chrome encodes content in a[href]
var shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;

/*  */

var idToTemplate = cached(function (id) {
  var el = query(id);
  return el && el.innerHTML
});

var mount = Vue.prototype.$mount;
Vue.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && query(el);

  /* istanbul ignore if */
  if (el === document.body || el === document.documentElement) {
    warn(
      "Do not mount Vue to <html> or <body> - mount to normal elements instead."
    );
    return this
  }

  var options = this.$options;
  // resolve template/el and convert to render function
  if (!options.render) {
    var template = options.template;
    if (template) {
      if (typeof template === 'string') {
        if (template.charAt(0) === '#') {
          template = idToTemplate(template);
          /* istanbul ignore if */
          if (!template) {
            warn(
              ("Template element not found or is empty: " + (options.template)),
              this
            );
          }
        }
      } else if (template.nodeType) {
        template = template.innerHTML;
      } else {
        {
          warn('invalid template option:' + template, this);
        }
        return this
      }
    } else if (el) {
      template = getOuterHTML(el);
    }
    if (template) {
      /* istanbul ignore if */
      if (config.performance && mark) {
        mark('compile');
      }

      var ref = compileToFunctions(template, {
        outputSourceRange: "development" !== 'production',
        shouldDecodeNewlines: shouldDecodeNewlines,
        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,
        delimiters: options.delimiters,
        comments: options.comments
      }, this);
      var render = ref.render;
      var staticRenderFns = ref.staticRenderFns;
      options.render = render;
      options.staticRenderFns = staticRenderFns;

      /* istanbul ignore if */
      if (config.performance && mark) {
        mark('compile end');
        measure(("vue " + (this._name) + " compile"), 'compile', 'compile end');
      }
    }
  }
  return mount.call(this, el, hydrating)
};

/**
 * Get outerHTML of elements, taking care
 * of SVG elements in IE as well.
 */
function getOuterHTML (el) {
  if (el.outerHTML) {
    return el.outerHTML
  } else {
    var container = document.createElement('div');
    container.appendChild(el.cloneNode(true));
    return container.innerHTML
  }
}

Vue.compile = compileToFunctions;

module.exports = Vue;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../timers-browserify/main.js */ "./node_modules/timers-browserify/main.js").setImmediate))

/***/ }),

/***/ "./node_modules/vue/dist/vue.common.js":
/*!*********************************************!*\
  !*** ./node_modules/vue/dist/vue.common.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

if (false) {} else {
  module.exports = __webpack_require__(/*! ./vue.common.dev.js */ "./node_modules/vue/dist/vue.common.dev.js")
}


/***/ }),

/***/ "./node_modules/webfontloader/webfontloader.js":
/*!*****************************************************!*\
  !*** ./node_modules/webfontloader/webfontloader.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/* Web Font Loader v1.6.28 - (c) Adobe Systems, Google. License: Apache 2.0 */(function(){function aa(a,b,c){return a.call.apply(a.bind,arguments)}function ba(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function p(a,b,c){p=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?aa:ba;return p.apply(null,arguments)}var q=Date.now||function(){return+new Date};function ca(a,b){this.a=a;this.o=b||a;this.c=this.o.document}var da=!!window.FontFace;function t(a,b,c,d){b=a.c.createElement(b);if(c)for(var e in c)c.hasOwnProperty(e)&&("style"==e?b.style.cssText=c[e]:b.setAttribute(e,c[e]));d&&b.appendChild(a.c.createTextNode(d));return b}function u(a,b,c){a=a.c.getElementsByTagName(b)[0];a||(a=document.documentElement);a.insertBefore(c,a.lastChild)}function v(a){a.parentNode&&a.parentNode.removeChild(a)}
function w(a,b,c){b=b||[];c=c||[];for(var d=a.className.split(/\s+/),e=0;e<b.length;e+=1){for(var f=!1,g=0;g<d.length;g+=1)if(b[e]===d[g]){f=!0;break}f||d.push(b[e])}b=[];for(e=0;e<d.length;e+=1){f=!1;for(g=0;g<c.length;g+=1)if(d[e]===c[g]){f=!0;break}f||b.push(d[e])}a.className=b.join(" ").replace(/\s+/g," ").replace(/^\s+|\s+$/,"")}function y(a,b){for(var c=a.className.split(/\s+/),d=0,e=c.length;d<e;d++)if(c[d]==b)return!0;return!1}
function ea(a){return a.o.location.hostname||a.a.location.hostname}function z(a,b,c){function d(){m&&e&&f&&(m(g),m=null)}b=t(a,"link",{rel:"stylesheet",href:b,media:"all"});var e=!1,f=!0,g=null,m=c||null;da?(b.onload=function(){e=!0;d()},b.onerror=function(){e=!0;g=Error("Stylesheet failed to load");d()}):setTimeout(function(){e=!0;d()},0);u(a,"head",b)}
function A(a,b,c,d){var e=a.c.getElementsByTagName("head")[0];if(e){var f=t(a,"script",{src:b}),g=!1;f.onload=f.onreadystatechange=function(){g||this.readyState&&"loaded"!=this.readyState&&"complete"!=this.readyState||(g=!0,c&&c(null),f.onload=f.onreadystatechange=null,"HEAD"==f.parentNode.tagName&&e.removeChild(f))};e.appendChild(f);setTimeout(function(){g||(g=!0,c&&c(Error("Script load timeout")))},d||5E3);return f}return null};function B(){this.a=0;this.c=null}function C(a){a.a++;return function(){a.a--;D(a)}}function E(a,b){a.c=b;D(a)}function D(a){0==a.a&&a.c&&(a.c(),a.c=null)};function F(a){this.a=a||"-"}F.prototype.c=function(a){for(var b=[],c=0;c<arguments.length;c++)b.push(arguments[c].replace(/[\W_]+/g,"").toLowerCase());return b.join(this.a)};function G(a,b){this.c=a;this.f=4;this.a="n";var c=(b||"n4").match(/^([nio])([1-9])$/i);c&&(this.a=c[1],this.f=parseInt(c[2],10))}function fa(a){return H(a)+" "+(a.f+"00")+" 300px "+I(a.c)}function I(a){var b=[];a=a.split(/,\s*/);for(var c=0;c<a.length;c++){var d=a[c].replace(/['"]/g,"");-1!=d.indexOf(" ")||/^\d/.test(d)?b.push("'"+d+"'"):b.push(d)}return b.join(",")}function J(a){return a.a+a.f}function H(a){var b="normal";"o"===a.a?b="oblique":"i"===a.a&&(b="italic");return b}
function ga(a){var b=4,c="n",d=null;a&&((d=a.match(/(normal|oblique|italic)/i))&&d[1]&&(c=d[1].substr(0,1).toLowerCase()),(d=a.match(/([1-9]00|normal|bold)/i))&&d[1]&&(/bold/i.test(d[1])?b=7:/[1-9]00/.test(d[1])&&(b=parseInt(d[1].substr(0,1),10))));return c+b};function ha(a,b){this.c=a;this.f=a.o.document.documentElement;this.h=b;this.a=new F("-");this.j=!1!==b.events;this.g=!1!==b.classes}function ia(a){a.g&&w(a.f,[a.a.c("wf","loading")]);K(a,"loading")}function L(a){if(a.g){var b=y(a.f,a.a.c("wf","active")),c=[],d=[a.a.c("wf","loading")];b||c.push(a.a.c("wf","inactive"));w(a.f,c,d)}K(a,"inactive")}function K(a,b,c){if(a.j&&a.h[b])if(c)a.h[b](c.c,J(c));else a.h[b]()};function ja(){this.c={}}function ka(a,b,c){var d=[],e;for(e in b)if(b.hasOwnProperty(e)){var f=a.c[e];f&&d.push(f(b[e],c))}return d};function M(a,b){this.c=a;this.f=b;this.a=t(this.c,"span",{"aria-hidden":"true"},this.f)}function N(a){u(a.c,"body",a.a)}function O(a){return"display:block;position:absolute;top:-9999px;left:-9999px;font-size:300px;width:auto;height:auto;line-height:normal;margin:0;padding:0;font-variant:normal;white-space:nowrap;font-family:"+I(a.c)+";"+("font-style:"+H(a)+";font-weight:"+(a.f+"00")+";")};function P(a,b,c,d,e,f){this.g=a;this.j=b;this.a=d;this.c=c;this.f=e||3E3;this.h=f||void 0}P.prototype.start=function(){var a=this.c.o.document,b=this,c=q(),d=new Promise(function(d,e){function f(){q()-c>=b.f?e():a.fonts.load(fa(b.a),b.h).then(function(a){1<=a.length?d():setTimeout(f,25)},function(){e()})}f()}),e=null,f=new Promise(function(a,d){e=setTimeout(d,b.f)});Promise.race([f,d]).then(function(){e&&(clearTimeout(e),e=null);b.g(b.a)},function(){b.j(b.a)})};function Q(a,b,c,d,e,f,g){this.v=a;this.B=b;this.c=c;this.a=d;this.s=g||"BESbswy";this.f={};this.w=e||3E3;this.u=f||null;this.m=this.j=this.h=this.g=null;this.g=new M(this.c,this.s);this.h=new M(this.c,this.s);this.j=new M(this.c,this.s);this.m=new M(this.c,this.s);a=new G(this.a.c+",serif",J(this.a));a=O(a);this.g.a.style.cssText=a;a=new G(this.a.c+",sans-serif",J(this.a));a=O(a);this.h.a.style.cssText=a;a=new G("serif",J(this.a));a=O(a);this.j.a.style.cssText=a;a=new G("sans-serif",J(this.a));a=
O(a);this.m.a.style.cssText=a;N(this.g);N(this.h);N(this.j);N(this.m)}var R={D:"serif",C:"sans-serif"},S=null;function T(){if(null===S){var a=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent);S=!!a&&(536>parseInt(a[1],10)||536===parseInt(a[1],10)&&11>=parseInt(a[2],10))}return S}Q.prototype.start=function(){this.f.serif=this.j.a.offsetWidth;this.f["sans-serif"]=this.m.a.offsetWidth;this.A=q();U(this)};
function la(a,b,c){for(var d in R)if(R.hasOwnProperty(d)&&b===a.f[R[d]]&&c===a.f[R[d]])return!0;return!1}function U(a){var b=a.g.a.offsetWidth,c=a.h.a.offsetWidth,d;(d=b===a.f.serif&&c===a.f["sans-serif"])||(d=T()&&la(a,b,c));d?q()-a.A>=a.w?T()&&la(a,b,c)&&(null===a.u||a.u.hasOwnProperty(a.a.c))?V(a,a.v):V(a,a.B):ma(a):V(a,a.v)}function ma(a){setTimeout(p(function(){U(this)},a),50)}function V(a,b){setTimeout(p(function(){v(this.g.a);v(this.h.a);v(this.j.a);v(this.m.a);b(this.a)},a),0)};function W(a,b,c){this.c=a;this.a=b;this.f=0;this.m=this.j=!1;this.s=c}var X=null;W.prototype.g=function(a){var b=this.a;b.g&&w(b.f,[b.a.c("wf",a.c,J(a).toString(),"active")],[b.a.c("wf",a.c,J(a).toString(),"loading"),b.a.c("wf",a.c,J(a).toString(),"inactive")]);K(b,"fontactive",a);this.m=!0;na(this)};
W.prototype.h=function(a){var b=this.a;if(b.g){var c=y(b.f,b.a.c("wf",a.c,J(a).toString(),"active")),d=[],e=[b.a.c("wf",a.c,J(a).toString(),"loading")];c||d.push(b.a.c("wf",a.c,J(a).toString(),"inactive"));w(b.f,d,e)}K(b,"fontinactive",a);na(this)};function na(a){0==--a.f&&a.j&&(a.m?(a=a.a,a.g&&w(a.f,[a.a.c("wf","active")],[a.a.c("wf","loading"),a.a.c("wf","inactive")]),K(a,"active")):L(a.a))};function oa(a){this.j=a;this.a=new ja;this.h=0;this.f=this.g=!0}oa.prototype.load=function(a){this.c=new ca(this.j,a.context||this.j);this.g=!1!==a.events;this.f=!1!==a.classes;pa(this,new ha(this.c,a),a)};
function qa(a,b,c,d,e){var f=0==--a.h;(a.f||a.g)&&setTimeout(function(){var a=e||null,m=d||null||{};if(0===c.length&&f)L(b.a);else{b.f+=c.length;f&&(b.j=f);var h,l=[];for(h=0;h<c.length;h++){var k=c[h],n=m[k.c],r=b.a,x=k;r.g&&w(r.f,[r.a.c("wf",x.c,J(x).toString(),"loading")]);K(r,"fontloading",x);r=null;if(null===X)if(window.FontFace){var x=/Gecko.*Firefox\/(\d+)/.exec(window.navigator.userAgent),xa=/OS X.*Version\/10\..*Safari/.exec(window.navigator.userAgent)&&/Apple/.exec(window.navigator.vendor);
X=x?42<parseInt(x[1],10):xa?!1:!0}else X=!1;X?r=new P(p(b.g,b),p(b.h,b),b.c,k,b.s,n):r=new Q(p(b.g,b),p(b.h,b),b.c,k,b.s,a,n);l.push(r)}for(h=0;h<l.length;h++)l[h].start()}},0)}function pa(a,b,c){var d=[],e=c.timeout;ia(b);var d=ka(a.a,c,a.c),f=new W(a.c,b,e);a.h=d.length;b=0;for(c=d.length;b<c;b++)d[b].load(function(b,d,c){qa(a,f,b,d,c)})};function ra(a,b){this.c=a;this.a=b}
ra.prototype.load=function(a){function b(){if(f["__mti_fntLst"+d]){var c=f["__mti_fntLst"+d](),e=[],h;if(c)for(var l=0;l<c.length;l++){var k=c[l].fontfamily;void 0!=c[l].fontStyle&&void 0!=c[l].fontWeight?(h=c[l].fontStyle+c[l].fontWeight,e.push(new G(k,h))):e.push(new G(k))}a(e)}else setTimeout(function(){b()},50)}var c=this,d=c.a.projectId,e=c.a.version;if(d){var f=c.c.o;A(this.c,(c.a.api||"https://fast.fonts.net/jsapi")+"/"+d+".js"+(e?"?v="+e:""),function(e){e?a([]):(f["__MonotypeConfiguration__"+
d]=function(){return c.a},b())}).id="__MonotypeAPIScript__"+d}else a([])};function sa(a,b){this.c=a;this.a=b}sa.prototype.load=function(a){var b,c,d=this.a.urls||[],e=this.a.families||[],f=this.a.testStrings||{},g=new B;b=0;for(c=d.length;b<c;b++)z(this.c,d[b],C(g));var m=[];b=0;for(c=e.length;b<c;b++)if(d=e[b].split(":"),d[1])for(var h=d[1].split(","),l=0;l<h.length;l+=1)m.push(new G(d[0],h[l]));else m.push(new G(d[0]));E(g,function(){a(m,f)})};function ta(a,b){a?this.c=a:this.c=ua;this.a=[];this.f=[];this.g=b||""}var ua="https://fonts.googleapis.com/css";function va(a,b){for(var c=b.length,d=0;d<c;d++){var e=b[d].split(":");3==e.length&&a.f.push(e.pop());var f="";2==e.length&&""!=e[1]&&(f=":");a.a.push(e.join(f))}}
function wa(a){if(0==a.a.length)throw Error("No fonts to load!");if(-1!=a.c.indexOf("kit="))return a.c;for(var b=a.a.length,c=[],d=0;d<b;d++)c.push(a.a[d].replace(/ /g,"+"));b=a.c+"?family="+c.join("%7C");0<a.f.length&&(b+="&subset="+a.f.join(","));0<a.g.length&&(b+="&text="+encodeURIComponent(a.g));return b};function ya(a){this.f=a;this.a=[];this.c={}}
var za={latin:"BESbswy","latin-ext":"\u00e7\u00f6\u00fc\u011f\u015f",cyrillic:"\u0439\u044f\u0416",greek:"\u03b1\u03b2\u03a3",khmer:"\u1780\u1781\u1782",Hanuman:"\u1780\u1781\u1782"},Aa={thin:"1",extralight:"2","extra-light":"2",ultralight:"2","ultra-light":"2",light:"3",regular:"4",book:"4",medium:"5","semi-bold":"6",semibold:"6","demi-bold":"6",demibold:"6",bold:"7","extra-bold":"8",extrabold:"8","ultra-bold":"8",ultrabold:"8",black:"9",heavy:"9",l:"3",r:"4",b:"7"},Ba={i:"i",italic:"i",n:"n",normal:"n"},
Ca=/^(thin|(?:(?:extra|ultra)-?)?light|regular|book|medium|(?:(?:semi|demi|extra|ultra)-?)?bold|black|heavy|l|r|b|[1-9]00)?(n|i|normal|italic)?$/;
function Da(a){for(var b=a.f.length,c=0;c<b;c++){var d=a.f[c].split(":"),e=d[0].replace(/\+/g," "),f=["n4"];if(2<=d.length){var g;var m=d[1];g=[];if(m)for(var m=m.split(","),h=m.length,l=0;l<h;l++){var k;k=m[l];if(k.match(/^[\w-]+$/)){var n=Ca.exec(k.toLowerCase());if(null==n)k="";else{k=n[2];k=null==k||""==k?"n":Ba[k];n=n[1];if(null==n||""==n)n="4";else var r=Aa[n],n=r?r:isNaN(n)?"4":n.substr(0,1);k=[k,n].join("")}}else k="";k&&g.push(k)}0<g.length&&(f=g);3==d.length&&(d=d[2],g=[],d=d?d.split(","):
g,0<d.length&&(d=za[d[0]])&&(a.c[e]=d))}a.c[e]||(d=za[e])&&(a.c[e]=d);for(d=0;d<f.length;d+=1)a.a.push(new G(e,f[d]))}};function Ea(a,b){this.c=a;this.a=b}var Fa={Arimo:!0,Cousine:!0,Tinos:!0};Ea.prototype.load=function(a){var b=new B,c=this.c,d=new ta(this.a.api,this.a.text),e=this.a.families;va(d,e);var f=new ya(e);Da(f);z(c,wa(d),C(b));E(b,function(){a(f.a,f.c,Fa)})};function Ga(a,b){this.c=a;this.a=b}Ga.prototype.load=function(a){var b=this.a.id,c=this.c.o;b?A(this.c,(this.a.api||"https://use.typekit.net")+"/"+b+".js",function(b){if(b)a([]);else if(c.Typekit&&c.Typekit.config&&c.Typekit.config.fn){b=c.Typekit.config.fn;for(var e=[],f=0;f<b.length;f+=2)for(var g=b[f],m=b[f+1],h=0;h<m.length;h++)e.push(new G(g,m[h]));try{c.Typekit.load({events:!1,classes:!1,async:!0})}catch(l){}a(e)}},2E3):a([])};function Ha(a,b){this.c=a;this.f=b;this.a=[]}Ha.prototype.load=function(a){var b=this.f.id,c=this.c.o,d=this;b?(c.__webfontfontdeckmodule__||(c.__webfontfontdeckmodule__={}),c.__webfontfontdeckmodule__[b]=function(b,c){for(var g=0,m=c.fonts.length;g<m;++g){var h=c.fonts[g];d.a.push(new G(h.name,ga("font-weight:"+h.weight+";font-style:"+h.style)))}a(d.a)},A(this.c,(this.f.api||"https://f.fontdeck.com/s/css/js/")+ea(this.c)+"/"+b+".js",function(b){b&&a([])})):a([])};var Y=new oa(window);Y.a.c.custom=function(a,b){return new sa(b,a)};Y.a.c.fontdeck=function(a,b){return new Ha(b,a)};Y.a.c.monotype=function(a,b){return new ra(b,a)};Y.a.c.typekit=function(a,b){return new Ga(b,a)};Y.a.c.google=function(a,b){return new Ea(b,a)};var Z={load:p(Y.load,Y)}; true?!(__WEBPACK_AMD_DEFINE_RESULT__ = (function(){return Z}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):undefined;}());


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

if (document.querySelector('.js-quiz')) {
  __webpack_require__(/*! ./quiz */ "./src/js/quiz.js");
}

if (document.querySelector('.js-result')) {
  __webpack_require__(/*! ./result */ "./src/js/result.js");
}

/***/ }),

/***/ "./src/js/kakao.js":
/*!*************************!*\
  !*** ./src/js/kakao.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var require;var require;function _typeof2(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

/**
 * Kakao Javascript SDK for Kakao Open Platform Service - v1.39.0
 *
 * Copyright 2017 Kakao Corp.
 *
 * Â 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *
 *
 * OSS Notice | KakaoSDK-Javascript
 *
 * This application is Copyright Â© Kakao Corp. All rights reserved.
 * The following sets forth attribution notices for third party software that may be contained in this application.
 * If you have any questions or concerns, please contact us at opensource@kakaocorp.com
 *
 *
 *  crypto-js
 *
 * https://github.com/brix/crypto-js
 *
 * Copyright 2009-2013 Jeff Mott
 * Copyright 2013-2016 Evan Vosberg
 *
 * MIT License
 *
 *
 *  easyXDM
 *
 * https://github.com/oyvindkinsey/easyXDM/
 *
 * Copyright 2009-2011 Ãyvind Sean Kinsey, oyvind@kinsey.no
 *
 * MIT License
 *
 *
 *  ES6-Promise
 *
 * https://github.com/stefanpenner/es6-promise
 *
 * Copyright 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors
 *
 * MIT License
 *
 *
 *  Underscore
 *
 * https://github.com/jashkenas/underscore
 *
 * Copyright 2009-2017 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 *
 * MIT License
 *
 *
 *  Web2App Library
 *
 * https://github.com/kakao/web2app
 *
 * Copyright 2015 Kakao Corp. http://www.kakaocorp.com
 *
 * MIT License
 *
 *
 * ``````````
 * MIT License
 *
 * Copyright (c) <year> <copyright holders>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ``````````
 */
var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
  return _typeof2(obj);
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
};

(function (f) {
  if (( false ? undefined : _typeof(exports)) === "object" && typeof module !== "undefined") {
    module.exports = f();
  } else if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (f),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else { var g; }
})(function () {
  var define, module, exports;
  return function () {
    function r(e, n, t) {
      function o(i, f) {
        if (!n[i]) {
          if (!e[i]) {
            var c = "function" == typeof require && require;
            if (!f && c) return require(i, !0);
            if (u) return u(i, !0);
            var a = new Error("Cannot find module '" + i + "'");
            throw a.code = "MODULE_NOT_FOUND", a;
          }

          var p = n[i] = {
            exports: {}
          };
          e[i][0].call(p.exports, function (r) {
            var n = e[i][1][r];
            return o(n || r);
          }, p, p.exports, r, e, n, t);
        }

        return n[i].exports;
      }

      for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) {
        o(t[i]);
      }

      return o;
    }

    return r;
  }()({
    1: [function (require, module, exports) {
      var process = module.exports = {};
      var cachedSetTimeout;
      var cachedClearTimeout;

      function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
      }

      function defaultClearTimeout() {
        throw new Error('clearTimeout has not been defined');
      }

      (function () {
        try {
          if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
          } else {
            cachedSetTimeout = defaultSetTimout;
          }
        } catch (e) {
          cachedSetTimeout = defaultSetTimout;
        }

        try {
          if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
          } else {
            cachedClearTimeout = defaultClearTimeout;
          }
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
        }
      })();

      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          return setTimeout(fun, 0);
        }

        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
        }

        try {
          return cachedSetTimeout(fun, 0);
        } catch (e) {
          try {
            return cachedSetTimeout.call(null, fun, 0);
          } catch (e) {
            return cachedSetTimeout.call(this, fun, 0);
          }
        }
      }

      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          return clearTimeout(marker);
        }

        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
        }

        try {
          return cachedClearTimeout(marker);
        } catch (e) {
          try {
            return cachedClearTimeout.call(null, marker);
          } catch (e) {
            return cachedClearTimeout.call(this, marker);
          }
        }
      }

      var queue = [];
      var draining = false;
      var currentQueue;
      var queueIndex = -1;

      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return;
        }

        draining = false;

        if (currentQueue.length) {
          queue = currentQueue.concat(queue);
        } else {
          queueIndex = -1;
        }

        if (queue.length) {
          drainQueue();
        }
      }

      function drainQueue() {
        if (draining) {
          return;
        }

        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
        var len = queue.length;

        while (len) {
          currentQueue = queue;
          queue = [];

          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run();
            }
          }

          queueIndex = -1;
          len = queue.length;
        }

        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
      }

      process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);

        if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
          }
        }

        queue.push(new Item(fun, args));

        if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
        }
      };

      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }

      Item.prototype.run = function () {
        this.fun.apply(null, this.array);
      };

      process.title = 'browser';
      process.browser = true;
      process.env = {};
      process.argv = [];
      process.version = '';
      process.versions = {};

      function noop() {}

      process.on = noop;
      process.addListener = noop;
      process.once = noop;
      process.off = noop;
      process.removeListener = noop;
      process.removeAllListeners = noop;
      process.emit = noop;
      process.prependListener = noop;
      process.prependOnceListener = noop;

      process.listeners = function (name) {
        return [];
      };

      process.binding = function (name) {
        throw new Error('process.binding is not supported');
      };

      process.cwd = function () {
        return '/';
      };

      process.chdir = function (dir) {
        throw new Error('process.chdir is not supported');
      };

      process.umask = function () {
        return 0;
      };
    }, {}],
    2: [function (require, module, exports) {
      (function (setImmediate, clearImmediate) {
        var nextTick = require('process/browser.js').nextTick;

        var apply = Function.prototype.apply;
        var slice = Array.prototype.slice;
        var immediateIds = {};
        var nextImmediateId = 0;

        exports.setTimeout = function () {
          return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
        };

        exports.setInterval = function () {
          return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
        };

        exports.clearTimeout = exports.clearInterval = function (timeout) {
          timeout.close();
        };

        function Timeout(id, clearFn) {
          this._id = id;
          this._clearFn = clearFn;
        }

        Timeout.prototype.unref = Timeout.prototype.ref = function () {};

        Timeout.prototype.close = function () {
          this._clearFn.call(window, this._id);
        };

        exports.enroll = function (item, msecs) {
          clearTimeout(item._idleTimeoutId);
          item._idleTimeout = msecs;
        };

        exports.unenroll = function (item) {
          clearTimeout(item._idleTimeoutId);
          item._idleTimeout = -1;
        };

        exports._unrefActive = exports.active = function (item) {
          clearTimeout(item._idleTimeoutId);
          var msecs = item._idleTimeout;

          if (msecs >= 0) {
            item._idleTimeoutId = setTimeout(function onTimeout() {
              if (item._onTimeout) item._onTimeout();
            }, msecs);
          }
        };

        exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function (fn) {
          var id = nextImmediateId++;
          var args = arguments.length < 2 ? false : slice.call(arguments, 1);
          immediateIds[id] = true;
          nextTick(function onNextTick() {
            if (immediateIds[id]) {
              if (args) {
                fn.apply(null, args);
              } else {
                fn.call(null);
              }

              exports.clearImmediate(id);
            }
          });
          return id;
        };
        exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function (id) {
          delete immediateIds[id];
        };
      }).call(this, require("timers").setImmediate, require("timers").clearImmediate);
    }, {
      "process/browser.js": 1,
      "timers": 2
    }],
    3: [function (require, module, exports) {
      module.exports = function () {
        var _auth = require("./auth.js");

        function authByAccessToken() {
          return 'Bearer ' + _auth.getAccessToken();
        }

        function authByAppKey() {
          return 'KakaoAK ' + _auth.getAppKey();
        }

        return {
          accessToken: authByAccessToken,
          appKey: authByAppKey,
          tokenOrKey: _auth.getAccessToken() ? authByAccessToken : authByAppKey
        };
      }();
    }, {
      "./auth.js": 6
    }],
    4: [function (require, module, exports) {
      module.exports = function () {
        var API = {};

        require('../vendor/es6-promise.js');

        var _easyXDM = require('../vendor/easyXDM.js');

        var _ = require('./util.js');

        var _k = require('./common.js');

        var authTypes = require('./api.authType');

        var _rpc;

        API.request = function (settings) {
          settings = _k.processRules(settings, rules.request, 'API.request');
          var url = settings.url;
          var dataRules = rules.api[url].data;

          if (dataRules) {
            settings.data = _k.processRules(settings.data, rules.api[url].data, 'API.request - ' + url);
          }

          return new Promise(function (resolve, reject) {
            getConfig().then(function (config) {
              getRPC().request(config, function (res) {
                settings.success(res);
                settings.always(res);
                resolve(res);
              }, function (xdmErr) {
                var err = parseErrorObj(xdmErr);
                settings.fail(err);
                settings.always(err);
                reject(err);
              });
            }, function (err) {
              reject(err);
            });
          });

          function getConfig() {
            var serializedData = {};

            _.each(settings.data, function (value, key) {
              serializedData[key] = _.isString(value) ? value : JSON.stringify(value);
            });

            var config = {
              url: url,
              method: rules.api[url].method,
              headers: {
                KA: _k.KAKAO_AGENT,
                'Cache-Control': 'no-cache',
                Pragma: 'no-cache'
              },
              data: serializedData
            };
            var getAuthHeader = rules.api[url].authType || authTypes.accessToken;
            config.headers['Authorization'] = getAuthHeader();
            return new Promise(function (resolve, reject) {
              if (isFileRequired(url) || settings.data.file) {
                if (!settings.files && !settings.data.file) {
                  throw new _k.KakaoError("'files' parameter should be set for " + url);
                }

                getFileConfig(settings.files || settings.data.file).then(function (fileConfig) {
                  var searchParams = [];

                  for (var prop in serializedData) {
                    if (prop !== 'file') searchParams.push(prop + '=' + encodeURIComponent(serializedData[prop]));
                  }

                  if (searchParams.length > 0) config.url = config.url + '?' + searchParams.join('&');
                  config.file = fileConfig;
                  resolve(config);
                }, function (err) {
                  reject(err);
                });
              } else {
                resolve(config);
              }
            });
          }

          function getFileConfig(files) {
            return new Promise(function (resolve, reject) {
              var fileDataPromises = _.map(files, function (file) {
                return _k.serializeFile(file).then(function (stringified) {
                  return {
                    name: file.name,
                    type: file.type,
                    str: stringified
                  };
                });
              });

              Promise.all(fileDataPromises).then(function (fileDatas) {
                resolve({
                  paramName: 'file',
                  data: fileDatas
                });
              }, function (err) {
                reject(err);
              });
            });
          }

          function parseErrorObj(easyXDMError) {
            try {
              _k.logDebug(easyXDMError);

              var xhrError = easyXDMError.message;
              return JSON.parse(xhrError.responseText);
            } catch (ex) {
              return {
                code: -777,
                msg: 'Unknown error'
              };
            }
          }
        };

        API.createAPIAlias = function (defaultSettings) {
          return function (settings) {
            settings = settings || {};

            _.defaults(settings, defaultSettings);

            return API.request(settings);
          };
        };

        function getRPC() {
          if (!_rpc) {
            _rpc = _k.guardCreateEasyXDM(function () {
              return new _easyXDM.Rpc({
                remote: _k.URL.apiRemote
              }, {
                remote: {
                  request: {}
                }
              });
            });
          }

          return _rpc;
        }

        function isFileRequired(url) {
          return url === '/v1/api/story/upload/multi' || url === '/v2/api/talk/message/image/upload';
        }

        var postApiCommonParams = {
          permission: _.isOneOf(['A', 'F', 'M']),
          enable_share: _.isBoolean,
          android_exec_param: _.isString,
          ios_exec_param: _.isString,
          android_market_param: _.isString,
          ios_market_param: _.isString
        };
        var secureResource = {
          secure_resource: _.isBoolean
        };
        var rules = {
          request: {
            required: {
              url: function url(_url) {
                return _.isOneOf(_.keys(rules.api))(_url);
              }
            },
            optional: {
              data: _.isObject,
              files: function files(obj) {
                return _.passesOneOf([_.isArray, _.isFileList])(obj) && _.every(obj, _.passesOneOf([_.isFile, _.isBlob]));
              },
              file: _.isFile,
              success: _.isFunction,
              fail: _.isFunction,
              always: _.isFunction
            },
            defaults: {
              data: {},
              success: _.emptyFunc,
              fail: _.emptyFunc,
              always: _.emptyFunc
            }
          },
          api: {
            '/v1/user/signup': {
              method: 'post',
              data: {
                optional: {
                  properties: _.isObject
                }
              }
            },
            '/v1/user/unlink': {
              method: 'post'
            },
            '/v2/user/me': {
              method: 'get',
              data: {
                optional: _.extend({
                  property_keys: _.isArray
                }, secureResource)
              }
            },
            '/v1/user/logout': {
              method: 'post',
              data: {}
            },
            '/v1/user/update_profile': {
              method: 'post',
              data: {
                required: {
                  properties: _.isObject
                }
              }
            },
            '/v1/api/talk/profile': {
              method: 'get',
              data: {
                optional: secureResource
              }
            },
            '/v1/api/talk/memo/send': {
              method: 'post',
              data: {
                required: {
                  template_id: _.passesOneOf([_.isNumber, _.isString])
                },
                optional: {
                  args: _.isString
                }
              }
            },
            '/v2/api/talk/memo/send': {
              method: 'post',
              data: {
                required: {
                  template_id: _.isNumber
                },
                optional: {
                  args: _.isString
                }
              }
            },
            '/v2/api/talk/memo/scrap/send': {
              method: 'post',
              data: {
                required: {
                  request_url: _.isString
                },
                optional: {
                  template_id: _.isNumber,
                  template_args: _.isObject
                }
              }
            },
            '/v2/api/talk/memo/default/send': {
              method: 'post',
              data: {
                required: {
                  template_object: _.isObject
                }
              }
            },
            '/v1/api/story/profile': {
              method: 'get',
              data: {
                optional: secureResource
              }
            },
            '/v1/api/story/isstoryuser': {
              method: 'get'
            },
            '/v1/api/story/mystory': {
              method: 'get',
              data: {
                required: {
                  id: _.isString
                }
              }
            },
            '/v1/api/story/mystories': {
              method: 'get',
              data: {
                optional: {
                  last_id: _.isString
                }
              }
            },
            '/v1/api/story/linkinfo': {
              method: 'get',
              data: {
                required: {
                  url: _.isString
                }
              }
            },
            '/v1/api/story/post/note': {
              method: 'post',
              data: {
                required: {
                  content: storyActivityContentValidator
                },
                optional: postApiCommonParams
              }
            },
            '/v1/api/story/post/photo': {
              method: 'post',
              data: {
                required: {
                  image_url_list: kageImageUrlListValidator
                },
                optional: _.extend({
                  content: storyActivityContentValidator
                }, postApiCommonParams)
              }
            },
            '/v1/api/story/post/link': {
              method: 'post',
              data: {
                required: {
                  link_info: _.isObject
                },
                optional: _.extend({
                  content: storyActivityContentValidator
                }, postApiCommonParams)
              }
            },
            '/v1/api/story/upload/multi': {
              method: 'post',
              data: {}
            },
            '/v1/emoticon/my_items': {
              method: 'get',
              data: {},
              authType: authTypes.appKey
            },
            '/v1/emoticon/item_resources': {
              method: 'get',
              data: {
                required: {
                  id: _.isString
                }
              },
              authType: authTypes.appKey
            },
            '/v1/api/story/delete/mystory': {
              method: 'delete',
              data: {
                required: {
                  id: _.isString
                }
              }
            },
            '/v2/emoticon/items': {
              method: 'get',
              authType: authTypes.tokenOrKey
            },
            '/v2/emoticon/item': {
              method: 'get',
              data: {
                required: {
                  id: _.passesOneOf([_.isNumber, _.isString])
                }
              },
              authType: authTypes.tokenOrKey
            },
            '/v2/emoticon/item_resources': {
              method: 'get',
              authType: authTypes.tokenOrKey
            },
            '/v2/emoticon/item_resource': {
              method: 'get',
              data: {
                required: {
                  id: _.passesOneOf([_.isNumber, _.isString])
                }
              },
              authType: authTypes.tokenOrKey
            },
            '/v2/api/kakaolink/talk/template/validate': {
              method: 'get',
              data: {
                required: {
                  link_ver: _.isString,
                  template_id: _.isNumber
                },
                optional: {
                  template_args: _.isObject
                }
              },
              authType: authTypes.appKey
            },
            '/v2/api/kakaolink/talk/template/scrap': {
              method: 'get',
              data: {
                required: {
                  link_ver: _.isString,
                  request_url: _.isString
                },
                optional: {
                  template_id: _.isNumber,
                  template_args: _.isObject
                }
              },
              authType: authTypes.appKey
            },
            '/v2/api/kakaolink/talk/template/default': {
              method: 'get',
              data: {
                required: {
                  link_ver: _.isString,
                  template_object: _.isObject
                }
              },
              authType: authTypes.appKey
            },
            '/v1/user/access_token_info': {
              method: 'get',
              data: {}
            },
            '/v2/api/talk/message/image/upload': {
              method: 'post',
              data: {
                required: {
                  file: _.isObject
                }
              },
              authType: authTypes.appKey
            },
            '/v2/api/talk/message/image/delete': {
              method: 'delete',
              data: {
                required: {
                  image_url: _.isString
                }
              },
              authType: authTypes.appKey
            },
            '/v2/api/talk/message/image/scrap': {
              method: 'post',
              data: {
                required: {
                  image_url: _.isString
                }
              },
              authType: authTypes.appKey
            },
            '/v1/vision/face/detect': {
              method: 'post',
              data: {
                optional: {
                  file: _.isObject,
                  image_url: _.isString,
                  threshold: _.isNumber
                }
              },
              authType: authTypes.appKey
            },
            '/v1/vision/product/detect': {
              method: 'post',
              data: {
                optional: {
                  file: _.isObject,
                  image_url: _.isString,
                  threshold: _.isNumber
                }
              },
              authType: authTypes.appKey
            },
            '/v1/vision/thumbnail/crop': {
              method: 'post',
              data: {
                required: {
                  width: _.isInteger,
                  height: _.isInteger
                },
                optional: {
                  file: _.isObject,
                  image_url: _.isString
                }
              },
              authType: authTypes.appKey
            },
            '/v1/vision/thumbnail/detect': {
              method: 'post',
              data: {
                required: {
                  width: _.isInteger,
                  height: _.isInteger
                },
                optional: {
                  file: _.isObject,
                  image_url: _.isString
                }
              },
              authType: authTypes.appKey
            },
            '/v1/vision/multitag/generate': {
              method: 'post',
              data: {
                optional: {
                  file: _.isObject,
                  image_url: _.isString
                }
              },
              authType: authTypes.appKey
            },
            '/v1/vision/adult/detect': {
              method: 'post',
              data: {
                optional: {
                  file: _.isObject,
                  image_url: _.isString
                }
              },
              authType: authTypes.appKey
            },
            '/v1/vision/text/detect': {
              method: 'post',
              data: {
                optional: {
                  file: _.isObject
                }
              },
              authType: authTypes.appKey
            },
            '/v1/vision/text/recognize': {
              method: 'post',
              data: {
                optional: {
                  file: _.isObject,
                  boxes: _.passesOneOf([_.isString, _.isArray])
                }
              },
              authType: authTypes.appKey
            },
            '/v1/translation/translate': {
              method: 'post',
              data: {
                required: {
                  query: _.isString,
                  src_lang: _.isString,
                  target_lang: _.isString
                }
              },
              authType: authTypes.appKey
            },
            '/v1/friends': {
              method: 'get',
              data: {
                optional: _.extend({
                  offset: _.isNumber,
                  limit: _.isNumber,
                  order: _.isString,
                  friend_order: _.isString
                }, secureResource)
              }
            },
            '/v1/user/service/terms': {
              method: 'get'
            },
            '/v1/api/talk/plusfriends': {
              method: 'get',
              data: {
                optional: _.extend({
                  plus_friend_public_ids: _.isArray
                })
              }
            },
            '/v1/user/shipping_address': {
              method: 'get',
              data: {
                optional: _.extend({
                  address_id: _.isNumber,
                  from_updated_at: _.isNumber,
                  page_size: _.isNumber
                })
              }
            },
            '/v1/api/talk/friends': {
              method: 'get',
              data: {
                optional: _.extend({
                  offset: _.isNumber,
                  limit: _.isNumber,
                  order: _.isString
                }, secureResource)
              }
            },
            '/v1/api/talk/friends/message/send': {
              method: 'post',
              data: {
                required: {
                  template_id: _.isNumber,
                  receiver_uuids: _.isArray,
                  receiver_id_type: _.isString
                },
                optional: {
                  template_args: _.isObject
                },
                defaults: function defaults() {
                  return {
                    receiver_id_type: 'uuid'
                  };
                }
              }
            },
            '/v1/api/talk/friends/message/scrap/send': {
              method: 'post',
              data: {
                required: {
                  request_url: _.isString,
                  receiver_uuids: _.isArray,
                  receiver_id_type: _.isString
                },
                optional: {
                  template_id: _.isNumber,
                  template_args: _.isObject
                },
                defaults: function defaults() {
                  return {
                    receiver_id_type: 'uuid'
                  };
                }
              }
            },
            '/v1/api/talk/friends/message/default/send': {
              method: 'post',
              data: {
                required: {
                  template_object: _.isObject,
                  receiver_uuids: _.isArray,
                  receiver_id_type: _.isString
                },
                defaults: function defaults() {
                  return {
                    receiver_id_type: 'uuid'
                  };
                }
              }
            },
            '/v1/api/talk/wishlist/add': {
              method: 'post',
              data: {
                required: {
                  item_id: _.isNumber,
                  item_name: _.isString,
                  item_url: _.isString,
                  price: _.isNumber,
                  image_url: _.isString
                },
                optional: {
                  store_key: _.isString,
                  discount_price: _.isNumber,
                  discount_rate: _.isNumber,
                  image_width: _.isNumber,
                  image_height: _.isNumber,
                  oneclick_plugin_id: _.isString,
                  oneclick_id: _.isString,
                  option_plugin_id: _.isString,
                  product_id: _.isString
                }
              }
            }
          }
        };

        function storyActivityContentValidator(obj) {
          if (!_.isString(obj)) {
            return false;
          }

          if (obj.length === 0 || obj.length > 2048) {
            throw new _k.KakaoError('content length should be between 0 and 2048');
          }

          return true;
        }

        function kageImageUrlListValidator(obj) {
          if (!_.isArray(obj)) {
            return false;
          }

          return _.every(obj, function (path) {
            if (!_.isString(path)) {
              return false;
            }

            if (_.isURL(path)) {
              throw new _k.KakaoError("url in image_url_list should be a kage url, obtained from '/v1/api/story/upload/multi'.");
            }

            return true;
          });
        }

        API.cleanup = function () {
          if (_rpc) {
            _rpc.destroy();

            _rpc = null;
          }
        };

        return API;
      }();
    }, {
      "../vendor/easyXDM.js": 28,
      "../vendor/es6-promise.js": 29,
      "./api.authType": 3,
      "./common.js": 11,
      "./util.js": 24
    }],
    5: [function (require, module, exports) {
      module.exports = function () {
        var _k = require('./common.js');

        return {
          getTranId: function getTranId() {
            var tranId = Math.random().toString(36).slice(2) + _k.RUNTIME.appKey + new Date().getTime().toString(36);
            return tranId.slice(0, 60);
          },
          checkAuthorize: function checkAuthorize(url, onResponse) {
            var xhr = new XMLHttpRequest();

            if (typeof xhr.withCredentials !== 'undefined') {
              xhr.open('GET', url);
              xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

              xhr.onload = function () {
                onResponse(xhr);
              };

              xhr.send();
            } else {
              var xdr = new XDomainRequest();
              xdr.open("get", url);

              xdr.onload = function () {
                var xdrResponse = {
                  status: xdr.responseText ? 200 : "error",
                  response: xdr.responseText
                };
                onResponse(xdrResponse);
              };

              setTimeout(function () {
                xdr.send();
              }, 0);
            }
          },
          getToken: function getToken(url, data, onResponse) {
            var xhr = new XMLHttpRequest();

            if (typeof xhr.withCredentials !== 'undefined') {
              xhr.open('POST', url);
              xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

              xhr.onreadystatechange = function () {
                if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
                  onResponse(xhr);
                }
              };

              xhr.send(data);
            } else {
              var xdr = new XDomainRequest();
              xdr.open("post", url);

              xdr.onload = function () {
                var xdrResponse = {
                  status: xdr.responseText ? 200 : "error",
                  response: xdr.responseText
                };
                onResponse(xdrResponse);
              };

              setTimeout(function () {
                xdr.send(data);
              }, 0);
            }
          }
        };
      }();
    }, {
      "./common.js": 11
    }],
    6: [function (require, module, exports) {
      module.exports = function () {
        var Auth = {};

        var _easyXDM = require('../vendor/easyXDM.js');

        var _crypto = require('../vendor/CryptoJS.js');

        var _ = require('./util.js');

        var _k = require('./common.js');

        var _auth = require('./auth.common.js');

        var _loginWithTalk = require('./auth.withTalk.js');

        var _poller = require('./auth.withTalk.poller.js');

        var _eventObserver = require('./common/everntObserver');

        var webViewChecker = require('./webviewchecker.js')();

        var cleanups = [];
        var LOGIN_POPUP_NAME = '_blank';
        var CHANNEL_POPUP_NAME = 'kakaostory_channel_select';

        function _getPopupFeatures() {
          function getLeftWindow() {
            if (window.screenLeft) {
              return window.screenLeft;
            }

            if (window.screenX) {
              return window.screenX;
            }

            return 0;
          }

          function getTopWindow() {
            if (window.screenTop) {
              return window.screenTop;
            }

            if (window.screenY) {
              return window.screenY;
            }

            return 0;
          }

          var popupX = screen.width / 2 - 480 / 2 + getLeftWindow();
          var popupY = screen.height / 2 - 700 / 2 + getTopWindow();
          return 'width=480, height=700, scrollbars=yes, resizable=1, left=' + popupX + ', top=' + popupY;
        }

        Auth.createLoginButton = function (settings) {
          settings = _k.processRules(settings, rules.createLoginButton, 'Auth.createLoginButton');

          var containerElement = _.getElement(settings.container);

          if (!containerElement) {
            throw new _k.KakaoError('container is required for Kakao login button: pass in element or id');
          }

          var buttonSize = settings.size === 'medium' ? '02' : settings.size === 'small' ? '03' : '01';
          var buttonImage = _k.URL.authDomain + "/public/widget/login/" + settings.lang + "/" + settings.lang + "_" + buttonSize + "_medium.png";
          var onHoverButtonImage = _k.URL.authDomain + "/public/widget/login/" + settings.lang + "/" + settings.lang + "_" + buttonSize + "_medium_press.png";
          containerElement.innerHTML = "<img \n        id=\"kakao-login-btn\" \n        src=" + buttonImage + "\n        style=\"cursor: pointer\"\n        onmouseover=this.src='" + onHoverButtonImage + "' \n        onmouseout=this.src='" + buttonImage + "' />";

          containerElement.onclick = function () {
            var stateToken = _.getRandomString() + _.getRandomString();

            if (_loginWithTalk.isSupport() && settings.throughTalk) {
              _loginThroughTalk(settings, stateToken);
            } else if (webViewChecker.isNewerAndroidKakaoTalkWebView()) {
              if (!settings.redirectUri) {
                var androidTalkWebViewLoginUrl = _AndroidWebViewLogin(settings, stateToken, _k.URL.talkLoginRedirectUri);

                _loginThroughTalk(settings, stateToken, androidTalkWebViewLoginUrl);
              } else {
                var url = _redirectLoginThroughWeb(settings);

                location.href = url;
              }
            } else {
              if (!settings.redirectUri) {
                var url = _loginThroughWeb(settings, stateToken);

                if (!(_k.UA.browser.msie && parseInt(_k.UA.browser.version.major) <= 9)) {
                  _webLoginAddEvent(settings, stateToken);
                }

                _k.windowOpen(url, LOGIN_POPUP_NAME, _getPopupFeatures());
              } else {
                var url = _redirectLoginThroughWeb(settings);

                location.href = url;
              }
            }

            _eventObserver.dispatch('LOGIN_START');
          };
        };

        var _loginSettings = {};

        Auth.login = function (settings) {
          settings = _k.processRules(settings, rules.login, 'Auth.login');

          var stateToken = _.getRandomString() + _.getRandomString();

          if (_loginWithTalk.isSupport() && settings.throughTalk) {
            _loginThroughTalk(settings, stateToken);
          } else if (webViewChecker.isNewerAndroidKakaoTalkWebView()) {
            if (!settings.redirectUri) {
              var androidTalkWebViewLoginUrl = _AndroidWebViewLogin(settings, stateToken, _k.URL.talkLoginRedirectUri);

              _loginThroughTalk(settings, stateToken, androidTalkWebViewLoginUrl);
            } else {
              var url = _redirectLoginThroughWeb(settings);

              location.href = url;
            }
          } else {
            if (!settings.redirectUri) {
              var url = _loginThroughWeb(settings, stateToken);

              if (!(_k.UA.browser.msie && parseInt(_k.UA.browser.version.major) <= 9)) {
                _webLoginAddEvent(settings, stateToken);
              }

              _k.windowOpen(url, LOGIN_POPUP_NAME, _getPopupFeatures());
            } else {
              var url = _redirectLoginThroughWeb(settings);

              location.href = url;
            }
          }

          _eventObserver.dispatch('LOGIN_START');
        };

        Auth.authorize = function (settings) {
          settings = _k.processRules(settings, rules.authorize, 'Auth.authorize');
          var popup;

          if (settings.autoLogin && !/KAKAOTALK/i.test(_k.UA.ua)) {
            location.href = settings.redirectUri + "?error=auto_login&error_description=NOT_SUPPORTED_BROWSER" + (settings.state ? '&state=' + settings.state : '');
            return false;
          }

          function isSupport() {
            if (_k.UA.os.ios || _k.UA.os.android) {
              return !/KAKAOTALK/i.test(_k.UA.ua);
            } else {
              return false;
            }
          }

          var isEasyLogin = isSupport() && settings.throughTalk && !settings.autoLogin;

          var authTranId = _auth.getTranId();

          function onResponse(res) {
            if (res.status === 200 && res.response) {
              var response = JSON.parse(res.response);

              if (response.status == 'ok' && response.code) {
                _poller.stop();

                popup && popup.close && popup.close();
                var url = settings.redirectUri + "?code=" + response.code + (response.state ? '&state=' + response.state : '');
                location.href = url;
              } else if (response.status == 'error' && (response.error_code == '500' || response.error_code == '600')) {
                _poller.stop();

                popup && popup.close && popup.close();
                location.href = settings.redirectUri + "?error=" + response.error + "&error_description=" + response.error_description + (response.state ? '&state=' + response.state : '');
              }

              if (!isEasyLogin && popup && popup.closed) {
                _poller.stop();
              }
            }
          }

          _poller.start(function () {
            if (authTranId) {
              _auth.checkAuthorize(_k.URL.authDomain + "/apiweb/code.json?client_id=" + _k.RUNTIME.appKey + "&auth_tran_id=" + authTranId, onResponse);
            }
          }, function () {
            location.href = settings.redirectUri + "?error=timeout&error_description=LOGIN_TIMEOUT" + (settings.state ? '&state=' + settings.state : '');
          });

          var commonAuthParams = _.extend(getCommonAuthParams(settings), getExtraParams(settings), {
            redirect_uri: settings.redirectUri,
            response_type: 'code',
            auth_tran_id: authTranId
          });

          var webAuthParams = _.extend({}, commonAuthParams, {
            ka: _k.KAKAO_AGENT,
            is_popup: settings.isPopup
          });

          var authUrl = _k.URL.authorize + '?' + _.buildQueryString(webAuthParams);

          function createAndroidLoginIntent(fallbackUrl, params) {
            var intent = ['intent:#Intent', 'action=com.kakao.talk.intent.action.CAPRI_LOGGED_IN_ACTIVITY', 'launchFlags=0x08880000', 'S.com.kakao.sdk.talk.appKey=' + _k.RUNTIME.appKey, 'S.com.kakao.sdk.talk.redirectUri=' + settings.redirectUri, 'S.com.kakao.sdk.talk.kaHeader=' + _k.KAKAO_AGENT, 'S.com.kakao.sdk.talk.extraparams=' + encodeURIComponent(JSON.stringify(params))];

            if (settings.state) {
              intent.push('S.com.kakao.sdk.talk.state=' + settings.state);
            }

            intent.push('S.browser_fallback_url=' + encodeURIComponent(fallbackUrl), 'end;');
            return intent.join(';');
          }

          if (isEasyLogin) {
            var easyLoginAuthParams = _.extend({}, commonAuthParams, {
              is_popup: true
            });

            if (_k.UA.os.android) {
              var androidTalkLogin = createAndroidLoginIntent(authUrl, easyLoginAuthParams);

              if (settings.isPopup) {
                popup = _k.windowOpen(androidTalkLogin, LOGIN_POPUP_NAME, _getPopupFeatures());
              } else {
                location.href = androidTalkLogin;
              }
            } else {
              var iosEasyLoginFallback = encodeURIComponent(_k.URL.authorize + '?' + _.buildQueryString(settings.isPopup ? easyLoginAuthParams : commonAuthParams));
              var iosEasyLogin = encodeURIComponent(_k.URL.authorize + '?' + _.buildQueryString(easyLoginAuthParams) + '&ka=' + encodeURIComponent(_k.KAKAO_AGENT));
              var talkWebviewUrl = _k.URL.talkInappScheme + "?url=" + iosEasyLogin;
              var iosTalkLogin = _k.URL.universalKakaoLink + encodeURIComponent(talkWebviewUrl) + '&web=' + iosEasyLoginFallback;

              if (settings.isPopup) {
                popup = _k.windowOpen(iosTalkLogin, LOGIN_POPUP_NAME, _getPopupFeatures());
              } else {
                location.href = iosTalkLogin;
              }
            }
          } else {
            if (settings.isPopup) {
              popup = _k.windowOpen(authUrl, LOGIN_POPUP_NAME, _getPopupFeatures());
            } else {
              location.href = authUrl;
            }
          }

          _eventObserver.dispatch('LOGIN_START');
        };

        Auth.autoLogin = function (settings) {
          settings = _k.processRules(settings, rules.autoLogin, 'Auth.autoLogin');

          if (webViewChecker.isIOSKakaoTalkWebView() || webViewChecker.isAndroidKakaoTalkWebView()) {
            var stateToken = _.getRandomString() + _.getRandomString();

            var androidTalkWebViewLoginUrl = _login(settings, stateToken, _k.URL.talkLoginRedirectUri);

            _loginThroughTalk(settings, stateToken, androidTalkWebViewLoginUrl);
          } else {
            var error = {
              error: 'auto_login',
              error_description: 'Auto-login is only supported by KakaoTalk InAppBrowser.',
              error_code: '400',
              status: 'error'
            };
            runCallback(error, settings);
          }

          _eventObserver.dispatch('LOGIN_START');
        };

        function _login(settings, stateToken, redirectUri) {
          function getAuthUrl() {
            var params = _.extend({
              redirect_uri: redirectUri,
              response_type: 'code',
              state: stateToken,
              ka: _k.KAKAO_AGENT,
              origin: window.location.origin,
              auto_login: 'true'
            }, getCommonAuthParams(settings));

            return _k.URL.authorize + '?' + _.buildQueryString(params);
          }

          return getAuthUrl();
        }

        function _AndroidWebViewLogin(settings, stateToken, androidTalkWebViewLoginUrl) {
          function getAuthUrl() {
            var params = _.extend({
              redirect_uri: androidTalkWebViewLoginUrl,
              response_type: 'code',
              state: stateToken,
              ka: _k.KAKAO_AGENT,
              origin: window.location.origin
            }, getCommonAuthParams(settings), getExtraParams(settings));

            return _k.URL.authorize + '?' + _.buildQueryString(params);
          }

          return getAuthUrl();
        }

        var _issueAccessTokenProxy;

        Auth.issueAccessToken = function (settings) {
          settings = _k.processRules(settings, rules.issueAccessToken, 'Auth.issueAccessToken');

          if (!_issueAccessTokenProxy) {
            _issueAccessTokenProxy = getProxy({}, function (response) {
              handleAuthResponse(response, settings);
            });
          }

          _issueAccessTokenProxy.getAccessToken(settings.code, _k.RUNTIME.appKey, settings.redirectUri);
        };

        var _loginProxyWithTalk;

        var _loginWindow;

        function _closePopup() {
          if (_loginWindow && _loginWindow.close) {
            _loginWindow.close();
          }
        }

        Auth.getLoginUrl = function (settings, stateToken, redirectUri) {
          function getAuthUrl() {
            var params = _.extend({
              redirect_uri: 'JS-SDK',
              response_type: 'code',
              state: stateToken,
              ka: _k.KAKAO_AGENT,
              origin: window.location.origin
            }, getCommonAuthParams(settings));

            if (redirectUri) {
              params.redirect_uri = redirectUri;
            }

            return _k.URL.authorize + '?' + _.buildQueryString(params);
          }

          return getAuthUrl();
        };

        var prevCode;

        function _loginThroughTalk(settings, stateToken, talkLoginUrl) {
          if (!_loginProxyWithTalk) {
            _loginProxyWithTalk = getProxy({}, function (response) {
              if (response.status == 'error' && (response.error_code == '500' || response.error_code == '600')) {
                _poller.stop();

                var error = {
                  error: response.error_description,
                  error_description: response.error_description,
                  error_code: response.error_code,
                  status: response.status
                };
                handleAuthResponse(error, settings);
              }

              if (response.status) {
                if (response.status == 'ok') {
                  _poller.stop();

                  if (prevCode === response.code) {
                    return;
                  }

                  prevCode = response.code;

                  _loginProxyWithTalk.getAccessToken(response.code, _k.RUNTIME.appKey, _k.UA.os.ios && !talkLoginUrl ? _k.URL.redirectUri : _k.URL.talkLoginRedirectUri, settings.approvalType);

                  _closePopup();
                } else {
                  if (_loginWindow.location.href == 'about:blank' && _k.UA.os.ios) {
                    _closePopup();
                  }
                }
              } else {
                handleAuthResponse(response, settings);
              }
            });
            cleanups.push(function () {
              _loginProxyWithTalk.destroy();

              _loginProxyWithTalk = null;
            });
          }

          if (talkLoginUrl) {
            if (!settings.redirectUri) {
              _k.windowOpen(talkLoginUrl, LOGIN_POPUP_NAME, _getPopupFeatures());
            } else {
              location.href = talkLoginUrl;
            }
          } else {
            var fallbackURL;

            if (!settings.redirectUri) {
              fallbackURL = _loginThroughWeb(settings, stateToken, _k.UA.os.ios ? _k.URL.redirectUri : _k.URL.talkLoginRedirectUri);
            } else {
              fallbackURL = _redirectLoginThroughWeb(settings);
            }

            var authParams = _.extend(getCommonAuthParams(settings), getExtraParams(settings));

            setTimeout(function () {
              _loginWindow = _loginWithTalk.login(stateToken, fallbackURL, authParams, settings.redirectUri);
            }, 500);
          }

          _poller.start(function () {
            if (stateToken) {
              _loginProxyWithTalk.getCode(stateToken, _k.RUNTIME.appKey);
            }
          }, function () {
            handleAuthResponse({
              error: 'timeout',
              description: 'Account login timed out. Please log in again.',
              error_description: 'Account login timed out. Please log in again.'
            }, settings);

            if (!settings.redirectUri) {
              _k.windowOpen(fallbackURL, LOGIN_POPUP_NAME, _getPopupFeatures());
            } else {
              location.href = fallbackURL;
            }
          });
        }

        function _redirectLoginThroughWeb(settings) {
          function getAuthUrl() {
            var params = _.extend({
              redirect_uri: settings.redirectUri,
              response_type: 'code',
              ka: _k.KAKAO_AGENT,
              origin: window.location.origin
            }, getCommonAuthParams(settings), getExtraParams(settings));

            return _k.URL.authorize + '?' + _.buildQueryString(params);
          }

          return getAuthUrl();
        }

        var _loginProxy;

        function _loginThroughWeb(settings, stateToken, androidTalkWebViewLoginUrl) {
          if (!_loginProxy) {
            _loginProxy = getProxy({}, function (response) {
              _poller.stop();

              var savedSettings = getSavedSettingsWithResponseState(response, _loginSettings);
              handleAuthResponse(response, savedSettings);
            });
            cleanups.push(function () {
              _loginProxy.destroy();

              _loginProxy = null;
            });
          }

          _loginSettings[stateToken] = settings;

          function getAuthUrl() {
            var redirect_uri;

            if (!settings.redirectUri) {
              redirect_uri = androidTalkWebViewLoginUrl ? androidTalkWebViewLoginUrl : 'kakaojs';
            } else {
              redirect_uri = settings.redirectUri;
            }

            var params = _.extend({
              redirect_uri: redirect_uri,
              response_type: 'code',
              state: stateToken,
              proxy: 'easyXDM_Kakao_' + _loginProxy.channel + '_provider',
              ka: _k.KAKAO_AGENT,
              origin: window.location.origin
            }, getCommonAuthParams(settings), getExtraParams(settings));

            return _k.URL.authorize + '?' + _.buildQueryString(params);
          }

          return getAuthUrl();
        }

        function _webLoginAddEvent(settings, stateToken) {
          _.addEvent(window, 'message', loginMessageHandler);

          function loginMessageHandler(ev) {
            if (/\.kakao\.com$/.test(ev.origin) && ev.data && typeof ev.data === 'string') {
              var arr = ev.data.split(' ');

              if (arr[1] === 'postResponse') {
                var response = JSON.parse(decodeURIComponent(arr[2]));
                handleAuthResponse(response, settings);

                _.removeEvent(window, 'message', loginMessageHandler);
              }
            }

            cleanups.push(function () {
              _.removeEvent(window, 'message', loginMessageHandler);
            });
          }
        }

        var _storyChannelProxy;

        var _selectStoryChannelSettings = {};

        Auth.selectStoryChannel = function (settings) {
          settings = _k.processRules(settings, rules.selectStoryChannel, 'Auth.selectStoryChannel');

          if (!_storyChannelProxy) {
            _storyChannelProxy = getProxy({}, function (response) {
              var savedSettings = getSavedSettingsWithResponseState(response, _selectStoryChannelSettings);
              runCallback(response, savedSettings);
            });
            cleanups.push(function () {
              _storyChannelProxy.destroy();

              _storyChannelProxy = null;
            });
          }

          var stateToken = _.getRandomString();

          _selectStoryChannelSettings[stateToken] = settings;
          window.open(getSelectStoryChannelUri(), CHANNEL_POPUP_NAME, _getPopupFeatures());

          function getSelectStoryChannelUri() {
            var params = _.extend({
              state: stateToken,
              proxy: 'easyXDM_Kakao_' + _storyChannelProxy.channel + '_provider',
              token: settings.extendedToken || ''
            }, getCommonAuthParams(settings));

            return _k.URL.storyChannel + '?' + _.buildQueryString(params);
          }
        };

        var defaultCallbacks = {
          success: _.emptyFunc,
          fail: _.emptyFunc,
          always: _.emptyFunc
        };

        var loginDefaultSettings = _.extend({
          throughTalk: true,
          persistAccessToken: true,
          persistRefreshToken: false
        }, defaultCallbacks);

        var loginCommonSettings = {
          success: _.isFunction,
          fail: _.isFunction,
          always: _.isFunction,
          persistAccessToken: _.isBoolean,
          persistRefreshToken: _.isBoolean,
          approvalType: _.isOneOf(['project']),
          scope: _.isString,
          throughTalk: _.isBoolean,
          plusFriendPublicId: _.isString,
          channelPublicId: _.isString,
          serviceTerms: _.isString,
          redirectUri: _.isString,
          state: _.isString
        };
        var rules = {
          createLoginButton: {
            required: {
              container: _.passesOneOf([_.isElement, _.isString])
            },
            optional: _.extend({
              lang: _.isOneOf(['en', 'kr']),
              size: _.isOneOf(['small', 'medium', 'large'])
            }, loginCommonSettings),
            defaults: _.extend({
              lang: 'kr',
              size: 'medium'
            }, loginDefaultSettings)
          },
          login: {
            optional: loginCommonSettings,
            defaults: loginDefaultSettings
          },
          authorize: {
            required: {
              redirectUri: _.isString
            },
            optional: {
              approvalType: _.isOneOf(['project']),
              scope: _.isString,
              throughTalk: _.isBoolean,
              plusFriendPublicId: _.isString,
              channelPublicId: _.isString,
              serviceTerms: _.isString,
              isPopup: _.isBoolean,
              state: _.isString,
              autoLogin: _.isBoolean
            },
            defaults: {
              throughTalk: true,
              isPopup: false
            }
          },
          autoLogin: {
            optional: {
              success: _.isFunction,
              fail: _.isFunction,
              always: _.isFunction
            },
            defaults: defaultCallbacks
          },
          issueAccessToken: {
            required: {
              code: _.isString,
              redirectUri: _.isString
            },
            optional: {
              success: _.isFunction,
              fail: _.isFunction,
              always: _.isFunction
            },
            defaults: defaultCallbacks
          },
          selectStoryChannel: {
            optional: {
              extendedToken: _.isString,
              success: _.isFunction,
              fail: _.isFunction,
              always: _.isFunction
            },
            defaults: defaultCallbacks
          }
        };

        function getProxy(config, responseHandler) {
          _.extend(config, {
            remote: _k.URL.loginWidget,
            channel: _.getRandomString()
          });

          return _k.guardCreateEasyXDM(function () {
            var proxy = new _easyXDM.Rpc(config, {
              local: {
                postResponse: responseHandler,
                getKakaoAgent: function getKakaoAgent() {
                  return _k.KAKAO_AGENT;
                }
              },
              remote: {
                getCode: {},
                getAccessToken: {},
                setClient: {},
                setStateToken: {},
                deleteAuthCookie: {}
              }
            });
            proxy.channel = config.channel;
            return proxy;
          });
        }

        function getSavedSettingsWithResponseState(response, settings) {
          if (!_.has(settings, response.stateToken)) {
            throw new _k.KakaoError('security error: #CST2');
          }

          var savedSettings = settings[response.stateToken];
          delete settings[response.stateToken];
          delete response.stateToken;
          return savedSettings;
        }

        function handleAuthResponse(response, authSettings) {
          if (response.error) {
            authErrorHandler(response);
          } else {
            Auth.setAccessToken(response.access_token, authSettings.persistAccessToken);

            _eventObserver.dispatch('LOGIN');
          }

          runCallback(response, authSettings);
        }

        function authErrorHandler(errorObj) {
          var USER_DISAGREE_APPROVAL = 'access_denied';

          if (errorObj.error == USER_DISAGREE_APPROVAL) {
            return;
          }

          Auth.setAccessToken(null);
        }

        function runCallback(response, settings) {
          _k.logDebug(response);

          if (response.error) {
            settings.fail(response);
            settings.always(response);
          } else {
            settings.success(response);
            settings.always(response);
          }
        }

        function getCommonAuthParams(settings) {
          var params = {
            client_id: _k.RUNTIME.appKey
          };

          if (settings.approvalType) {
            params.approval_type = settings.approvalType;
          }

          if (settings.scope) {
            params.scope = settings.scope;
          }

          if (settings.state) {
            params.state = settings.state;
          }

          return params;
        }

        function getExtraParams(settings) {
          var params = {};

          if (settings.plusFriendPublicId !== undefined) {
            params['extra.plus_friend_public_id'] = settings.plusFriendPublicId;
          }

          if (settings.channelPublicId !== undefined) {
            params['channel_public_id'] = settings.channelPublicId;
          }

          if (settings.serviceTerms !== undefined) {
            params['extra.service_terms'] = settings.serviceTerms;
          }

          if (settings.autoLogin !== undefined) {
            params['auto_login'] = settings.autoLogin;
          }

          return params;
        }

        Auth.logout = function (callback) {
          callback = callback || _.emptyFunc;

          _k.validate(callback, _.isFunction, 'Auth.logout');

          Kakao.API.request({
            url: '/v1/user/logout',
            always: function always() {
              Auth.setAccessToken(null);

              _eventObserver.dispatch('LOGOUT');

              callback(true);
            }
          });
        };

        Auth.loginForm = function (settings) {
          settings = _k.processRules(settings, rules.login, 'Auth.loginForm');

          var stateToken = _.getRandomString() + _.getRandomString();

          if (!settings.redirectUri) {
            var url = _k.URL.loginForm + '?continue=' + encodeURIComponent(_loginThroughWeb(settings, stateToken));

            _k.windowOpen(url, LOGIN_POPUP_NAME, _getPopupFeatures());
          } else {
            var url = _k.URL.loginForm + '?continue=' + encodeURIComponent(_redirectLoginThroughWeb(settings));
            location.href = url;
          }
        };

        Auth.setAccessToken = function (token, persist) {
          _k.RUNTIME.accessToken = token;

          if (token === null || persist === false) {
            removeItem(getAccessTokenKey());
          } else {
            storeItem(getAccessTokenKey(), token);
          }
        };

        Auth.setRefreshToken = function (token) {
          console.log('unsupported operation: setRefreshToken()');
        };

        Auth.getAccessToken = function () {
          if (!_k.RUNTIME.accessToken) {
            _k.RUNTIME.accessToken = retrieveItem(getAccessTokenKey());
          }

          return _k.RUNTIME.accessToken;
        };

        Auth.getRefreshToken = function () {
          console.log('unsupported operation: getRefreshToken()');
          return '';
        };

        function storeItem(key, value) {
          var item = encrypt(value, _k.RUNTIME.appKey);

          _.localStorage.setItem(key, item);
        }

        function retrieveItem(key) {
          var item = _.localStorage.getItem(key);

          if (item) {
            return decrypt(item, _k.RUNTIME.appKey);
          } else {
            return null;
          }
        }

        function removeItem(key) {
          _.localStorage.removeItem(key);
        }

        var tokenStorageKeys = {};

        function getAccessTokenKey() {
          if (!tokenStorageKeys.accessTokenKey) {
            tokenStorageKeys.accessTokenKey = 'kakao_' + hash('kat' + _k.RUNTIME.appKey);
          }

          return tokenStorageKeys.accessTokenKey;
        }

        function hash(msg) {
          var hashed = _crypto.MD5(msg);

          return hashed.toString();
        }

        function encrypt(msg, passphrase) {
          var encrypted = _crypto.AES.encrypt(msg, passphrase);

          return encrypted.toString();
        }

        function decrypt(encrypted, passphrase) {
          var decrypted = _crypto.AES.decrypt(encrypted, passphrase);

          return decrypted.toString(_crypto.enc.Utf8);
        }

        Auth.getAppKey = function () {
          return _k.RUNTIME.appKey;
        };

        Auth.getStatusInfo = function (callback) {
          _k.validate(callback, _.isFunction, 'Auth.getConnectionInfo');

          if (!Auth.getAccessToken()) {
            callback({
              status: 'not_connected'
            });
          } else {
            Kakao.API.request({
              url: '/v2/user/me',
              success: function success(res) {
                callback({
                  status: 'connected',
                  user: res
                });
              },
              fail: function fail() {
                callback({
                  status: 'not_connected'
                });
              }
            });
          }
        };

        Auth.cleanup = function () {
          _.each(cleanups, function (func, i) {
            func();
          });

          cleanups.length = 0;
        };

        return Auth;
      }();
    }, {
      "../vendor/CryptoJS.js": 27,
      "../vendor/easyXDM.js": 28,
      "./auth.common.js": 5,
      "./auth.withTalk.js": 7,
      "./auth.withTalk.poller.js": 8,
      "./common.js": 11,
      "./common/everntObserver": 13,
      "./util.js": 24,
      "./webviewchecker.js": 25
    }],
    7: [function (require, module, exports) {
      module.exports = function () {
        var _k = require('./common.js');

        var LOGIN_POPUP_NAME = '_blank';
        var POPUP_FEATURES = 'width=380, height=520, scrollbars=yes';
        var isIntentSupportAndroidWebView = /Version\/4.0/i.test(_k.UA.ua) || /; wv\)/i.test(_k.UA.ua);
        var isSupportWebView = /naver\(inapp|fb_iab|daumapps|instagram|ebay/g.test(_k.UA.ua);

        var _loginPopupWindow;

        return {
          isSupport: function isSupport() {
            var MIN_SUPPORT_VER_TO_APP_INTENT_FOR_ANDROID_CHROME = 30;

            if (_k.UA.os.ios) {
              var iOSBrowser = /safari|FxiOS|CriOS/.test(_k.UA.ua);
              var iOSWebView = !/KAKAOTALK/i.test(_k.UA.ua);
              return iOSBrowser || iOSWebView;
            } else if (_k.UA.os.android) {
              return _k.UA.browser.chrome && !/opr\//i.test(_k.UA.ua) && _k.UA.browser.version.major >= MIN_SUPPORT_VER_TO_APP_INTENT_FOR_ANDROID_CHROME && (!isIntentSupportAndroidWebView || isIntentSupportAndroidWebView && isSupportWebView);
            } else {
              return false;
            }
          },
          login: function login(stateToken, fallbackWebURL, authParams, redirectUri) {
            if (!this.isSupport()) {
              return;
            }

            if (_k.UA.os.ios) {
              var iOSTalkLoginScheme = createIOSTalkLoginScheme(stateToken, authParams);

              if (!redirectUri) {
                _loginPopupWindow = _k.windowOpen(_k.URL.universalKakaoLink + encodeURIComponent(iOSTalkLoginScheme) + '&web=' + encodeURIComponent(fallbackWebURL), LOGIN_POPUP_NAME, POPUP_FEATURES);
              } else {
                location.href = _k.URL.universalKakaoLink + encodeURIComponent(iOSTalkLoginScheme) + '&web=' + encodeURIComponent(fallbackWebURL);
              }
            } else if (_k.UA.os.android) {
              var androidTalkLoginIntent = createAndroidLoginIntent(stateToken, fallbackWebURL, authParams);

              if (!redirectUri) {
                if (isSupportNativeFallbackURL() && (!isIntentSupportAndroidWebView || isIntentSupportAndroidWebView && isSupportWebView)) {
                  _loginPopupWindow = _k.windowOpen(androidTalkLoginIntent, LOGIN_POPUP_NAME, POPUP_FEATURES);
                } else {
                  _loginPopupWindow = _k.windowOpen('', LOGIN_POPUP_NAME, POPUP_FEATURES);

                  if (_loginPopupWindow) {
                    _loginPopupWindow.addEventListener('unload', moveFallback);

                    _loginPopupWindow.location.href = androidTalkLoginIntent;
                  }
                }
              } else {
                location.href = androidTalkLoginIntent;
              }
            }

            return _loginPopupWindow;

            function isSupportNativeFallbackURL() {
              var MIN_SUPPORT_CHROME_VER = 40;
              return _k.UA.browser.version.major > MIN_SUPPORT_CHROME_VER;
            }

            function moveFallback() {
              setTimeout(function () {
                if (_loginPopupWindow && _loginPopupWindow.location) {
                  _loginPopupWindow.location.href = fallbackWebURL;
                }
              }, 10);
            }
          },
          hasWebLoginWindow: function hasWebLoginWindow() {
            try {
              if (_loginPopupWindow && _loginPopupWindow.location && _loginPopupWindow.location.href != "about:blank") {
                if (_k.UA.os.android) {
                  return !!_loginPopupWindow.location.href;
                } else {
                  return true;
                }
              }

              return false;
            } catch (CrossDomainAccessDomException) {
              return true;
            }
          }
        };

        function createIOSTalkLoginScheme(stateToken, authParams) {
          authParams.state = stateToken;
          return [_k.URL.talkLoginScheme, '?', 'client_id=' + _k.RUNTIME.appKey, '&', 'redirect_uri=' + _k.URL.redirectUri, '&', 'params=' + encodeURIComponent(JSON.stringify(authParams))].join('');
        }

        function createAndroidLoginIntent(stateToken, fallbackWebUrl, authParams) {
          return ['intent:#Intent', 'action=com.kakao.talk.intent.action.CAPRI_LOGGED_IN_ACTIVITY', 'launchFlags=0x08880000', 'S.com.kakao.sdk.talk.appKey=' + _k.RUNTIME.appKey, 'S.com.kakao.sdk.talk.redirectUri=' + _k.URL.talkLoginRedirectUri, 'S.com.kakao.sdk.talk.state=' + stateToken, 'S.com.kakao.sdk.talk.kaHeader=' + _k.KAKAO_AGENT, 'S.com.kakao.sdk.talk.extraparams=' + encodeURIComponent(JSON.stringify(authParams)), 'S.browser_fallback_url=' + encodeURIComponent(fallbackWebUrl), 'end;'].join(';');
        }
      }();
    }, {
      "./common.js": 11
    }],
    8: [function (require, module, exports) {
      module.exports = function () {
        var timer;
        var pollingCounter = 0;
        var INTERVAL = 1000;
        var MAX_COUNT = 600;

        var failCallback = function failCallback() {};

        var pollingAction = function pollingAction() {};

        var stopConditionFunc = function stopConditionFunc() {
          return false;
        };

        function doPolling() {
          if (stopConditionFunc()) {
            _stop();

            return;
          }

          if (++pollingCounter > MAX_COUNT) {
            _stop();

            failCallback();
          } else {
            pollingAction();
          }
        }

        ;

        function _stop() {
          clearInterval(timer);
        }

        return {
          start: function start(action, failAction) {
            pollingCounter = 0;

            if (typeof action === 'function') {
              pollingAction = action;
            }

            if (typeof failAction === 'function') {
              failCallback = failAction;
            }

            if (timer) {
              _stop();
            }

            timer = setInterval(doPolling, INTERVAL);
          },
          stop: function stop() {
            _stop();
          },
          setStopCondition: function setStopCondition(funcCondition) {
            if (typeof funcCondition === 'function') {
              stopConditionFunc = funcCondition;
            }
          }
        };
      }();
    }, {}],
    9: [function (require, module, exports) {
      module.exports = function () {
        var userAgent = require('../vendor/userAgent.js');

        return {
          getOrigin: function getOrigin() {
            return location.protocol + "//" + location.hostname + (location.port ? ':' + location.port : '');
          },
          getNavigator: function getNavigator() {
            return navigator;
          },
          getUA: function getUA() {
            return userAgent();
          }
        };
      }();
    }, {
      "../vendor/userAgent.js": 30
    }],
    10: [function (require, module, exports) {
      module.exports = function () {
        var Channel = {};

        var _ = require('./util.js');

        var _k = require('./common.js');

        var browserProxy = require('./browserProxy.js');

        var ADD_POPUP_NAME = 'channel_add_social_plugin';
        var CHAT_POPUP_NAME = 'channel_chat_social_plugin';
        var POPUP_FEATURES = 'width=350, height=510';
        var API_VER = '1.1';
        var cleanups = [];

        Channel.createAddChannelButton = function (settings) {
          settings = _k.processRules(settings, rules.createAddChannelButton, 'Channel.createAddChannelButton');

          var container = _.getElement(settings.container);

          if (!container) {
            throw new _k.KakaoError('container is required for creating Channel.addChannel button: pass in element or id');
          }

          var openUrl = getAddChannelUrl(settings);
          var addChannelIconUrl = getAddChannelIconUrl(settings);
          var anchor = createImageAnchor(openUrl, addChannelIconUrl, 'ì¹´ì¹´ì¤í¡ ì±ë ì¶ê° ë²í¼', settings);
          container.appendChild(anchor);

          var handler = function handler(e) {
            if (e.preventDefault) {
              e.preventDefault();
            } else {
              e.returnValue = false;
            }

            _k.windowOpen(openUrl, ADD_POPUP_NAME, POPUP_FEATURES);
          };

          _.addEvent(anchor, 'click', handler);

          var cleanup = function cleanup() {
            container.removeChild(anchor);

            _.removeEvent(anchor, 'click', handler);
          };

          cleanups.push(cleanup);
        };

        Channel.addChannel = function (settings) {
          settings = _k.processRules(settings, rules.addChannel, 'Channel.addChannel');
          var openUrl = getAddChannelUrl(settings);

          _k.windowOpen(openUrl, ADD_POPUP_NAME, POPUP_FEATURES);
        };

        Channel.createChatButton = function (settings) {
          settings = _k.processRules(settings, rules.createChatButton, 'Channel.createChatButton');

          var container = _.getElement(settings.container);

          if (!container) {
            throw new _k.KakaoError('container is required for creating Channel.chat button: pass in element or id');
          }

          var openUrl = getChatUrl(settings);
          var chatIconUrl = getChatIconUrl(settings);
          var anchor = createImageAnchor(openUrl, chatIconUrl, 'ì¹´ì¹´ì¤í¡ ì±ë 1:1 ì±í ë²í¼', settings);
          container.appendChild(anchor);

          var handler = function handler(e) {
            if (e.preventDefault) {
              e.preventDefault();
            } else {
              e.returnValue = false;
            }

            _k.windowOpen(openUrl, CHAT_POPUP_NAME, POPUP_FEATURES);
          };

          _.addEvent(anchor, 'click', handler);

          var cleanup = function cleanup() {
            container.removeChild(anchor);

            _.removeEvent(anchor, 'click', handler);
          };

          cleanups.push(cleanup);
        };

        Channel.chat = function (settings) {
          settings = _k.processRules(settings, rules.chat, 'Channel.chat');
          var openUrl = getChatUrl(settings);

          _k.windowOpen(openUrl, CHAT_POPUP_NAME, POPUP_FEATURES);
        };

        function createImageAnchor(href, imageSrc, imageTitle, settings) {
          var anchor = document.createElement('a');
          var image = document.createElement('img');
          anchor.setAttribute('href', '#');
          image.setAttribute('src', imageSrc);
          image.setAttribute('alt', imageTitle);
          image.setAttribute('title', imageTitle);
          if (settings.supportMultipleDensities) image.setAttribute('srcset', [imageSrc.replace('.png', '_2X.png 2x'), imageSrc.replace('.png', '_3X.png 3x')].join(', '));
          anchor.appendChild(image);
          return anchor;
        }

        function getAddChannelIconUrl(settings) {
          var filename = 'friendadd_' + settings.size + '_yellow_rect';
          var url = _k.URL.resPrefix + '\/logos\/channel\/' + filename + '.png';
          return url;
        }

        function getChatIconUrl(settings) {
          var filename = settings.title + '_' + settings.size + '_' + settings.color + '_' + settings.shape;
          var url = _k.URL.resPrefix + '\/logos\/channel\/' + filename + '.png';
          return url;
        }

        function getAddChannelUrl(settings) {
          var url = _k.URL.plusFriend + '\/' + settings.channelPublicId + '\/friend';
          if (_k.RUNTIME.appKey) url += '?' + buildQueryString();
          return url;
        }

        function getChatUrl(settings) {
          var url = _k.URL.plusFriend + '\/' + settings.channelPublicId + '\/chat';
          if (_k.RUNTIME.appKey) url += '?' + buildQueryString();
          return url;
        }

        function buildQueryString() {
          if (!_k.RUNTIME.appKey) {
            throw _k.KakaoError('The app key does not exist. Please call Kakao.init function.');
          }

          var params = {
            api_ver: API_VER,
            kakao_agent: _k.KAKAO_AGENT,
            app_key: _k.RUNTIME.appKey,
            referer: browserProxy.getOrigin() + location.pathname + location.search
          };
          return _.buildQueryString(params);
        }

        var rules = {
          createAddChannelButton: {
            required: {
              container: _.passesOneOf([_.isElement, _.isString]),
              channelPublicId: _.isString
            },
            optional: {
              size: _.isOneOf(['small', 'large']),
              supportMultipleDensities: _.isBoolean
            },
            defaults: function defaults(settings) {
              var container = _.getElement(settings.container);

              return container ? {
                channelPublicId: container.getAttribute('data-channel-public-id'),
                size: container.getAttribute('data-size') || 'small',
                supportMultipleDensities: !!container.getAttribute('data-support-multiple-densities')
              } : null;
            }
          },
          addChannel: {
            required: {
              channelPublicId: _.isString
            }
          },
          createChatButton: {
            required: {
              container: _.passesOneOf([_.isElement, _.isString]),
              channelPublicId: _.isString
            },
            optional: {
              color: _.isOneOf(['yellow', 'mono']),
              shape: _.isOneOf(['pc', 'mobile']),
              size: _.isOneOf(['small', 'large']),
              title: _.isOneOf(['consult', 'question']),
              supportMultipleDensities: _.isBoolean
            },
            defaults: function defaults(settings) {
              var container = _.getElement(settings.container);

              return container ? {
                channelPublicId: container.getAttribute('data-channel-public-id'),
                color: container.getAttribute('data-color') || 'yellow',
                shape: container.getAttribute('data-shape') || 'pc',
                size: container.getAttribute('data-size') || 'small',
                title: container.getAttribute('data-title') || 'consult',
                supportMultipleDensities: !!container.getAttribute('data-support-multiple-densities')
              } : null;
            }
          },
          chat: {
            required: {
              channelPublicId: _.isString
            }
          }
        };

        Channel.cleanup = function () {
          _.each(cleanups, function (func) {
            func();
          });

          cleanups.length = 0;
        };

        return Channel;
      }();
    }, {
      "./browserProxy.js": 9,
      "./common.js": 11,
      "./util.js": 24
    }],
    11: [function (require, module, exports) {
      module.exports = function () {
        var _k = {};

        var _ = require('./util.js');

        var browserProxy = require('./browserProxy.js');

        var origin = browserProxy.getOrigin();
        _k.VERSION = '1.39.0';
        _k.KAKAO_AGENT = 'sdk/' + _k.VERSION + ' os/javascript' + ' lang/' + (browserProxy.getNavigator().userLanguage || browserProxy.getNavigator().language) + ' device/' + browserProxy.getNavigator().platform.replace(/ /g, '_') + ' origin/' + encodeURIComponent(origin);
        _k.URL = {
          authorize: 'https://kauth.kakao.com' + '/oauth/authorize',
          loginWidget: 'https://kauth.kakao.com' + '/public/widget/login/kakaoLoginWidget.html',
          apiRemote: 'https://kapi.kakao.com' + '/cors/',
          plusFriend: 'https://pf.kakao.com',
          storyChannel: 'https://kauth.kakao.com' + '/story/select_channel',
          storyShare: 'https://story.kakao.com' + '/s/share',
          channelFollow: 'https://story.kakao.com' + '/s/follow',
          storyIcon: '//dev.kakao.com/sdk/js/resources/story/icon_small.png',
          universalKakaoLink: 'https://talk-apps.kakao.com' + '/scheme/',
          talkLoginScheme: 'kakaokompassauth://authorize',
          talkLoginRedirectUri: 'https://kapi.kakao.com/cors/afterlogin.html',
          redirectUri: 'JS-SDK',
          authDomain: 'https://kauth.kakao.com',
          navi: 'kakaonavi-sdk://navigate',
          naviShare: 'kakaonavi-sdk://sharePoi',
          naviWeb: 'https://kakaonavi-wguide.kakao.com/openapi',
          loginForm: 'https://accounts.kakao.com/login',
          sharerDomain: 'https://sharer.kakao.com',
          stat: 'https://apps.kakao.com/sdk/js',
          resPrefix: 'https://developers.kakao.com/assets/img/about',
          wishlistUrl: 'https://wishlist.kakao.com',
          talkInappScheme: 'kakaotalk://inappbrowser'
        };
        _k.RUNTIME = {
          appKey: '',
          accessToken: ''
        };
        _k.DUMMY_KEY = 'YOUR APP KEY';
        _k.UA = browserProxy.getUA();

        var KakaoError = function KakaoError(message) {
          Error.prototype.constructor.apply(this, arguments);
          this.name = 'KakaoError';
          this.message = message;
        };

        KakaoError.prototype = new Error();
        _k.KakaoError = KakaoError;

        _k.isDebug = function () {
          return false;
        };

        _k.logDebug = function (obj) {
          if (_k.isDebug() && window.console) {
            console.log(JSON.stringify(obj));
          }
        };

        _k.validate = function (target, validator, callerMsg) {
          if (validator(target) !== true) {
            throw new KakaoError('Illegal argument for ' + callerMsg);
          }
        };

        _k.processRules = function (params, rules, callerMsg) {
          params = params || {};

          if (rules.before) {
            rules.before(params);
          }

          if (_.isFunction(rules.defaults)) {
            _.defaults(params, rules.defaults(params));
          } else {
            _.defaults(params, rules.defaults);
          }

          var required = rules.required || {};

          var missingRequiredKeys = _.difference(_.keys(required), _.keys(params));

          if (missingRequiredKeys.length) {
            throw new KakaoError('Missing required keys: ' + missingRequiredKeys.join(',') + ' at ' + callerMsg);
          }

          var optional = rules.optional || {};

          var allowed = _.extend({}, required, optional);

          var invalidKeys = _.difference(_.keys(params), _.keys(allowed));

          if (invalidKeys.length) {
            throw new KakaoError('Invalid parameter keys: ' + invalidKeys.join(',') + ' at ' + callerMsg);
          }

          _.each(params, function (value, key) {
            var validator = allowed[key];

            _k.validate(value, validator, '"' + key + '" in ' + callerMsg);
          });

          if (rules.after) {
            rules.after(params);
          }

          return params;
        };

        _k.getInstallUrl = function (androidAppId, iOSAppId) {
          if (_k.UA.os.android) {
            var referrer = {
              appkey: _k.RUNTIME.appKey,
              KA: _k.KAKAO_AGENT
            };
            return 'market://details?id=' + androidAppId + '&referrer=' + JSON.stringify(referrer);
          } else if (_k.UA.os.ios) {
            return 'https://itunes.apple.com/app/id' + iOSAppId;
          } else {
            return location.href;
          }
        };

        _k.isRetinaDisplay = function () {
          var mediaQuery = '(-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-resolution: 1.5dppx)';

          if (window.devicePixelRatio > 1) {
            return true;
          }

          if (window.matchMedia && window.matchMedia(mediaQuery).matches) {
            return true;
          }

          return false;
        };

        _k.createHiddenIframe = function (id, src) {
          var iframe = document.getElementById(id);

          if (iframe !== null) {
            iframe.parentNode.removeChild(iframe);
          }

          iframe = document.createElement("iframe");
          iframe.id = id;
          iframe.style.border = "none";
          iframe.style.display = "none";
          iframe.style.width = "0px";
          iframe.style.height = "0px";
          iframe.src = src;
          return iframe;
        };

        _k.guardCreateEasyXDM = function (createEasyXDM) {
          try {
            return createEasyXDM();
          } catch (ex) {
            if (ex instanceof TypeError) {
              throw new KakaoError("kakao.js should be loaded from a web server");
            } else {
              throw new KakaoError('EasyXDM -' + ex.message);
            }
          }
        };

        _k.serializeFile = function (file) {
          return new Promise(function (resolve, reject) {
            if (typeof FileReader === "undefined") {
              reject(new KakaoError('File API is not supported for this browser.'));
            }

            var fileReader = new FileReader();

            fileReader.onload = function (e) {
              try {
                resolve(_.arrayBufferToString(e.target.result));
              } catch (e) {
                reject(e);
              }
            };

            fileReader.onerror = function (e) {
              reject(new KakaoError('Cannot read file: ' + file.name));
            };

            fileReader.readAsArrayBuffer(file);
          });
        };

        _k.popupWindows = {};

        _k.windowOpen = function (url, name, feature) {
          var popupWindow = _k.popupWindows[name];

          if (popupWindow && popupWindow.close && !popupWindow.closed) {
            popupWindow.close();
          }

          _k.popupWindows[name] = window.open(url, name, feature);
          return _k.popupWindows[name];
        };

        return _k;
      }();
    }, {
      "./browserProxy.js": 9,
      "./util.js": 24
    }],
    12: [function (require, module, exports) {
      module.exports = function () {
        var KakaoError = function KakaoError(message) {
          Error.prototype.constructor.apply(this, arguments);
          this.name = 'KakaoError';
          this.message = message;
        };

        KakaoError.prototype = new Error();
        return KakaoError;
      }();
    }, {}],
    13: [function (require, module, exports) {
      module.exports = function () {
        var _ = require("../util");

        var _eventObservers = {};
        return {
          subscribe: function subscribe(eventName, observer) {
            if (!_eventObservers[eventName]) {
              _eventObservers[eventName] = [];
            }

            _eventObservers[eventName].push(observer);
          },
          unsubscribe: function unsubscribe(eventName, observer) {
            var observers = _eventObservers[eventName];

            for (var i = 0; i < l.length; i++) {
              if (observers[m] === observer) {
                observers.splice(m, 1);
                break;
              }
            }
          },
          dispatch: function dispatch(eventName) {
            var observers = _eventObservers[eventName];

            if (observers && observers.length) {
              _.each(observers, function (observer) {
                observer();
              });
            }
          }
        };
      }();
    }, {
      "../util": 24
    }],
    14: [function (require, module, exports) {
      module.exports = function (params, rules, callerMsg) {
        var _ = require('../util.js');

        var KakaoError = require('./KakaoError');

        var validate = require('./validate');

        params = params || {};

        if (rules.before) {
          rules.before(params);
        }

        if (_.isFunction(rules.defaults)) {
          _.defaults(params, rules.defaults(params));
        } else {
          _.defaults(params, rules.defaults);
        }

        var required = rules.required || {};

        var missingRequiredKeys = _.difference(_.keys(required), _.keys(params));

        if (missingRequiredKeys.length) {
          throw new KakaoError('Missing required keys: ' + missingRequiredKeys.join(',') + ' at ' + callerMsg);
        }

        var optional = rules.optional || {};

        var allowed = _.extend({}, required, optional);

        var invalidKeys = _.difference(_.keys(params), _.keys(allowed));

        if (invalidKeys.length) {
          throw new KakaoError('Invalid parameter keys: ' + invalidKeys.join(',') + ' at ' + callerMsg);
        }

        _.each(params, function (value, key) {
          var validator = allowed[key];
          validate(value, validator, '"' + key + '" in ' + callerMsg);
        });

        if (rules.after) {
          rules.after(params);
        }

        return params;
      };
    }, {
      "../util.js": 24,
      "./KakaoError": 12,
      "./validate": 15
    }],
    15: [function (require, module, exports) {
      module.exports = function (target, validator, callerMsg) {
        var KakaoError = require('./KakaoError');

        if (validator(target) !== true) {
          throw new KakaoError('Illegal argument for ' + callerMsg);
        }
      };
    }, {
      "./KakaoError": 12
    }],
    16: [function (require, module, exports) {
      module.exports = function () {
        var Emoticon = {};

        var _ = require('./util.js');

        var _api = require('./api.js');

        var _eventObserver = require('./common/everntObserver');

        var cleanups = [];
        Emoticon.getMyItems = _api.createAPIAlias({
          url: '/v1/emoticon/my_items'
        });
        Emoticon.getItemResources = _api.createAPIAlias({
          url: '/v1/emoticon/item_resources',
          data: {}
        });

        Emoticon.cleanup = function () {
          _.each(cleanups, function (func, i) {
            func();
          });

          cleanups.length = 0;
        };

        return Emoticon;
      }();
    }, {
      "./api.js": 4,
      "./common/everntObserver": 13,
      "./util.js": 24
    }],
    17: [function (require, module, exports) {
      module.exports = function () {
        var KAKAOTALK_ANDROID_PACAKGE_NAME = "com.kakao.talk";
        var KAKAOTALK_IOS_APP_ID = "362057947";
        var Link = {};

        var _ = require('./util.js');

        var _api = require('./api.js');

        var _k = require('./common.js');

        var web2app = require('../vendor/web2app.js');

        var webViewChecker = require('./webviewchecker.js')();

        var linkObj = require('./link.obj.js');

        var UA = require('../vendor/userAgent.js')();

        var poller = require('./link.poller');

        var KakaoTalkLink = function KakaoTalkLink() {
          this.appkey = _k.RUNTIME.appKey;
          this.appver = '1.0';
          this.apiver = '3.0';
          this.linkver = '3.5';
          this.extras = {
            "KA": _k.KAKAO_AGENT
          };
          this.objs = [];
        };

        var KakaoLink = function KakaoLink() {
          this.appkey = _k.RUNTIME.appKey;
          this.appver = '1.0';
          this.linkver = '4.0';
          this.template_json = {};
          this.template_args = {};
          this.template_id = '';
          this.extras = {
            "KA": _k.KAKAO_AGENT
          };
        };

        var defaultObj = function defaultObj(settings) {
          var obj = {};
          obj.object_type = settings.objectType;
          obj.button_title = settings.buttonTitle || '';

          _.each(settings, function (setting, key) {
            var item = linkObj.create(setting, key, 'defaultObject');

            if (obj) {
              obj[key] = item;
            }
          });

          if (obj.object_type == 'list') {
            obj.header_title = settings.headerTitle || '';
            settings.headerImageUrl && (obj.header_image_url = settings.headerImageUrl);
            settings.headerImageWidth && (obj.header_image_width = settings.headerImageWidth);
            settings.headerImageHeight && (obj.header_image_height = settings.headerImageHeight);
            obj.header_link = obj.headerLink || {};
            delete obj.headerLink;
          }

          if (obj.object_type == 'location') {
            obj.address = settings.address || '';
            obj.address_title = settings.addressTitle || '';
          }

          if (obj.object_type == 'text') {
            obj.text = settings.text || '';
          }

          return {
            link_ver: '4.0',
            template_object: obj
          };
        };

        var customObj = function customObj(settings) {
          return {
            link_ver: '4.0',
            template_id: settings.templateId,
            template_args: settings.templateArgs
          };
        };

        var scrapObj = function scrapObj(settings) {
          var obj = {
            link_ver: '4.0',
            request_url: settings.requestUrl
          };
          settings.templateId && (obj.template_id = settings.templateId);
          settings.templateArgs && (obj.template_args = settings.templateArgs);
          return obj;
        };

        var linkType = {
          custom: 'custom',
          defaultType: 'default',
          scrap: 'scrap'
        };
        var cleanups = [];

        Link.createTalkLink = Link.createTalkLinkButton = function (settings) {
          settings = _k.processRules(settings, rules.createTalkLink, 'Link.createTalkLink');

          var container = _.getElement(settings.container);

          if (!container) {
            throw new _k.KakaoError('container is required for KakaoTalk Link: pass in element or id');
          }

          var handler = function handler() {
            var linkUrl = buildLinkUrl(settings, 'Link.createTalkLink');
            sendLink(linkUrl, settings.fail, settings.installTalk);
          };

          _.addEvent(container, 'click', handler);

          cleanups.push(function () {
            _.removeEvent(container, 'click', handler);
          });
        };

        Link.sendTalkLink = function (settings) {
          settings = _k.processRules(settings, rules.talkLink, 'Link.sendTalkLink');
          var linkUrl = buildLinkUrl(settings, 'Link.sendTalkLink');
          sendLink(linkUrl, settings.fail, settings.installTalk);
        };

        Link.createCustom = Link.createCustomButton = function (settings) {
          settings = _k.processRules(settings, rules.createCustom, 'Link.createCustom');
          commonAddEvent(validateRequest, settings, linkType.custom);
        };

        Link.createScrap = Link.createScrapButton = function (settings) {
          settings = _k.processRules(settings, rules.createScrap, 'Link.createScrap');
          commonAddEvent(scrapRequest, settings, linkType.scrap);
        };

        Link.createDefault = Link.createDefaultButton = function (settings) {
          if (settings.objectType == 'list') {
            settings = _k.processRules(settings, rules.createDefaultList, 'Link.createDefaultList');
          } else if (settings.objectType == 'location') {
            settings = _k.processRules(settings, rules.createDefaultLocation, 'Link.createDefaultLocation');
          } else if (settings.objectType == 'commerce') {
            settings = _k.processRules(settings, rules.createDefaultCommerce, 'Link.createDefaultCommerce');
          } else if (settings.objectType == 'text') {
            settings = _k.processRules(settings, rules.createDefaultText, 'Link.createDefaultText');
          } else {
            settings = _k.processRules(settings, rules.createDefaultFeed, 'Link.createDefaultFeed');
          }

          commonAddEvent(defaultRequest, settings, linkType.defaultType);
        };

        function commonAddEvent(requestFn, settings, type) {
          var container = _.getElement(settings.container);

          if (!container) {
            throw new _k.KakaoError('container is required for KakaoTalk Link: pass in element or id');
          }

          var handler = function handler(e) {
            e = e || window.e;
            e.preventDefault();
            e.stopPropagation();
            commonClickEvent(requestFn, settings, type);
            return false;
          };

          _.addEvent(container, 'click', handler);

          cleanups.push(function () {
            _.removeEvent(container, 'click', handler);
          });
        }

        function webLinkPopup(url, option, name, params) {
          var popup = _k.UA.browser.msie ? {} : _k.windowOpen('', name, option);
          var form = document.createElement('form');
          form.setAttribute('accept-charset', 'utf-8');
          form.setAttribute('method', 'post');
          form.setAttribute('action', url);
          form.setAttribute('target', name);
          form.setAttribute('style', 'display:none');

          for (var i in params) {
            if (params.hasOwnProperty(i)) {
              var input = document.createElement('input');
              input.type = 'hidden';
              input.name = i;
              input.value = _.isString(params[i]) ? params[i] : JSON.stringify(params[i]);
              form.appendChild(input);
            }
          }

          document.body.appendChild(form);
          form.submit();
          document.body.removeChild(form);
          if (popup.focus) popup.focus();
          return popup;
        }

        function webLink(settings, type) {
          var validationParams;

          switch (type) {
            case 'custom':
              validationParams = customObj(settings);
              break;

            case 'default':
              validationParams = defaultObj(settings);
              break;

            case 'scrap':
              validationParams = scrapObj(settings);
              break;

            default:
              throw new _k.KakaoError('type is required for KakaoTalk Link');
          }

          var webParam = {
            app_key: _k.RUNTIME.appKey,
            validation_action: type,
            validation_params: JSON.stringify(validationParams),
            ka: _k.KAKAO_AGENT
          };
          if (settings.serverCallbackArgs) webParam.lcba = settings.serverCallbackArgs;
          var popupUrl = _k.URL.sharerDomain + '/talk/friends/picker/easylink?app_key=' + webParam.app_key + '&ka=' + encodeURIComponent(webParam.ka) + '&validation_action=' + webParam.validation_action + '&validation_params=' + encodeURIComponent(webParam.validation_params);
          if (webParam.lcba) popupUrl = popupUrl + '&lcba=' + encodeURIComponent(webParam.lcba);
          var popupName = 'kakao_link_web_sharer';
          var popupOption = 'location=no,resizable=no,status=no,scrollbars=no,width=460,height=608';
          var popup;
          var isIEBrowser = _k.UA.browser.msie || _k.UA.browser.spartan;

          if (isIEBrowser !== true && popupUrl.length < 2084) {
            popup = _k.windowOpen(popupUrl, popupName, popupOption);
            popup.focus();
          } else {
            popup = webLinkPopup(_k.URL.sharerDomain + '/talk/friends/picker/link', popupOption, popupName, webParam);
          }

          function linkCallback(e) {
            if (e.data === "sent" && e.origin === _k.URL.sharerDomain) {
              settings.callback();
            }
          }

          if (settings.callback && _k.UA.browser.msie) console.log("method 'callback' does not support the Internet Explorer environment.");
          var timer = setInterval(function () {
            if (popup.closed) {
              clearInterval(timer);

              _.removeEvent(window, "message", linkCallback);
            }
          }, 1000);

          _.addEvent(window, "message", linkCallback);

          cleanups.push(function () {
            _.removeEvent(window, "message", linkCallback);
          });
        }

        var isIpad = UA.platform == 'tablet' && UA.os.ios;

        function commonClickEvent(requestFn, settings, type) {
          if (!settings.throughTalk || UA.platform != 'mobile' && !isIpad) {
            return webLink(settings, type);
          }

          var responseHandler;

          if (UA.browser.iphone && /version/.test(UA.ua.toLowerCase())) {
            var response = null;

            responseHandler = function responseHandler(res) {
              response = res;
              return res;
            };

            poller.start(function () {
              return response != null;
            }, function () {
              createAndSendLink(response, settings);
            }, function () {
              settings.fail({
                msg: 'The request wait time has expired.',
                at: 'link.poller'
              });
            });
          } else responseHandler = createAndSendLink;

          return requestFn(settings).then(function (res) {
            return responseHandler(res, settings);
          }, function (err) {
            settings.fail(err);
          });
        }

        function createAndSendLink(res, settings) {
          var kakaoLink = new KakaoLink();
          kakaoLink.extras = _.extend(kakaoLink.extras, settings.extras);
          if (settings.serverCallbackArgs) kakaoLink.extras.lcba = settings.serverCallbackArgs;
          kakaoLink.template_json = res.template_msg;
          kakaoLink.template_args = res.template_args;
          kakaoLink.template_id = res.template_id;

          var url = linkScheme + '://send?' + _.buildQueryString(kakaoLink);

          var validation_talk = JSON.stringify(kakaoLink);

          if (validation_talk.length > 10000) {
            throw new _k.KakaoError('Failed to send message because it exceeds the message size limit. Please contact the app administrator.');
          }

          if (UA.platform == 'mobile' || isIpad) {
            sendLink(url, settings.fail, settings.installTalk);
          }

          var response = {
            template_msg: res.template_msg || {},
            warning_msg: res.warning_msg || {},
            argument_msg: res.argument_msg || {}
          };
          settings.success(response);
          return response;
        }

        Link.sendCustom = function (settings) {
          var settings = _k.processRules(settings, rules.custom, 'Link.sendCustomTemplate');

          return commonClickEvent(validateRequest, settings, linkType.custom);
        };

        Link.sendScrap = function (settings) {
          var settings = _k.processRules(settings, rules.scrap, 'Link.sendScrap');

          return commonClickEvent(scrapRequest, settings, linkType.scrap);
        };

        Link.sendDefault = function (settings) {
          if (!settings.objectType) {
            throw new _k.KakaoError('objectType is required for KakaoTalk Link');
          }

          var settings = _k.processRules(settings, rules[settings.objectType], 'Link.sendDefault');

          return commonClickEvent(defaultRequest, settings, linkType.defaultType);
        };

        Link.uploadImage = function (settings) {
          settings = _k.processRules(settings, rules.uploadImage, 'Link.uploadImage');
          return uploadImageRequest(settings);
        };

        function uploadImageRequest(settings) {
          return _api.request({
            url: '/v2/api/talk/message/image/upload',
            data: {
              file: settings.file
            }
          });
        }

        Link.deleteImage = function (settings) {
          settings = _k.processRules(settings, rules.deleteImage, 'Link.deleteImage');
          return deleteImageRequest(settings);
        };

        function deleteImageRequest(settings) {
          return _api.request({
            url: '/v2/api/talk/message/image/delete',
            data: {
              image_url: settings.imageUrl
            }
          });
        }

        Link.scrapImage = function (settings) {
          settings = _k.processRules(settings, rules.scrapImage, 'Link.scrapImage');
          return scrapImageRequest(settings);
        };

        function scrapImageRequest(settings) {
          return _api.request({
            url: '/v2/api/talk/message/image/scrap',
            data: {
              image_url: settings.imageUrl
            }
          });
        }

        var types = ['feed', 'list', 'location', 'commerce', 'text'];
        var rules = {
          talkLink: {
            optional: {
              label: _.passesOneOf([_.isString, _.isObject]),
              image: _.isObject,
              webImage: _.isObject,
              webButton: _.isObject,
              webLink: _.isObject,
              appButton: _.isObject,
              appLink: _.isObject,
              horizontalButton: _.isArray,
              fail: _.isFunction,
              installTalk: _.isBoolean,
              forwardable: _.isBoolean,
              extras: _.isObject
            },
            before: function before(settings) {
              if (_.isString(settings.label)) {
                settings.label = {
                  text: settings.label
                };
              }
            },
            defaults: {
              installTalk: true,
              forwardable: false,
              fail: _.emptyFunc
            }
          },
          custom: {
            required: {
              templateId: _.isNumber
            },
            optional: {
              templateArgs: _.isObject,
              installTalk: _.isBoolean,
              fail: _.isFunction,
              always: _.isFunction,
              success: _.isFunction,
              extras: _.isObject,
              callback: _.isFunction,
              serverCallbackArgs: _.isString,
              throughTalk: _.isBoolean
            },
            defaults: {
              templateArgs: {},
              installTalk: false,
              fail: _.emptyFunc,
              always: _.emptyFunc,
              success: _.emptyFunc,
              callback: _.emptyFunc,
              throughTalk: true
            }
          },
          scrap: {
            required: {
              requestUrl: _.isString
            },
            optional: {
              templateId: _.isNumber,
              templateArgs: _.isObject,
              installTalk: _.isBoolean,
              fail: _.isFunction,
              always: _.isFunction,
              success: _.isFunction,
              extras: _.isObject,
              callback: _.isFunction,
              serverCallbackArgs: _.isString,
              throughTalk: _.isBoolean
            },
            defaults: {
              templateArgs: {},
              installTalk: false,
              fail: _.emptyFunc,
              always: _.emptyFunc,
              success: _.emptyFunc,
              callback: _.emptyFunc,
              throughTalk: true
            }
          },
          feed: {
            required: {
              objectType: _.isOneOf(types),
              content: _.isObject
            },
            optional: {
              social: _.isObject,
              buttonTitle: _.isString,
              buttons: _.isArray,
              installTalk: _.isBoolean,
              fail: _.isFunction,
              always: _.isFunction,
              success: _.isFunction,
              extras: _.isObject,
              callback: _.isFunction,
              serverCallbackArgs: _.isString,
              throughTalk: _.isBoolean
            },
            defaults: {
              installTalk: false,
              fail: _.emptyFunc,
              always: _.emptyFunc,
              success: _.emptyFunc,
              callback: _.emptyFunc,
              throughTalk: true
            }
          },
          commerce: {
            required: {
              objectType: _.isOneOf(types),
              content: _.isObject,
              commerce: _.isObject
            },
            optional: {
              buttonTitle: _.isString,
              buttons: _.isArray,
              installTalk: _.isBoolean,
              fail: _.isFunction,
              always: _.isFunction,
              success: _.isFunction,
              extras: _.isObject,
              callback: _.isFunction,
              serverCallbackArgs: _.isString,
              throughTalk: _.isBoolean
            },
            defaults: {
              installTalk: false,
              fail: _.emptyFunc,
              always: _.emptyFunc,
              success: _.emptyFunc,
              callback: _.emptyFunc,
              throughTalk: true
            }
          },
          list: {
            required: {
              objectType: _.isOneOf(types),
              headerTitle: _.isString,
              headerLink: _.isObject,
              contents: _.isArray
            },
            optional: {
              buttonTitle: _.isString,
              buttons: _.isArray,
              headerImageUrl: _.isString,
              headerImageWidth: _.isNumber,
              headerImageHeight: _.isNumber,
              installTalk: _.isBoolean,
              fail: _.isFunction,
              always: _.isFunction,
              success: _.isFunction,
              extras: _.isObject,
              callback: _.isFunction,
              serverCallbackArgs: _.isString,
              throughTalk: _.isBoolean
            },
            defaults: {
              installTalk: false,
              fail: _.emptyFunc,
              always: _.emptyFunc,
              success: _.emptyFunc,
              callback: _.emptyFunc,
              throughTalk: true
            }
          },
          location: {
            required: {
              objectType: _.isOneOf(types),
              content: _.isObject,
              address: _.isString
            },
            optional: {
              addressTitle: _.isString,
              social: _.isObject,
              buttonTitle: _.isString,
              buttons: _.isArray,
              installTalk: _.isBoolean,
              fail: _.isFunction,
              always: _.isFunction,
              success: _.isFunction,
              extras: _.isObject,
              callback: _.isFunction,
              serverCallbackArgs: _.isString,
              throughTalk: _.isBoolean
            },
            defaults: {
              installTalk: false,
              fail: _.emptyFunc,
              always: _.emptyFunc,
              success: _.emptyFunc,
              callback: _.emptyFunc,
              throughTalk: true
            }
          },
          text: {
            required: {
              objectType: _.isOneOf(types),
              text: _.isString,
              link: _.isObject
            },
            optional: {
              buttonTitle: _.isString,
              buttons: _.isArray,
              installTalk: _.isBoolean,
              fail: _.isFunction,
              always: _.isFunction,
              success: _.isFunction,
              extras: _.isObject,
              callback: _.isFunction,
              serverCallbackArgs: _.isString,
              throughTalk: _.isBoolean
            },
            defaults: {
              installTalk: false,
              fail: _.emptyFunc,
              always: _.emptyFunc,
              success: _.emptyFunc,
              callback: _.emptyFunc,
              throughTalk: true
            }
          },
          uploadImage: {
            required: {
              file: _.isObject
            },
            optional: {
              always: _.isFunction,
              success: _.isFunction
            },
            defaults: {
              always: _.emptyFunc,
              success: _.emptyFunc
            }
          },
          deleteImage: {
            required: {
              imageUrl: _.isString
            },
            optional: {
              always: _.isFunction,
              success: _.isFunction
            },
            defaults: {
              always: _.emptyFunc,
              success: _.emptyFunc
            }
          },
          scrapImage: {
            required: {
              imageUrl: _.isString
            },
            optional: {
              always: _.isFunction,
              success: _.isFunction
            },
            defaults: {
              always: _.emptyFunc,
              success: _.emptyFunc
            }
          }
        };
        rules.createTalkLink = _.extend({
          required: {
            container: _.passesOneOf([_.isElement, _.isString])
          }
        }, rules.talkLink);
        rules.createCustom = _.defaults({
          required: _.extend({
            container: _.passesOneOf([_.isElement, _.isString])
          }, rules.custom.required)
        }, rules.custom);
        rules.createScrap = _.defaults({
          required: _.extend({
            container: _.passesOneOf([_.isElement, _.isString])
          }, rules.scrap.required)
        }, rules.scrap);
        rules.createDefaultFeed = _.defaults({
          required: _.extend({
            container: _.passesOneOf([_.isElement, _.isString])
          }, rules.feed.required)
        }, rules.feed);
        rules.createDefaultList = _.defaults({
          required: _.extend({
            container: _.passesOneOf([_.isElement, _.isString])
          }, rules.list.required)
        }, rules.list);
        rules.createDefaultLocation = _.defaults({
          required: _.extend({
            container: _.passesOneOf([_.isElement, _.isString])
          }, rules.location.required)
        }, rules.location);
        rules.createDefaultCommerce = _.defaults({
          required: _.extend({
            container: _.passesOneOf([_.isElement, _.isString])
          }, rules.commerce.required)
        }, rules.commerce);
        rules.createDefaultText = _.defaults({
          required: _.extend({
            container: _.passesOneOf([_.isElement, _.isString])
          }, rules.text.required)
        }, rules.text);

        var linkScheme = function () {
          var phase = 'release';

          if (_k.UA.os.ios && (phase === "alpha" || phase === "sandbox")) {
            return "alphalink";
          } else {
            return "kakaolink";
          }
        }();

        function buildLinkUrl(settings, callerMsg) {
          var link = new KakaoTalkLink();
          link.forwardable = settings.forwardable;
          link.extras = _.extend(link.extras, settings.extras);

          _.each(settings, function (setting, key) {
            var obj = linkObj.create(setting, key, callerMsg);

            if (obj) {
              link.objs.push(obj);
            }
          });

          return linkScheme + '://send?' + _.buildQueryString(link);
        }

        function validateRequest(settings) {
          return _api.request({
            url: '/v2/api/kakaolink/talk/template/validate',
            data: customObj(settings)
          });
        }

        function scrapRequest(settings) {
          return _api.request({
            url: '/v2/api/kakaolink/talk/template/scrap',
            data: scrapObj(settings)
          });
        }

        function defaultRequest(settings) {
          return _api.request({
            url: '/v2/api/kakaolink/talk/template/default',
            data: defaultObj(settings)
          });
        }

        function sendLink(url, unsupportedCallback, shouldInstallTalk) {
          var androidIntent = "intent:" + url + "#Intent;launchFlags=0x14008000;" + (shouldInstallTalk === true ? 'package=com.kakao.talk;' : '') + "end;";
          var web2appOptions = {
            urlScheme: url,
            intentURI: androidIntent,
            appName: 'KakaoTalk',
            storeURL: _k.getInstallUrl(KAKAOTALK_ANDROID_PACAKGE_NAME, KAKAOTALK_IOS_APP_ID),
            onUnsupportedEnvironment: function onUnsupportedEnvironment() {
              unsupportedCallback(url);
            }
          };

          if (!shouldInstallTalk || webViewChecker.isIOSKakaoTalkWebView() || webViewChecker.isAndroidWebView()) {
            web2appOptions.onAppMissing = _.emptyFunc;
          }

          if (webViewChecker.isIOSKakaoTalkWebView()) {
            web2appOptions.universalLink = undefined;
          }

          try {
            web2app(web2appOptions);
          } catch (e) {
            console.log(e);
          }
        }

        Link.cleanup = function () {
          _.each(cleanups, function (func, i) {
            func();
          });

          cleanups.length = 0;
        };

        return Link;
      }();
    }, {
      "../vendor/userAgent.js": 30,
      "../vendor/web2app.js": 31,
      "./api.js": 4,
      "./common.js": 11,
      "./link.obj.js": 18,
      "./link.poller": 19,
      "./util.js": 24,
      "./webviewchecker.js": 25
    }],
    18: [function (require, module, exports) {
      module.exports = function () {
        var _ = require('./util.js');

        var KakaoError = require('./common/KakaoError');

        var ruleProcess = require('./common/ruleProcess');

        var ACTION_TYPE = {
          WEB: 'web',
          INWEB: 'inweb',
          APP: 'app'
        };
        var commonOptional = {
          displayType: _.isOneOf(['both', 'sender', 'receiver'])
        };

        function imageSizeValidator(sizeValue) {
          var parsed = parseInt(sizeValue, 10);

          if (isNaN(parsed) || parsed < 80) {
            throw new KakaoError('Illegal argument for image: width/height should be a number larger than 80');
          }

          return true;
        }

        function parseImageSize(image) {
          image.width = parseInt(image.width, 10);
          image.height = parseInt(image.height, 10);
        }

        function buttonObjValidator(buttonObj) {
          var buttonObjKey = _.keys(buttonObj)[0];

          if (buttonObjKey === 'webButton') {
            ruleProcess(buttonObj.webButton, rules[buttonObjKey], "parameter webButton in Link.createTalkLink");
          } else {
            ruleProcess(buttonObj.appButton, rules[buttonObjKey], "parameter appButton in Link.createTalkLink");
          }

          return true;
        }

        function getHorizontalButtonObj(setting) {
          var leftButtonKey = _.keys(setting[0]);

          var rightButtonKey = _.keys(setting[1]);

          var leftButton = setting[0][leftButtonKey];
          var rightButton = setting[1][rightButtonKey];
          return {
            "objtype": "horizontal",
            "subs": [{
              "objtype": "button",
              "text": leftButton.text,
              "action": getAction(leftButton.type, leftButton)
            }, {
              "objtype": "button",
              "text": rightButton.text,
              "action": getAction(rightButton.type, rightButton)
            }],
            "disptype": "both"
          };
        }

        function getLabelObj(setting) {
          return {
            "objtype": "label",
            "text": setting.text,
            "disptype": setting.displayType
          };
        }

        function getImageObj(actionType, setting) {
          return {
            "objtype": "image",
            "src": setting.src,
            "width": setting.width,
            "height": setting.height,
            "action": getAction(actionType, setting),
            "disptype": setting.displayType
          };
        }

        function getButtonObj(actionType, setting) {
          return {
            "objtype": "button",
            "text": setting.text,
            "action": getAction(actionType, setting),
            "disptype": setting.displayType
          };
        }

        function getLinkObj(actionType, setting) {
          return {
            "objtype": "link",
            "text": setting.text,
            "action": getAction(actionType, setting),
            "disptype": setting.displayType
          };
        }

        function getAction(actionType, setting) {
          switch (actionType) {
            case "web":
              return getWebAction();

            case "app":
              return getAppAction();

            default:
              return undefined;
          }

          function getWebAction() {
            return {
              "type": setting.type,
              "url": setting.url ? formatUrl(setting.url) : undefined,
              "auth": setting.auth
            };

            function formatUrl(maybeUrl) {
              if (maybeUrl.indexOf("://") > -1) {
                return maybeUrl;
              } else {
                return "http://" + maybeUrl;
              }
            }
          }

          function getAppAction() {
            return {
              "type": "app",
              "url": setting.webUrl,
              "actioninfo": getAppActionInfos(setting.execParams, setting.marketParams)
            };

            function getAppActionInfos(execParams, marketParams) {
              var baseInfos = {
                android: {
                  "os": "android"
                },
                iphone: {
                  "os": "ios",
                  "devicetype": "phone"
                },
                ipad: {
                  "os": "ios",
                  "devicetype": "pad"
                }
              };

              if (execParams) {
                execParams = ruleProcess(execParams, ruleAppParams, 'execParams in Kakao.Link');
              }

              if (marketParams) {
                marketParams = ruleProcess(marketParams, ruleAppParams, 'marketParams in Kakao.Link');
              }

              var actionInfos = [];

              _.each(baseInfos, function (baseInfo, platform) {
                var info = _.extend({}, baseInfo);

                if (execParams && execParams[platform]) {
                  info.execparam = _.buildQueryString(execParams[platform], false);
                }

                if (marketParams && marketParams[platform]) {
                  info.marketparam = _.buildQueryString(marketParams[platform], false);
                }

                if (info.execparam || info.marketparam) {
                  actionInfos.push(info);
                }
              });

              return actionInfos;
            }
          }
        }

        function getButton(setting) {
          return {
            "title": setting.title,
            "link": getLink(setting.link)
          };
        }

        function getButtons(settings) {
          return _.map(settings, function (setting) {
            return {
              "title": setting.title,
              "link": getLink(setting.link)
            };
          });
        }

        function getSocial(setting) {
          return {
            "like_count": setting.likeCount,
            "comment_count": setting.commentCount,
            "shared_count": setting.sharedCount,
            "view_count": setting.viewCount,
            "subscriber_count": setting.subscriberCount
          };
        }

        function getContent(setting) {
          return {
            "title": setting.title,
            "image_url": setting.imageUrl,
            "link": getLink(setting.link),
            "image_width": setting.imageWidth,
            "image_height": setting.imageHeight,
            "description": setting.description
          };
        }

        function getContents(settings) {
          if (settings.length < 2) {
            throw new KakaoError('Illegal argument for contents: min count(2)');
          }

          return _.map(settings, function (setting) {
            return {
              "title": setting.title,
              "image_url": setting.imageUrl,
              "link": getLink(setting.link),
              "image_width": setting.imageWidth,
              "image_height": setting.imageHeight,
              "description": setting.description
            };
          });
        }

        function getLink(setting) {
          return {
            'web_url': setting.webUrl,
            'mobile_web_url': setting.mobileWebUrl,
            'android_execution_params': setting.androidExecParams,
            'ios_execution_params': setting.iosExecParams
          };
        }

        function getCommerce(setting) {
          return {
            "regular_price": setting.regularPrice,
            "discount_price": setting.discountPrice,
            "discount_rate": setting.discountRate,
            "fixed_discount_price": setting.fixedDiscountPrice,
            "product_name": setting.productName
          };
        }

        function contentValidator(obj) {
          ruleProcess(obj, rules['content'], "parameter content in Link.sendDefault");
          return true;
        }

        function linkValidator(linkObj) {
          ruleProcess(linkObj, rules['link'], "parameter link in Link.sendDefault");
          return true;
        }

        function buttonValidator(buttonObj) {
          ruleProcess(buttonObj, rules['button'], "parameter button in Link.sendDefault");
          return true;
        }

        var rules = {
          label: {
            required: {
              text: _.isString
            },
            optional: commonOptional,
            builder: getLabelObj
          },
          image: {
            required: {
              src: _.isString,
              width: imageSizeValidator,
              height: imageSizeValidator
            },
            optional: commonOptional,
            before: parseImageSize,
            builder: _.partial(getImageObj, null)
          },
          webImage: {
            required: {
              src: _.isString,
              width: imageSizeValidator,
              height: imageSizeValidator
            },
            optional: _.extend({
              url: _.isString,
              auth: _.isBoolean,
              type: _.isOneOf([ACTION_TYPE.WEB, ACTION_TYPE.INWEB])
            }, commonOptional),
            defaults: {
              type: ACTION_TYPE.WEB
            },
            before: parseImageSize,
            builder: _.partial(getImageObj, "web")
          },
          webButton: {
            optional: _.extend({
              text: _.isString,
              url: _.isString,
              auth: _.isBoolean,
              type: _.isOneOf(['web', 'inweb'])
            }, commonOptional),
            defaults: {
              type: 'web'
            },
            builder: _.partial(getButtonObj, "web")
          },
          appButton: {
            optional: _.extend({
              text: _.isString,
              webUrl: _.isString,
              execParams: _.isObject,
              marketParams: _.isObject,
              type: _.isString
            }, commonOptional),
            defaults: {
              type: 'app'
            },
            builder: _.partial(getButtonObj, "app")
          },
          webLink: {
            required: {
              text: _.isString
            },
            optional: _.extend({
              url: _.isString,
              auth: _.isBoolean,
              type: _.isOneOf(['web', 'inweb'])
            }, commonOptional),
            defaults: {
              type: 'web'
            },
            builder: _.partial(getLinkObj, "web")
          },
          appLink: {
            required: {
              text: _.isString
            },
            optional: _.extend({
              webUrl: _.isString,
              execParams: _.isObject,
              marketParams: _.isObject
            }, commonOptional),
            builder: _.partial(getLinkObj, "app")
          },
          horizontalButton: {
            required: {
              0: buttonObjValidator,
              1: buttonObjValidator
            },
            builder: getHorizontalButtonObj
          },
          content: {
            required: {
              title: _.isString,
              imageUrl: _.isString,
              link: linkValidator
            },
            optional: {
              imageWidth: _.isNumber,
              imageHeight: _.isNumber,
              description: _.isString
            },
            builder: getContent
          },
          contents: {
            optional: {
              0: contentValidator,
              1: contentValidator,
              2: contentValidator
            },
            builder: getContents
          },
          commerce: {
            required: {
              regularPrice: _.isNumber
            },
            optional: {
              discountPrice: _.isNumber,
              discountRate: _.isNumber,
              fixedDiscountPrice: _.isNumber,
              productName: _.isString
            },
            builder: getCommerce
          },
          social: {
            optional: {
              likeCount: _.isNumber,
              commentCount: _.isNumber,
              sharedCount: _.isNumber,
              viewCount: _.isNumber,
              subscriberCount: _.isNumber
            },
            builder: getSocial
          },
          button: {
            required: {
              title: _.isString,
              link: linkValidator
            },
            builder: getButton
          },
          buttons: {
            optional: {
              0: buttonValidator,
              1: buttonValidator
            },
            builder: getButtons
          },
          headerLink: {
            optional: {
              webUrl: _.isString,
              mobileWebUrl: _.isString,
              androidExecParams: _.isString,
              iosExecParams: _.isString
            },
            builder: getLink
          },
          link: {
            optional: {
              webUrl: _.isString,
              mobileWebUrl: _.isString,
              androidExecParams: _.isString,
              iosExecParams: _.isString
            },
            builder: getLink
          }
        };
        var ruleAppParams = {
          optional: {
            iphone: _.isObject,
            ipad: _.isObject,
            android: _.isObject
          }
        };
        return {
          create: function create(setting, key, callerMsg) {
            var linkObjectRule = rules[key];

            if (linkObjectRule) {
              setting = ruleProcess(setting, linkObjectRule, "parameter '" + key + "' in " + (callerMsg || "Link"));
              return linkObjectRule.builder(setting);
            }
          }
        };
      }();
    }, {
      "./common/KakaoError": 12,
      "./common/ruleProcess": 14,
      "./util.js": 24
    }],
    19: [function (require, module, exports) {
      module.exports = function () {
        var INTERVAL = 100;
        var TIMEOUT = 10001;
        var elapsed = 0;
        var timeoutIds = [];

        function _stop2() {
          for (var i = 0; i < timeoutIds.length; ++i) {
            clearTimeout(timeoutIds[i]);
          }

          timeoutIds = [];
        }

        function init() {
          elapsed = 0;

          _stop2();
        }

        return {
          start: function start(stopConditionFunc, success, fail) {
            init();

            for (var i = 1; i * INTERVAL < TIMEOUT; ++i) {
              var timeoutId = setTimeout(function () {
                elapsed += INTERVAL;

                if (stopConditionFunc()) {
                  _stop2();

                  success();
                } else if (elapsed + INTERVAL > TIMEOUT) {
                  _stop2();

                  fail();
                }
              }, i * INTERVAL);
              timeoutIds.push(timeoutId);
            }
          },
          stop: function stop() {
            _stop2();
          }
        };
      }();
    }, {}],
    20: [function (require, module, exports) {
      module.exports = function (root) {
        root.Kakao = root.Kakao || {};
        var Kakao = root.Kakao;

        var _ = require('./util.js');

        var _k = require('./common.js');

        Kakao.VERSION = _k.VERSION;
        Kakao.Story = require('./story.js');

        Kakao.init = function (appKey) {
          if (_k.RUNTIME.appKey) {
            throw new _k.KakaoError('Kakao.init: Already initialized.');
          }

          if (!_.isString(appKey) || appKey === _k.DUMMY_KEY) {
            throw new _k.KakaoError('Kakao.init: App key must be provided');
          }

          _k.RUNTIME.appKey = appKey;
          Kakao.Auth = require('./auth.js');
          Kakao.API = require('./api.js');
          Kakao.Link = require('./link.js');
          Kakao.Emoticon = require('./emoticon.js');
          Kakao.Navi = require('./navi.js');
          Kakao.PlusFriend = require('./plusFriend.js');
          Kakao.Channel = require('./channel.js');
          Kakao.Wishlist = require('./wishlist.js');
        };

        Kakao.isInitialized = function () {
          return !!_k.RUNTIME.appKey;
        };

        Kakao.cleanup = function () {
          Kakao.Auth && Kakao.Auth.cleanup();
          Kakao.API && Kakao.API.cleanup();
          Kakao.Link && Kakao.Link.cleanup();
          Kakao.Story && Kakao.Story.cleanup();
          Kakao.Emoticon && Kakao.Emoticon.cleanup();
          Kakao.PlusFriend && Kakao.PlusFriend.cleanup();
          Kakao.Channel && Kakao.Channel.cleanup();
          Kakao.Wishlist && Kakao.Wishlist.cleanup();

          _.nullify(_k.RUNTIME);
        };

        if (window.kakaoAsyncInit) {
          window.kakaoAsyncInit();
        }

        return Kakao;
      }(window);
    }, {
      "./api.js": 4,
      "./auth.js": 6,
      "./channel.js": 10,
      "./common.js": 11,
      "./emoticon.js": 16,
      "./link.js": 17,
      "./navi.js": 21,
      "./plusFriend.js": 22,
      "./story.js": 23,
      "./util.js": 24,
      "./wishlist.js": 26
    }],
    21: [function (require, module, exports) {
      module.exports = function () {
        var _ = require('./util.js');

        var _k = require('./common');

        var _ruleProcess = require('./common/ruleProcess');

        var web2app = require('../vendor/web2app.js');

        var ANDROID_NAVI_PACKAGE_NAME = "com.locnall.KimGiSa";
        var IOS_NAVI_APP_ID = "417698849";
        var Navi = {};

        Navi.start = function (settings) {
          settings = _ruleProcess(settings, rules.spot);
          var appScheme = buildNaviScheme(settings);
          var webUrl = encodeURIComponent(appScheme.replace(_k.URL.navi, _k.URL.naviWeb));
          web2app({
            urlScheme: appScheme,
            intentURI: "intent:" + appScheme + "#Intent;package=" + ANDROID_NAVI_PACKAGE_NAME + ";S.browser_fallback_url=" + webUrl + ";end;",
            storeURL: appScheme.replace(_k.URL.navi, _k.URL.naviWeb),
            universalLink: appScheme.replace(_k.URL.navi, _k.URL.naviWeb)
          });
        };

        Navi.share = function (settings) {
          settings = _ruleProcess(settings, shareRules.spot);
          var appScheme = buildShareNaviScheme(settings);
          var webUrl = encodeURIComponent(appScheme.replace(_k.URL.naviShare, _k.URL.naviWeb));
          web2app({
            urlScheme: appScheme,
            intentURI: "intent:" + appScheme + "#Intent;package=" + ANDROID_NAVI_PACKAGE_NAME + ";S.browser_fallback_url=" + webUrl + ";end;",
            storeURL: appScheme.replace(_k.URL.naviShare, _k.URL.naviWeb),
            universalLink: appScheme.replace(_k.URL.naviShare, _k.URL.naviWeb)
          });
        };

        var NaviMeta = function NaviMeta() {
          this.appkey = _k.RUNTIME.appKey;
          this.apiver = '1.0';
          this.extras = {
            "KA": _k.KAKAO_AGENT
          };
        };

        var rules = {
          spot: {
            required: {
              name: _.isString,
              x: _.isNumber,
              y: _.isNumber
            },
            optional: {
              coordType: _.isOneOf(["wgs84", "katec"]),
              vehicleType: _.isOneOf([1, 2, 3, 4, 5, 6, 7]),
              rpOption: _.isOneOf([1, 2, 3, 4, 5, 6, 8, 100]),
              routeInfo: _.isBoolean,
              sX: _.isNumber,
              sY: _.isNumber,
              sAngle: _.isNumber,
              returnUri: _.isString,
              rpflag: _.isString,
              cid: _.isString,
              guideId: _.isNumber,
              viaPoints: function viaPoints(points) {
                if (!_.isArray(points)) {
                  return false;
                } else if (points.length > 3) {
                  throw new Error("via points should not be exceed 3");
                } else {
                  _.each(points, function (via) {
                    return _ruleProcess(via, rules.viaPoint);
                  });
                }

                return true;
              }
            },
            destinationBuilder: function destinationBuilder(settings) {
              return {
                "name": settings.name,
                "x": settings.x,
                "y": settings.y,
                "rpflag": settings.rpflag,
                "cid": settings.cid,
                "guide_id": settings.guideId
              };
            },
            optionBuilder: function optionBuilder(settings) {
              return {
                coord_type: settings.coordType,
                vehicle_type: settings.vehicleType,
                rpoption: settings.rpOption,
                route_info: settings.routeInfo,
                s_x: settings.sX,
                s_y: settings.sY,
                s_angle: settings.sAngle,
                return_uri: settings.returnUri
              };
            }
          },
          viaPoint: {
            required: {
              name: _.isString,
              x: _.isNumber,
              y: _.isNumber
            },
            optional: {
              rpflag: _.isString,
              cid: _.isString
            }
          }
        };
        var shareRules = {
          spot: {
            required: {
              name: _.isString,
              x: _.isNumber,
              y: _.isNumber
            },
            optional: {
              coordType: _.isOneOf(["wgs84", "katec"]),
              rpflag: _.isString,
              cid: _.isString,
              guideId: _.isNumber
            },
            destinationBuilder: function destinationBuilder(settings) {
              return {
                "name": settings.name,
                "x": settings.x,
                "y": settings.y,
                "rpflag": settings.rpflag,
                "cid": settings.cid,
                "guide_id": settings.guideId
              };
            },
            optionBuilder: function optionBuilder(settings) {
              return {
                coord_type: settings.coordType
              };
            }
          }
        };

        function buildNaviScheme(settings) {
          var scheme = new NaviMeta();
          scheme.param = {
            destination: rules.spot.destinationBuilder(settings),
            option: JSON.stringify(rules.spot.optionBuilder(settings)) === '{}' ? undefined : rules.spot.optionBuilder(settings),
            via_list: settings.viaPoints
          };
          return _k.URL.navi + "?" + _.buildQueryString(scheme);
        }

        ;

        function buildShareNaviScheme(settings) {
          var scheme = new NaviMeta();
          scheme.param = {
            destination: shareRules.spot.destinationBuilder(settings),
            option: JSON.stringify(shareRules.spot.optionBuilder(settings)) === '{}' ? undefined : shareRules.spot.optionBuilder(settings)
          };
          scheme.scheme_type = 'sharePoi';
          return _k.URL.naviShare + "?" + _.buildQueryString(scheme);
        }

        ;
        return Navi;
      }();
    }, {
      "../vendor/web2app.js": 31,
      "./common": 11,
      "./common/ruleProcess": 14,
      "./util.js": 24
    }],
    22: [function (require, module, exports) {
      module.exports = function () {
        var PlusFriend = {};

        var _ = require('./util.js');

        var _k = require('./common.js');

        var browserProxy = require('./browserProxy.js');

        var ADD_POPUP_NAME = 'plus_friend_add_social_plugin';
        var CHAT_POPUP_NAME = 'plus_friend_chat_social_plugin';
        var POPUP_FEATURES = 'width=350, height=510';
        var API_VER = '1.0';
        var cleanups = [];

        PlusFriend.createAddFriendButton = function (settings) {
          settings = _k.processRules(settings, rules.createAddFriendButton, 'PlusFriend.createAddFriendButton');

          var container = _.getElement(settings.container);

          if (!container) {
            throw new _k.KakaoError('container is required for creating PlusFriend.addFriend button: pass in element or id');
          }

          var openUrl = getAddFriendUrl(settings);
          var addFriendIconUrl = getAddFriendIconUrl(settings);
          var anchor = createImageAnchor(openUrl, addFriendIconUrl, 'íë¬ì¤ì¹êµ¬ ì¹êµ¬ ì¶ê° ë²í¼', settings);
          container.appendChild(anchor);

          var handler = function handler(e) {
            if (e.preventDefault) {
              e.preventDefault();
            } else {
              e.returnValue = false;
            }

            _k.windowOpen(openUrl, ADD_POPUP_NAME, POPUP_FEATURES);
          };

          _.addEvent(anchor, 'click', handler);

          var cleanup = function cleanup() {
            container.removeChild(anchor);

            _.removeEvent(anchor, 'click', handler);
          };

          cleanups.push(cleanup);
        };

        PlusFriend.addFriend = function (settings) {
          settings = _k.processRules(settings, rules.addFriend, 'PlusFriend.addFriend');
          var openUrl = getAddFriendUrl(settings);

          _k.windowOpen(openUrl, ADD_POPUP_NAME, POPUP_FEATURES);
        };

        PlusFriend.createChatButton = function (settings) {
          settings = _k.processRules(settings, rules.createChatButton, 'PlusFriend.createChatButton');

          var container = _.getElement(settings.container);

          if (!container) {
            throw new _k.KakaoError('container is required for creating PlusFriend.chat button: pass in element or id');
          }

          var openUrl = getChatUrl(settings);
          var chatIconUrl = getChatIconUrl(settings);
          var anchor = createImageAnchor(openUrl, chatIconUrl, 'íë¬ì¤ì¹êµ¬ 1:1 ì±í ë²í¼', settings);
          container.appendChild(anchor);

          var handler = function handler(e) {
            if (e.preventDefault) {
              e.preventDefault();
            } else {
              e.returnValue = false;
            }

            _k.windowOpen(openUrl, CHAT_POPUP_NAME, POPUP_FEATURES);
          };

          _.addEvent(anchor, 'click', handler);

          var cleanup = function cleanup() {
            container.removeChild(anchor);

            _.removeEvent(anchor, 'click', handler);
          };

          cleanups.push(cleanup);
        };

        PlusFriend.chat = function (settings) {
          settings = _k.processRules(settings, rules.chat, 'PlusFriend.chat');
          var openUrl = getChatUrl(settings);

          _k.windowOpen(openUrl, CHAT_POPUP_NAME, POPUP_FEATURES);
        };

        function createImageAnchor(href, imageSrc, imageTitle, settings) {
          var anchor = document.createElement('a');
          var image = document.createElement('img');
          anchor.setAttribute('href', '#');
          image.setAttribute('src', imageSrc);
          image.setAttribute('alt', imageTitle);
          image.setAttribute('title', imageTitle);
          if (settings.supportMultipleDensities) image.setAttribute('srcset', [imageSrc.replace('.png', '_2X.png 2x'), imageSrc.replace('.png', '_3X.png 3x')].join(', '));
          anchor.appendChild(image);
          return anchor;
        }

        function getAddFriendIconUrl(settings) {
          var filename = 'friendadd_' + settings.size + '_' + settings.color + '_' + settings.shape;
          var url = _k.URL.resPrefix + '\/logos\/plusfriend\/' + filename + '.png';
          return url;
        }

        function getChatIconUrl(settings) {
          var filename = settings.title + '_' + settings.size + '_' + settings.color + '_' + settings.shape;
          var url = _k.URL.resPrefix + '\/logos\/plusfriend\/' + filename + '.png';
          return url;
        }

        function getAddFriendUrl(settings) {
          var url = _k.URL.plusFriend + '\/' + settings.plusFriendId + '\/friend';
          if (_k.RUNTIME.appKey) url += '?' + buildQueryString();
          return url;
        }

        function getChatUrl(settings) {
          var url = _k.URL.plusFriend + '\/' + settings.plusFriendId + '\/chat';
          if (_k.RUNTIME.appKey) url += '?' + buildQueryString();
          return url;
        }

        function buildQueryString() {
          if (!_k.RUNTIME.appKey) {
            throw _k.KakaoError('The app key does not exist. Please call Kakao.init function.');
          }

          var params = {
            api_ver: API_VER,
            kakao_agent: _k.KAKAO_AGENT,
            app_key: _k.RUNTIME.appKey,
            referer: browserProxy.getOrigin() + location.pathname + location.search
          };
          return _.buildQueryString(params);
        }

        var rules = {
          createAddFriendButton: {
            required: {
              container: _.passesOneOf([_.isElement, _.isString]),
              plusFriendId: _.isString
            },
            optional: {
              color: _.isOneOf(['yellow', 'black']),
              shape: _.isOneOf(['rect', 'round']),
              size: _.isOneOf(['small', 'large']),
              supportMultipleDensities: _.isBoolean
            },
            defaults: function defaults(settings) {
              var container = _.getElement(settings.container);

              return container ? {
                plusFriendId: container.getAttribute('data-plusfriend-id'),
                color: container.getAttribute('data-color') || 'yellow',
                shape: container.getAttribute('data-shape') || 'rect',
                size: container.getAttribute('data-size') || 'small',
                supportMultipleDensities: !!container.getAttribute('data-support-multiple-densities')
              } : null;
            }
          },
          addFriend: {
            required: {
              plusFriendId: _.isString
            }
          },
          createChatButton: {
            required: {
              container: _.passesOneOf([_.isElement, _.isString]),
              plusFriendId: _.isString
            },
            optional: {
              color: _.isOneOf(['yellow', 'mono']),
              shape: _.isOneOf(['pc', 'mobile']),
              size: _.isOneOf(['small', 'large']),
              title: _.isOneOf(['consult', 'question']),
              supportMultipleDensities: _.isBoolean
            },
            defaults: function defaults(settings) {
              var container = _.getElement(settings.container);

              return container ? {
                plusFriendId: container.getAttribute('data-plusfriend-id'),
                color: container.getAttribute('data-color') || 'yellow',
                shape: container.getAttribute('data-shape') || 'pc',
                size: container.getAttribute('data-size') || 'small',
                title: container.getAttribute('data-title') || 'consult',
                supportMultipleDensities: !!container.getAttribute('data-support-multiple-densities')
              } : null;
            }
          },
          chat: {
            required: {
              plusFriendId: _.isString
            }
          }
        };

        PlusFriend.cleanup = function () {
          _.each(cleanups, function (func) {
            func();
          });

          cleanups.length = 0;
        };

        return PlusFriend;
      }();
    }, {
      "./browserProxy.js": 9,
      "./common.js": 11,
      "./util.js": 24
    }],
    23: [function (require, module, exports) {
      module.exports = function () {
        var Story = {};

        var _ = require('./util.js');

        var _k = require('./common.js');

        var web2app = require('../vendor/web2app.js');

        var POPUP_NAME = 'kakaostory_social_plugin';
        var POPUP_FEATURES = 'width=670, height=471';
        var cleanups = [];

        Story.createShareButton = function (settings) {
          settings = _k.processRules(settings, rules.createShareButton, 'Story.createShareButton');

          var container = _.getElement(settings.container);

          if (!container) {
            throw new _k.KakaoError('container is required for KakaoStory share button: pass in element or id');
          }

          var anchor = document.createElement('a');
          var img = document.createElement('img');
          anchor.appendChild(img);
          var shareUrl = getShareURL(settings.url, settings.text);
          anchor.setAttribute('href', shareUrl);
          anchor.setAttribute('target', '_blank');

          var handler = function handler(e) {
            if (e.preventDefault) {
              e.preventDefault();
            } else {
              e.returnValue = false;
            }

            _k.windowOpen(shareUrl, POPUP_NAME, POPUP_FEATURES);
          };

          _.addEvent(anchor, 'click', handler);

          var cleanup = function cleanup() {
            _.removeEvent(anchor, 'click', handler);

            container.removeChild(anchor);
          };

          cleanups.push(cleanup);

          img.onload = function (e) {
            var width;
            var height;
            container.appendChild(anchor);

            if (_k.UA.browser.msie && parseInt(_k.UA.browser.version.major) <= 10) {
              width = img.width;
              height = img.height;
            } else {
              width = e.target.width;
              height = e.target.height;
            }

            img.width = width;
            img.height = height;
          };

          img.src = _k.URL.storyIcon;
        };

        Story.share = function (settings) {
          settings = _k.processRules(settings, rules.share, 'Story.share');
          var shareUrl = getShareURL(settings.url, settings.text);

          _k.windowOpen(shareUrl, POPUP_NAME, POPUP_FEATURES);
        };

        Story.open = function (settings) {
          settings = _k.processRules(settings, rules.open, 'Story.open');
          var postContent = (settings.text ? settings.text + '\n' : '') + (settings.url || '');
          var domain = location.hostname || '';
          var urlInfo;
          var appName;

          if (settings.urlInfo) {
            urlInfo = _k.processRules(settings.urlInfo, rules.openUrlInfo, 'Story.open');
            appName = urlInfo.name || '';
          }

          var shareUrl = getStoryOpenURL(postContent, domain, appName || domain, JSON.stringify(urlInfo));
          var androidIntent = "intent:" + shareUrl + "#Intent;" + (settings.install === true ? 'package=com.kakao.story;' : '') + "end;";
          var web2appOptions = {
            urlScheme: shareUrl,
            intentURI: androidIntent,
            appname: 'KakaoStory',
            storeURL: _k.getInstallUrl('com.kakao.story', '486244601'),
            onUnsupportedEnvironment: function onUnsupportedEnvironment() {
              settings.fail && settings.fail();
            }
          };
          web2app(web2appOptions);
        };

        var _followButtonFrameId = 0;

        Story.createFollowButton = function (settings) {
          settings = _k.processRules(settings, rules.createFollowButton, 'Story.createFollowButton');

          var container = _.getElement(settings.container);

          if (!container) {
            throw new _k.KakaoError('container is required for KakaoStory follow button: pass in element or id');
          }

          var frame = document.createElement('iframe');
          var frameId = _followButtonFrameId++;
          frame.src = getFollowURL(settings, frameId);
          frame.setAttribute('frameborder', '0');
          frame.setAttribute('marginwidth', '0');
          frame.setAttribute('marginheight', '0');
          frame.setAttribute('scrolling', 'no');
          var width = settings.showFollowerCount && settings.type === 'horizontal' ? 85 : 59;
          var height = settings.showFollowerCount && settings.type === 'vertical' ? 46 : 20;
          frame.style.width = width + 'px';
          frame.style.height = height + 'px';

          var onMessage = function onMessage(e) {
            if (e.data && /\.kakao\.com$/.test(e.origin) && typeof e.data === 'string') {
              var data = e.data.split(',');
              var originFrameId = parseInt(data[0], 10);
              var afterWidth = parseInt(data[1], 10);
              var afterHeight = parseInt(data[2], 10);

              if (originFrameId !== frameId) {
                return;
              }

              if (width !== afterWidth) {
                width = afterWidth;
                frame.style.width = afterWidth + 'px';
              }

              if (height !== afterHeight) {
                height = afterHeight;
                frame.style.height = afterHeight + 'px';
              }
            }
          };

          container.appendChild(frame);

          _.addEvent(window, 'message', onMessage);

          var cleanup = function cleanup() {
            _.removeEvent(window, 'message', onMessage);

            container.removeChild(frame);
          };

          cleanups.push(cleanup);
        };

        var rules = {
          createShareButton: {
            required: {
              container: _.passesOneOf([_.isElement, _.isString])
            },
            optional: {
              url: _.isString,
              text: _.isString
            },
            defaults: function defaults(settings) {
              var container = _.getElement(settings.container);

              return container ? {
                url: container.getAttribute('data-url') || location.href
              } : null;
            }
          },
          share: {
            optional: {
              url: _.isString,
              text: _.isString
            },
            defaults: {
              url: location.href
            }
          },
          open: {
            optional: {
              url: _.isString,
              text: _.isString,
              urlInfo: _.isObject,
              install: _.isBoolean
            },
            defaults: {
              url: location.href,
              install: false
            }
          },
          openUrlInfo: {
            required: {
              title: _.isString
            },
            optional: {
              desc: _.isString,
              name: _.isString,
              images: _.isArray,
              imageurl: _.isArray,
              type: _.isString
            },
            defaults: {
              type: 'website'
            },
            before: function before(params) {
              if (params.images) {
                params.imageurl = params.images;
                delete params.images;
              }
            }
          },
          createFollowButton: {
            required: {
              container: _.passesOneOf([_.isElement, _.isString]),
              id: _.isString
            },
            optional: {
              type: _.isOneOf(['horizontal', 'vertical']),
              showFollowerCount: _.isBoolean
            },
            defaults: function defaults(settings) {
              var container = _.getElement(settings.container);

              if (container) {
                var defaultValues = {
                  type: container.getAttribute('data-type') || 'horizontal',
                  showFollowerCount: container.getAttribute('data-show-follower-count') !== 'false'
                };
                var dataId = container.getAttribute('data-id');

                if (dataId) {
                  defaultValues.id = dataId;
                }

                return defaultValues;
              } else {
                return null;
              }
            },
            after: function after(settings) {
              if (settings.id.substr(0, 1) !== '@') {
                settings.id = '@' + settings.id;
              }
            }
          }
        };

        function getShareURL(url, text) {
          var params = {
            url: url
          };

          if (text) {
            params.text = text;
          }

          _.extend(params, getStatProperties());

          return _k.URL.storyShare + '?' + _.buildQueryString(params);
        }

        function getStoryOpenURL(postContent, serviceDomain, appName, urlInfo) {
          var params = {
            post: postContent,
            appver: _k.VERSION,
            appid: serviceDomain,
            apiver: '1.0',
            appname: appName
          };

          if (urlInfo) {
            params.urlinfo = urlInfo;
          }

          _.extend(params, getStatProperties());

          return 'storylink://posting?' + _.buildQueryString(params);
        }

        function getFollowURL(settings, frameId) {
          var params = {
            id: settings.id,
            type: settings.type,
            hideFollower: !settings.showFollowerCount,
            frameId: frameId
          };

          _.extend(params, getStatProperties());

          return _k.URL.channelFollow + '?' + _.buildQueryString(params);
        }

        function getStatProperties() {
          var props = {
            kakao_agent: _k.KAKAO_AGENT
          };

          if (_k.RUNTIME.appKey) {
            props.app_key = _k.RUNTIME.appKey;
          }

          return props;
        }

        Story.cleanup = function () {
          _.each(cleanups, function (func, i) {
            func();
          });

          cleanups.length = 0;
        };

        return Story;
      }();
    }, {
      "../vendor/web2app.js": 31,
      "./common.js": 11,
      "./util.js": 24
    }],
    24: [function (require, module, exports) {
      module.exports = function () {
        var _ = {};
        var breaker = {};
        var ArrayProto = Array.prototype;
        var ObjProto = Object.prototype;
        var slice = ArrayProto.slice;
        var concat = ArrayProto.concat;
        var toString = ObjProto.toString;
        var hasOwnProperty = ObjProto.hasOwnProperty;
        var nativeForEach = ArrayProto.forEach;
        var nativeMap = ArrayProto.map;
        var nativeFilter = ArrayProto.filter;
        var nativeEvery = ArrayProto.every;
        var nativeSome = ArrayProto.some;
        var nativeIndexOf = ArrayProto.indexOf;
        var nativeIsArray = Array.isArray;
        var nativeKeys = Object.keys;

        var each = _.each = function (obj, iterator, context) {
          if (obj == null) return obj;

          if (nativeForEach && obj.forEach === nativeForEach) {
            obj.forEach(iterator, context);
          } else if (obj.length === +obj.length) {
            for (var i = 0, length = obj.length; i < length; i++) {
              if (iterator.call(context, obj[i], i, obj) === breaker) return;
            }
          } else {
            var keys = _.keys(obj);

            for (var i = 0, length = keys.length; i < length; i++) {
              if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;
            }
          }

          return obj;
        };

        _.map = function (obj, iterator, context) {
          var results = [];
          if (obj == null) return results;
          if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
          each(obj, function (value, index, list) {
            results.push(iterator.call(context, value, index, list));
          });
          return results;
        };

        _.filter = function (obj, predicate, context) {
          var results = [];
          if (obj == null) return results;
          if (nativeFilter && obj.filter === nativeFilter) return obj.filter(predicate, context);
          each(obj, function (value, index, list) {
            if (predicate.call(context, value, index, list)) results.push(value);
          });
          return results;
        };

        _.every = function (obj, predicate, context) {
          predicate || (predicate = _.identity);
          var result = true;
          if (obj == null) return result;
          if (nativeEvery && obj.every === nativeEvery) return obj.every(predicate, context);
          each(obj, function (value, index, list) {
            if (!(result = result && predicate.call(context, value, index, list))) return breaker;
          });
          return !!result;
        };

        var any = _.any = function (obj, predicate, context) {
          predicate || (predicate = _.identity);
          var result = false;
          if (obj == null) return result;
          if (nativeSome && obj.some === nativeSome) return obj.some(predicate, context);
          each(obj, function (value, index, list) {
            if (result || (result = predicate.call(context, value, index, list))) return breaker;
          });
          return !!result;
        };

        _.contains = function (obj, target) {
          if (obj == null) return false;
          if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
          return any(obj, function (value) {
            return value === target;
          });
        };

        _.difference = function (array) {
          var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
          return _.filter(array, function (value) {
            return !_.contains(rest, value);
          });
        };

        _.partial = function (func) {
          var boundArgs = slice.call(arguments, 1);
          return function () {
            var position = 0;
            var args = boundArgs.slice();

            for (var i = 0, length = args.length; i < length; i++) {
              if (args[i] === _) args[i] = arguments[position++];
            }

            while (position < arguments.length) {
              args.push(arguments[position++]);
            }

            return func.apply(this, args);
          };
        };

        _.after = function (times, func) {
          return function () {
            if (--times < 1) {
              return func.apply(this, arguments);
            }
          };
        };

        _.keys = function (obj) {
          if (!_.isObject(obj)) return [];
          if (nativeKeys) return nativeKeys(obj);
          var keys = [];

          for (var key in obj) {
            if (_.has(obj, key)) keys.push(key);
          }

          return keys;
        };

        _.extend = function (obj) {
          each(slice.call(arguments, 1), function (source) {
            if (source) {
              for (var prop in source) {
                obj[prop] = source[prop];
              }
            }
          });
          return obj;
        };

        _.defaults = function (obj) {
          each(slice.call(arguments, 1), function (source) {
            if (source) {
              for (var prop in source) {
                if (obj[prop] === void 0) obj[prop] = source[prop];
              }
            }
          });
          return obj;
        };

        _.isElement = function (obj) {
          return !!(obj && obj.nodeType === 1);
        };

        _.isArray = nativeIsArray || function (obj) {
          return toString.call(obj) == '[object Array]';
        };

        _.isObject = function (obj) {
          return obj === Object(obj);
        };

        each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Blob', 'File', 'FileList'], function (name) {
          _['is' + name] = function (obj) {
            return toString.call(obj) == '[object ' + name + ']';
          };
        });

        _.isBoolean = function (obj) {
          return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
        };

        _.has = function (obj, key) {
          return hasOwnProperty.call(obj, key);
        };

        _.identity = function (value) {
          return value;
        };

        _.isInteger = function (obj) {
          return _.isNumber(obj) && obj % 1 === 0;
        };

        _.emptyFunc = function () {};

        _.getElement = function (selector) {
          if (_.isElement(selector)) {
            return selector;
          } else if (_.isString(selector)) {
            return document.querySelector(selector);
          } else {
            return null;
          }
        };

        _.addEvent = function (element, event, func) {
          if (element.addEventListener) {
            element.addEventListener(event, func, false);
          } else if (element.attachEvent) {
            element.attachEvent("on" + event, func);
          }
        };

        _.removeEvent = function (element, event, func) {
          if (element.removeEventListener) {
            element.removeEventListener(event, func, false);
          } else if (element.detachEvent) {
            element.detachEvent('on' + event, func);
          }
        };

        _.buildQueryString = function (params, encode) {
          var ret = [];

          for (var key in params) {
            if (!params.hasOwnProperty(key)) continue;
            var value = params[key];

            if (_.isObject(value)) {
              value = JSON.stringify(value);
            }

            var queryKey = encode === false ? key : encodeURIComponent(key);
            var queryValue = encode === false ? value : encodeURIComponent(value);
            ret.push(queryKey + '=' + queryValue);
          }

          return ret.join('&');
        };

        _.getRandomString = function () {
          return Math.random().toString(36).slice(2);
        };

        _.nullify = function (obj) {
          _.each(obj, function (value, key) {
            obj[key] = null;
          });
        };

        _.isOneOf = function (elements) {
          return _.partial(_.contains, elements);
        };

        _.passesOneOf = function (validators) {
          if (!_.isArray(validators)) throw new Error('validators should be an Array');
          return function (obj) {
            return _.any(validators, function (validator) {
              return validator(obj);
            });
          };
        };

        _.isURL = function (obj) {
          var urlPattern = /(http|ftp|https):\/\/[\w-]+(\.[\w-]+)+([\w.,@?^=%&amp;:\/~+#-]*[\w@?^=%&amp;\/~+#-])?/;
          return urlPattern.test(obj);
        };

        _.arrayBufferToString = function (buffer) {
          var stringResult = "";
          var arrayBufferView = new Uint8Array(buffer);
          var length = arrayBufferView.length;
          var CHUNK_SIZE = Math.pow(2, 16);
          var offset, readLength, sub;

          for (offset = 0; offset < length; offset += CHUNK_SIZE) {
            readLength = Math.min(CHUNK_SIZE, length - offset);
            sub = arrayBufferView.subarray(offset, offset + readLength);
            stringResult += String.fromCharCode.apply(null, sub);
          }

          return stringResult;
        };

        _.localStorage = function () {
          var shim = {
            _data: {},
            setItem: function setItem(id, val) {
              return this._data[id] = String(val);
            },
            getItem: function getItem(id) {
              return this._data.hasOwnProperty(id) ? this._data[id] : null;
            },
            removeItem: function removeItem(id) {
              return delete this._data[id];
            },
            clear: function clear() {
              return this._data = {};
            }
          };

          try {
            if ("localStorage" in window) {
              window.localStorage.setItem("store", "");
              window.localStorage.removeItem("store");
              return window.localStorage;
            } else {
              return shim;
            }
          } catch (e) {
            return shim;
          }
        }();

        return _;
      }();
    }, {}],
    25: [function (require, module, exports) {
      module.exports = function () {
        var UA = require('../vendor/userAgent.js')();

        return {
          isAndroidWebView: function isAndroidWebView() {
            return UA.os.android && (olderAndroidWebView() || oldAndroidWebView() || newerAndroidWebView());
          },
          isIOSKakaoTalkWebView: function isIOSKakaoTalkWebView() {
            return UA.os.ios && /KAKAOTALK/i.test(UA.ua);
          },
          isAndroidKakaoTalkWebView: function isAndroidKakaoTalkWebView() {
            return UA.os.android && /KAKAOTALK/i.test(UA.ua);
          },
          isNewerAndroidKakaoTalkWebView: function isNewerAndroidKakaoTalkWebView() {
            return UA.os.android && /KAKAOTALK/i.test(UA.ua) && UA.browser.chrome && UA.browser.version.major >= 71;
          }
        };

        function newerAndroidWebView() {
          return /Version\/\d+\.\d+/i.test(UA.ua) && (/Chrome\/\d+\.\d+\.\d+\.\d+ Mobile/i.test(UA.ua) || /; wv\)/i.test(UA.ua));
        }

        function oldAndroidWebView() {
          return UA.os.version.major == 4 && UA.os.version.minor < 4 && /Version\/\d+.\d+|/i.test(UA.ua);
        }

        function olderAndroidWebView() {
          return UA.os.version.major == 2 && /Version\/\d+.\d+|/i.test(UA.ua);
        }
      };
    }, {
      "../vendor/userAgent.js": 30
    }],
    26: [function (require, module, exports) {
      module.exports = function () {
        var Wishlist = {};

        var _ = require('./util.js');

        var _k = require('./common.js');

        var _poller = require('./auth.withTalk.poller.js');

        var _easyXDM = require('../vendor/easyXDM.js');

        var _api = require('./api.js');

        var _authCommon = require('./auth.common.js');

        var _auth = require('./auth.js');

        var _eventObserver = require('./common/everntObserver');

        var ADD_POPUP_NAME = '_blank';
        var cleanups = [];

        var _wishlistWindow;

        function _closePopup() {
          if (_wishlistWindow && _wishlistWindow.close) {
            _wishlistWindow.close();
          }
        }

        function _getPopupFeatures() {
          function getLeftWindow() {
            if (window.screenLeft) {
              return window.screenLeft;
            }

            if (window.screenX) {
              return window.screenX;
            }

            return 0;
          }

          function getTopWindow() {
            if (window.screenTop) {
              return window.screenTop;
            }

            if (window.screenY) {
              return window.screenY;
            }

            return 0;
          }

          var popupX = screen.width / 2 - 480 / 2 + getLeftWindow();
          var popupY = screen.height / 2 - 700 / 2 + getTopWindow();
          return 'width=480, height=700, scrollbars=yes, resizable=1, left=' + popupX + ', top=' + popupY;
        }

        var setObject = function setObject(settings) {
          var obj = {};
          settings.storeKey && (obj.store_key = settings.storeKey);
          settings.itemId && (obj.item_id = settings.itemId);
          settings.itemName && (obj.item_name = settings.itemName);
          settings.itemUrl && (obj.item_url = settings.itemUrl);
          settings.price && (obj.price = settings.price);
          settings.imageUrl && (obj.image_url = settings.imageUrl);
          settings.discountPrice && (obj.discount_price = settings.discountPrice);
          settings.discountRate && (obj.discount_rate = settings.discountRate);
          settings.imageWidth && (obj.image_width = settings.imageWidth);
          settings.imageHeight && (obj.image_height = settings.imageHeight);
          settings.oneclickPluginId && (obj.oneclick_plugin_id = settings.oneclickPluginId);
          settings.oneclickId && (obj.oneclick_id = settings.oneclickId);
          settings.optionPluginId && (obj.option_plugin_id = settings.optionPluginId);
          settings.productId && (obj.product_id = settings.productId);
          return obj;
        };

        var _authorizeWithWishlist = function _authorizeWithWishlist(settings, authTranId) {
          function onTokenResponse(res) {
            if (res.status === 200 && res.response) {
              var response = JSON.parse(res.response);

              _auth.setAccessToken(response.access_token, true);

              _api.request({
                url: '/v1/api/talk/wishlist/add',
                data: setObject(settings)
              }).then(function (res) {
                settings.success(res);
                settings.always(res);
              })["catch"](function (err) {
                settings.fail(err);
                settings.always(err);
              });
            }
          }

          function isEasyLogin() {
            if (_k.UA.os.ios || _k.UA.os.android) {
              return !/KAKAOTALK/i.test(_k.UA.ua);
            } else {
              return false;
            }
          }

          function onResponse(res) {
            if (res.status === 200 && res.response) {
              var response = JSON.parse(res.response);

              if (response.status == 'ok' && response.code) {
                _poller.stop();

                _closePopup();

                var data = "grant_type=authorization_code&client_id=" + _k.RUNTIME.appKey + "&redirect_uri=JS-SDK&code=" + response.code;

                _authCommon.getToken(_k.URL.authDomain + "/oauth/token", data, onTokenResponse);
              } else if (response.status == 'error' && (response.error_code == '500' || response.error_code == '600')) {
                _poller.stop();

                _closePopup();
              } else {
                try {
                  if (_wishlistWindow.location.href == 'about:blank' && _k.UA.os.ios) {
                    _closePopup();
                  }
                } catch (e) {
                  return false;
                }
              }

              if (!isEasyLogin() && _wishlistWindow && _wishlistWindow.closed) {
                _poller.stop();
              }
            }
          }

          _poller.start(function () {
            if (authTranId) {
              _authCommon.checkAuthorize(_k.URL.authDomain + "/apiweb/code.json?client_id=" + _k.RUNTIME.appKey + "&auth_tran_id=" + authTranId, onResponse);
            }
          }, function () {
            var err = {
              error: 'timeout',
              error_description: 'Account login timed out. Please log in again.',
              error_code: '504',
              status: 'error'
            };
            settings.fail(err);
            settings.always(err);
          });
        };

        function _getLoginUrl(settings, tranId) {
          function getAuthUrl() {
            var params = {
              client_id: _k.RUNTIME.appKey,
              redirect_uri: 'JS-SDK',
              response_type: 'code',
              auth_tran_id: tranId,
              ka: _k.KAKAO_AGENT,
              origin: window.location.origin
            };
            return _k.URL.authorize + '?' + _.buildQueryString(params);
          }

          return getAuthUrl();
        }

        function getWishlistUrl(settings, tranId) {
          var authUrl = _getLoginUrl(settings, tranId);

          var wishlistUrl = _k.URL.wishlistUrl + "?auth_url=" + encodeURIComponent(authUrl);

          if (_k.UA.os.ios && !/KAKAOTALK/i.test(_k.UA.ua)) {
            var talkWebviewUrl = _k.URL.talkInappScheme + "?url=" + encodeURIComponent(wishlistUrl);
            var universallinkUrl = "" + _k.URL.universalKakaoLink + encodeURIComponent(talkWebviewUrl) + "&web=" + encodeURIComponent(wishlistUrl);
            return universallinkUrl;
          } else if (_k.UA.os.android && !/KAKAOTALK/i.test(_k.UA.ua)) {
            var talkWebviewIntent = "intent://inappbrowser?url=" + encodeURIComponent(wishlistUrl) + "#Intent;scheme=kakaotalk;launchFlags=0x08880000;S.browser_fallback_url=" + encodeURIComponent(wishlistUrl) + ";end";
            return talkWebviewIntent;
          } else {
            return wishlistUrl;
          }
        }

        function getWishlistIconUrl(settings) {
          var filename = 'wishlist_' + settings.size + '_yellow' + '_' + settings.shape;
          var url = _k.URL.resPrefix + '\/logos\/wishlist\/' + filename + '.png';
          return url;
        }

        function createImageAnchor(imageSrc, imageTitle, settings) {
          var anchor = document.createElement('a');
          var image = document.createElement('img');
          anchor.setAttribute('href', '#');
          image.setAttribute('src', imageSrc);
          image.setAttribute('alt', imageTitle);
          image.setAttribute('title', imageTitle);
          if (settings.supportMultipleDensities) image.setAttribute('srcset', [imageSrc.replace('.png', '_2X.png 2x'), imageSrc.replace('.png', '_3X.png 3x')].join(', '));
          anchor.appendChild(image);
          return anchor;
        }

        Wishlist.createAddWishlistButton = function (settings) {
          settings = _k.processRules(settings, rules.createAddWishlistButton, 'Wishlist.createAddWishlistButton');

          var container = _.getElement(settings.container);

          if (!container) {
            throw new _k.KakaoError('container is required for creating Wishlist.createAddWishlistButton button: pass in element or id');
          }

          var wishlistIconUrl = getWishlistIconUrl(settings);
          var anchor = createImageAnchor(wishlistIconUrl, 'í¡ì° ì¶ê° ë²í¼', settings);
          container.appendChild(anchor);

          var handler = function handler(e) {
            if (e.preventDefault) {
              e.preventDefault();
            } else {
              e.returnValue = false;
            }

            var authTranId = _authCommon.getTranId();

            _authorizeWithWishlist(settings, authTranId);

            var openUrl = getWishlistUrl(settings, authTranId);
            _wishlistWindow = _k.windowOpen(openUrl, ADD_POPUP_NAME, _getPopupFeatures());
          };

          _.addEvent(anchor, 'click', handler);

          var cleanup = function cleanup() {
            container.removeChild(anchor);

            _.removeEvent(anchor, 'click', handler);
          };

          cleanups.push(cleanup);
        };

        Wishlist.addWishlist = function (settings) {
          settings = _k.processRules(settings, rules.addWishlist, 'Wishlist.addWishlist');

          var authTranId = _authCommon.getTranId();

          _authorizeWithWishlist(settings, authTranId);

          var openUrl = getWishlistUrl(settings, authTranId);
          _wishlistWindow = _k.windowOpen(openUrl, ADD_POPUP_NAME, _getPopupFeatures());
        };

        var commonDefaultSettings = {
          success: _.emptyFunc,
          fail: _.emptyFunc,
          always: _.emptyFunc
        };
        var commonOptionalSettings = {
          success: _.isFunction,
          fail: _.isFunction,
          always: _.isFunction,
          discountPrice: _.isNumber,
          discountRate: _.isNumber,
          imageWidth: _.isNumber,
          imageHeight: _.isNumber,
          oneclickPluginId: _.isString,
          oneclickId: _.isString,
          optionPluginId: _.isString,
          productId: _.isString,
          storeKey: _.isString
        };
        var commonRequiredSettings = {
          itemId: _.isNumber,
          itemName: _.isString,
          itemUrl: _.isString,
          price: _.isNumber,
          imageUrl: _.isString
        };
        var rules = {
          createAddWishlistButton: {
            required: _.extend({
              container: _.passesOneOf([_.isElement, _.isString])
            }, commonRequiredSettings),
            optional: _.extend({
              size: _.isOneOf(['small', 'large']),
              shape: _.isOneOf(['pc', 'mobile']),
              supportMultipleDensities: _.isBoolean
            }, commonOptionalSettings),
            defaults: function defaults(settings) {
              var container = _.getElement(settings.container);

              return _.extend(container ? {
                size: container.getAttribute('data-size') || 'large',
                shape: container.getAttribute('data-shape') || 'pc',
                supportMultipleDensities: !!container.getAttribute('data-support-multiple-densities')
              } : {}, commonDefaultSettings);
            }
          },
          addWishlist: {
            required: commonRequiredSettings,
            optional: commonOptionalSettings,
            defaults: commonDefaultSettings
          }
        };

        Wishlist.cleanup = function () {
          _.each(cleanups, function (func) {
            func();
          });

          cleanups.length = 0;
        };

        return Wishlist;
      }();
    }, {
      "../vendor/easyXDM.js": 28,
      "./api.js": 4,
      "./auth.common.js": 5,
      "./auth.js": 6,
      "./auth.withTalk.poller.js": 8,
      "./common.js": 11,
      "./common/everntObserver": 13,
      "./util.js": 24
    }],
    27: [function (require, module, exports) {
      module.exports = function () {
        var CryptoJS = CryptoJS || function (u, p) {
          var d = {},
              l = d.lib = {},
              s = function s() {},
              t = l.Base = {
            extend: function extend(a) {
              s.prototype = this;
              var c = new s();
              a && c.mixIn(a);
              c.hasOwnProperty("init") || (c.init = function () {
                c.$super.init.apply(this, arguments);
              });
              c.init.prototype = c;
              c.$super = this;
              return c;
            },
            create: function create() {
              var a = this.extend();
              a.init.apply(a, arguments);
              return a;
            },
            init: function init() {},
            mixIn: function mixIn(a) {
              for (var c in a) {
                a.hasOwnProperty(c) && (this[c] = a[c]);
              }

              a.hasOwnProperty("toString") && (this.toString = a.toString);
            },
            clone: function clone() {
              return this.init.prototype.extend(this);
            }
          },
              r = l.WordArray = t.extend({
            init: function init(a, c) {
              a = this.words = a || [];
              this.sigBytes = c != p ? c : 4 * a.length;
            },
            toString: function toString(a) {
              return (a || v).stringify(this);
            },
            concat: function concat(a) {
              var c = this.words,
                  e = a.words,
                  j = this.sigBytes;
              a = a.sigBytes;
              this.clamp();
              if (j % 4) for (var k = 0; k < a; k++) {
                c[j + k >>> 2] |= (e[k >>> 2] >>> 24 - 8 * (k % 4) & 255) << 24 - 8 * ((j + k) % 4);
              } else if (65535 < e.length) for (k = 0; k < a; k += 4) {
                c[j + k >>> 2] = e[k >>> 2];
              } else c.push.apply(c, e);
              this.sigBytes += a;
              return this;
            },
            clamp: function clamp() {
              var a = this.words,
                  c = this.sigBytes;
              a[c >>> 2] &= 4294967295 << 32 - 8 * (c % 4);
              a.length = u.ceil(c / 4);
            },
            clone: function clone() {
              var a = t.clone.call(this);
              a.words = this.words.slice(0);
              return a;
            },
            random: function random(a) {
              for (var c = [], e = 0; e < a; e += 4) {
                c.push(4294967296 * u.random() | 0);
              }

              return new r.init(c, a);
            }
          }),
              w = d.enc = {},
              v = w.Hex = {
            stringify: function stringify(a) {
              var c = a.words;
              a = a.sigBytes;

              for (var e = [], j = 0; j < a; j++) {
                var k = c[j >>> 2] >>> 24 - 8 * (j % 4) & 255;
                e.push((k >>> 4).toString(16));
                e.push((k & 15).toString(16));
              }

              return e.join("");
            },
            parse: function parse(a) {
              for (var c = a.length, e = [], j = 0; j < c; j += 2) {
                e[j >>> 3] |= parseInt(a.substr(j, 2), 16) << 24 - 4 * (j % 8);
              }

              return new r.init(e, c / 2);
            }
          },
              b = w.Latin1 = {
            stringify: function stringify(a) {
              var c = a.words;
              a = a.sigBytes;

              for (var e = [], j = 0; j < a; j++) {
                e.push(String.fromCharCode(c[j >>> 2] >>> 24 - 8 * (j % 4) & 255));
              }

              return e.join("");
            },
            parse: function parse(a) {
              for (var c = a.length, e = [], j = 0; j < c; j++) {
                e[j >>> 2] |= (a.charCodeAt(j) & 255) << 24 - 8 * (j % 4);
              }

              return new r.init(e, c);
            }
          },
              x = w.Utf8 = {
            stringify: function stringify(a) {
              try {
                return decodeURIComponent(escape(b.stringify(a)));
              } catch (c) {
                throw Error("Malformed UTF-8 data");
              }
            },
            parse: function parse(a) {
              return b.parse(unescape(encodeURIComponent(a)));
            }
          },
              q = l.BufferedBlockAlgorithm = t.extend({
            reset: function reset() {
              this._data = new r.init();
              this._nDataBytes = 0;
            },
            _append: function _append(a) {
              "string" == typeof a && (a = x.parse(a));

              this._data.concat(a);

              this._nDataBytes += a.sigBytes;
            },
            _process: function _process(a) {
              var c = this._data,
                  e = c.words,
                  j = c.sigBytes,
                  k = this.blockSize,
                  b = j / (4 * k),
                  b = a ? u.ceil(b) : u.max((b | 0) - this._minBufferSize, 0);
              a = b * k;
              j = u.min(4 * a, j);

              if (a) {
                for (var q = 0; q < a; q += k) {
                  this._doProcessBlock(e, q);
                }

                q = e.splice(0, a);
                c.sigBytes -= j;
              }

              return new r.init(q, j);
            },
            clone: function clone() {
              var a = t.clone.call(this);
              a._data = this._data.clone();
              return a;
            },
            _minBufferSize: 0
          });

          l.Hasher = q.extend({
            cfg: t.extend(),
            init: function init(a) {
              this.cfg = this.cfg.extend(a);
              this.reset();
            },
            reset: function reset() {
              q.reset.call(this);

              this._doReset();
            },
            update: function update(a) {
              this._append(a);

              this._process();

              return this;
            },
            finalize: function finalize(a) {
              a && this._append(a);
              return this._doFinalize();
            },
            blockSize: 16,
            _createHelper: function _createHelper(a) {
              return function (b, e) {
                return new a.init(e).finalize(b);
              };
            },
            _createHmacHelper: function _createHmacHelper(a) {
              return function (b, e) {
                return new n.HMAC.init(a, e).finalize(b);
              };
            }
          });
          var n = d.algo = {};
          return d;
        }(Math);

        (function () {
          var u = CryptoJS,
              p = u.lib.WordArray;
          u.enc.Base64 = {
            stringify: function stringify(d) {
              var l = d.words,
                  p = d.sigBytes,
                  t = this._map;
              d.clamp();
              d = [];

              for (var r = 0; r < p; r += 3) {
                for (var w = (l[r >>> 2] >>> 24 - 8 * (r % 4) & 255) << 16 | (l[r + 1 >>> 2] >>> 24 - 8 * ((r + 1) % 4) & 255) << 8 | l[r + 2 >>> 2] >>> 24 - 8 * ((r + 2) % 4) & 255, v = 0; 4 > v && r + 0.75 * v < p; v++) {
                  d.push(t.charAt(w >>> 6 * (3 - v) & 63));
                }
              }

              if (l = t.charAt(64)) for (; d.length % 4;) {
                d.push(l);
              }
              return d.join("");
            },
            parse: function parse(d) {
              var l = d.length,
                  s = this._map,
                  t = s.charAt(64);
              t && (t = d.indexOf(t), -1 != t && (l = t));

              for (var t = [], r = 0, w = 0; w < l; w++) {
                if (w % 4) {
                  var v = s.indexOf(d.charAt(w - 1)) << 2 * (w % 4),
                      b = s.indexOf(d.charAt(w)) >>> 6 - 2 * (w % 4);
                  t[r >>> 2] |= (v | b) << 24 - 8 * (r % 4);
                  r++;
                }
              }

              return p.create(t, r);
            },
            _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
          };
        })();

        (function (u) {
          function p(b, n, a, c, e, j, k) {
            b = b + (n & a | ~n & c) + e + k;
            return (b << j | b >>> 32 - j) + n;
          }

          function d(b, n, a, c, e, j, k) {
            b = b + (n & c | a & ~c) + e + k;
            return (b << j | b >>> 32 - j) + n;
          }

          function l(b, n, a, c, e, j, k) {
            b = b + (n ^ a ^ c) + e + k;
            return (b << j | b >>> 32 - j) + n;
          }

          function s(b, n, a, c, e, j, k) {
            b = b + (a ^ (n | ~c)) + e + k;
            return (b << j | b >>> 32 - j) + n;
          }

          for (var t = CryptoJS, r = t.lib, w = r.WordArray, v = r.Hasher, r = t.algo, b = [], x = 0; 64 > x; x++) {
            b[x] = 4294967296 * u.abs(u.sin(x + 1)) | 0;
          }

          r = r.MD5 = v.extend({
            _doReset: function _doReset() {
              this._hash = new w.init([1732584193, 4023233417, 2562383102, 271733878]);
            },
            _doProcessBlock: function _doProcessBlock(q, n) {
              for (var a = 0; 16 > a; a++) {
                var c = n + a,
                    e = q[c];
                q[c] = (e << 8 | e >>> 24) & 16711935 | (e << 24 | e >>> 8) & 4278255360;
              }

              var a = this._hash.words,
                  c = q[n + 0],
                  e = q[n + 1],
                  j = q[n + 2],
                  k = q[n + 3],
                  z = q[n + 4],
                  r = q[n + 5],
                  t = q[n + 6],
                  w = q[n + 7],
                  v = q[n + 8],
                  A = q[n + 9],
                  B = q[n + 10],
                  C = q[n + 11],
                  u = q[n + 12],
                  D = q[n + 13],
                  E = q[n + 14],
                  x = q[n + 15],
                  f = a[0],
                  m = a[1],
                  g = a[2],
                  h = a[3],
                  f = p(f, m, g, h, c, 7, b[0]),
                  h = p(h, f, m, g, e, 12, b[1]),
                  g = p(g, h, f, m, j, 17, b[2]),
                  m = p(m, g, h, f, k, 22, b[3]),
                  f = p(f, m, g, h, z, 7, b[4]),
                  h = p(h, f, m, g, r, 12, b[5]),
                  g = p(g, h, f, m, t, 17, b[6]),
                  m = p(m, g, h, f, w, 22, b[7]),
                  f = p(f, m, g, h, v, 7, b[8]),
                  h = p(h, f, m, g, A, 12, b[9]),
                  g = p(g, h, f, m, B, 17, b[10]),
                  m = p(m, g, h, f, C, 22, b[11]),
                  f = p(f, m, g, h, u, 7, b[12]),
                  h = p(h, f, m, g, D, 12, b[13]),
                  g = p(g, h, f, m, E, 17, b[14]),
                  m = p(m, g, h, f, x, 22, b[15]),
                  f = d(f, m, g, h, e, 5, b[16]),
                  h = d(h, f, m, g, t, 9, b[17]),
                  g = d(g, h, f, m, C, 14, b[18]),
                  m = d(m, g, h, f, c, 20, b[19]),
                  f = d(f, m, g, h, r, 5, b[20]),
                  h = d(h, f, m, g, B, 9, b[21]),
                  g = d(g, h, f, m, x, 14, b[22]),
                  m = d(m, g, h, f, z, 20, b[23]),
                  f = d(f, m, g, h, A, 5, b[24]),
                  h = d(h, f, m, g, E, 9, b[25]),
                  g = d(g, h, f, m, k, 14, b[26]),
                  m = d(m, g, h, f, v, 20, b[27]),
                  f = d(f, m, g, h, D, 5, b[28]),
                  h = d(h, f, m, g, j, 9, b[29]),
                  g = d(g, h, f, m, w, 14, b[30]),
                  m = d(m, g, h, f, u, 20, b[31]),
                  f = l(f, m, g, h, r, 4, b[32]),
                  h = l(h, f, m, g, v, 11, b[33]),
                  g = l(g, h, f, m, C, 16, b[34]),
                  m = l(m, g, h, f, E, 23, b[35]),
                  f = l(f, m, g, h, e, 4, b[36]),
                  h = l(h, f, m, g, z, 11, b[37]),
                  g = l(g, h, f, m, w, 16, b[38]),
                  m = l(m, g, h, f, B, 23, b[39]),
                  f = l(f, m, g, h, D, 4, b[40]),
                  h = l(h, f, m, g, c, 11, b[41]),
                  g = l(g, h, f, m, k, 16, b[42]),
                  m = l(m, g, h, f, t, 23, b[43]),
                  f = l(f, m, g, h, A, 4, b[44]),
                  h = l(h, f, m, g, u, 11, b[45]),
                  g = l(g, h, f, m, x, 16, b[46]),
                  m = l(m, g, h, f, j, 23, b[47]),
                  f = s(f, m, g, h, c, 6, b[48]),
                  h = s(h, f, m, g, w, 10, b[49]),
                  g = s(g, h, f, m, E, 15, b[50]),
                  m = s(m, g, h, f, r, 21, b[51]),
                  f = s(f, m, g, h, u, 6, b[52]),
                  h = s(h, f, m, g, k, 10, b[53]),
                  g = s(g, h, f, m, B, 15, b[54]),
                  m = s(m, g, h, f, e, 21, b[55]),
                  f = s(f, m, g, h, v, 6, b[56]),
                  h = s(h, f, m, g, x, 10, b[57]),
                  g = s(g, h, f, m, t, 15, b[58]),
                  m = s(m, g, h, f, D, 21, b[59]),
                  f = s(f, m, g, h, z, 6, b[60]),
                  h = s(h, f, m, g, C, 10, b[61]),
                  g = s(g, h, f, m, j, 15, b[62]),
                  m = s(m, g, h, f, A, 21, b[63]);
              a[0] = a[0] + f | 0;
              a[1] = a[1] + m | 0;
              a[2] = a[2] + g | 0;
              a[3] = a[3] + h | 0;
            },
            _doFinalize: function _doFinalize() {
              var b = this._data,
                  n = b.words,
                  a = 8 * this._nDataBytes,
                  c = 8 * b.sigBytes;
              n[c >>> 5] |= 128 << 24 - c % 32;
              var e = u.floor(a / 4294967296);
              n[(c + 64 >>> 9 << 4) + 15] = (e << 8 | e >>> 24) & 16711935 | (e << 24 | e >>> 8) & 4278255360;
              n[(c + 64 >>> 9 << 4) + 14] = (a << 8 | a >>> 24) & 16711935 | (a << 24 | a >>> 8) & 4278255360;
              b.sigBytes = 4 * (n.length + 1);

              this._process();

              b = this._hash;
              n = b.words;

              for (a = 0; 4 > a; a++) {
                c = n[a], n[a] = (c << 8 | c >>> 24) & 16711935 | (c << 24 | c >>> 8) & 4278255360;
              }

              return b;
            },
            clone: function clone() {
              var b = v.clone.call(this);
              b._hash = this._hash.clone();
              return b;
            }
          });
          t.MD5 = v._createHelper(r);
          t.HmacMD5 = v._createHmacHelper(r);
        })(Math);

        (function () {
          var u = CryptoJS,
              p = u.lib,
              d = p.Base,
              l = p.WordArray,
              p = u.algo,
              s = p.EvpKDF = d.extend({
            cfg: d.extend({
              keySize: 4,
              hasher: p.MD5,
              iterations: 1
            }),
            init: function init(d) {
              this.cfg = this.cfg.extend(d);
            },
            compute: function compute(d, r) {
              for (var p = this.cfg, s = p.hasher.create(), b = l.create(), u = b.words, q = p.keySize, p = p.iterations; u.length < q;) {
                n && s.update(n);
                var n = s.update(d).finalize(r);
                s.reset();

                for (var a = 1; a < p; a++) {
                  n = s.finalize(n), s.reset();
                }

                b.concat(n);
              }

              b.sigBytes = 4 * q;
              return b;
            }
          });

          u.EvpKDF = function (d, l, p) {
            return s.create(p).compute(d, l);
          };
        })();

        CryptoJS.lib.Cipher || function (u) {
          var p = CryptoJS,
              d = p.lib,
              l = d.Base,
              s = d.WordArray,
              t = d.BufferedBlockAlgorithm,
              r = p.enc.Base64,
              w = p.algo.EvpKDF,
              v = d.Cipher = t.extend({
            cfg: l.extend(),
            createEncryptor: function createEncryptor(e, a) {
              return this.create(this._ENC_XFORM_MODE, e, a);
            },
            createDecryptor: function createDecryptor(e, a) {
              return this.create(this._DEC_XFORM_MODE, e, a);
            },
            init: function init(e, a, b) {
              this.cfg = this.cfg.extend(b);
              this._xformMode = e;
              this._key = a;
              this.reset();
            },
            reset: function reset() {
              t.reset.call(this);

              this._doReset();
            },
            process: function process(e) {
              this._append(e);

              return this._process();
            },
            finalize: function finalize(e) {
              e && this._append(e);
              return this._doFinalize();
            },
            keySize: 4,
            ivSize: 4,
            _ENC_XFORM_MODE: 1,
            _DEC_XFORM_MODE: 2,
            _createHelper: function _createHelper(e) {
              return {
                encrypt: function encrypt(b, k, d) {
                  return ("string" == typeof k ? c : a).encrypt(e, b, k, d);
                },
                decrypt: function decrypt(b, k, d) {
                  return ("string" == typeof k ? c : a).decrypt(e, b, k, d);
                }
              };
            }
          });
          d.StreamCipher = v.extend({
            _doFinalize: function _doFinalize() {
              return this._process(!0);
            },
            blockSize: 1
          });

          var b = p.mode = {},
              x = function x(e, a, b) {
            var c = this._iv;
            c ? this._iv = u : c = this._prevBlock;

            for (var d = 0; d < b; d++) {
              e[a + d] ^= c[d];
            }
          },
              q = (d.BlockCipherMode = l.extend({
            createEncryptor: function createEncryptor(e, a) {
              return this.Encryptor.create(e, a);
            },
            createDecryptor: function createDecryptor(e, a) {
              return this.Decryptor.create(e, a);
            },
            init: function init(e, a) {
              this._cipher = e;
              this._iv = a;
            }
          })).extend();

          q.Encryptor = q.extend({
            processBlock: function processBlock(e, a) {
              var b = this._cipher,
                  c = b.blockSize;
              x.call(this, e, a, c);
              b.encryptBlock(e, a);
              this._prevBlock = e.slice(a, a + c);
            }
          });
          q.Decryptor = q.extend({
            processBlock: function processBlock(e, a) {
              var b = this._cipher,
                  c = b.blockSize,
                  d = e.slice(a, a + c);
              b.decryptBlock(e, a);
              x.call(this, e, a, c);
              this._prevBlock = d;
            }
          });
          b = b.CBC = q;
          q = (p.pad = {}).Pkcs7 = {
            pad: function pad(a, b) {
              for (var c = 4 * b, c = c - a.sigBytes % c, d = c << 24 | c << 16 | c << 8 | c, l = [], n = 0; n < c; n += 4) {
                l.push(d);
              }

              c = s.create(l, c);
              a.concat(c);
            },
            unpad: function unpad(a) {
              a.sigBytes -= a.words[a.sigBytes - 1 >>> 2] & 255;
            }
          };
          d.BlockCipher = v.extend({
            cfg: v.cfg.extend({
              mode: b,
              padding: q
            }),
            reset: function reset() {
              v.reset.call(this);
              var a = this.cfg,
                  b = a.iv,
                  a = a.mode;
              if (this._xformMode == this._ENC_XFORM_MODE) var c = a.createEncryptor;else c = a.createDecryptor, this._minBufferSize = 1;
              this._mode = c.call(a, this, b && b.words);
            },
            _doProcessBlock: function _doProcessBlock(a, b) {
              this._mode.processBlock(a, b);
            },
            _doFinalize: function _doFinalize() {
              var a = this.cfg.padding;

              if (this._xformMode == this._ENC_XFORM_MODE) {
                a.pad(this._data, this.blockSize);

                var b = this._process(!0);
              } else b = this._process(!0), a.unpad(b);

              return b;
            },
            blockSize: 4
          });
          var n = d.CipherParams = l.extend({
            init: function init(a) {
              this.mixIn(a);
            },
            toString: function toString(a) {
              return (a || this.formatter).stringify(this);
            }
          }),
              b = (p.format = {}).OpenSSL = {
            stringify: function stringify(a) {
              var b = a.ciphertext;
              a = a.salt;
              return (a ? s.create([1398893684, 1701076831]).concat(a).concat(b) : b).toString(r);
            },
            parse: function parse(a) {
              a = r.parse(a);
              var b = a.words;

              if (1398893684 == b[0] && 1701076831 == b[1]) {
                var c = s.create(b.slice(2, 4));
                b.splice(0, 4);
                a.sigBytes -= 16;
              }

              return n.create({
                ciphertext: a,
                salt: c
              });
            }
          },
              a = d.SerializableCipher = l.extend({
            cfg: l.extend({
              format: b
            }),
            encrypt: function encrypt(a, b, c, d) {
              d = this.cfg.extend(d);
              var l = a.createEncryptor(c, d);
              b = l.finalize(b);
              l = l.cfg;
              return n.create({
                ciphertext: b,
                key: c,
                iv: l.iv,
                algorithm: a,
                mode: l.mode,
                padding: l.padding,
                blockSize: a.blockSize,
                formatter: d.format
              });
            },
            decrypt: function decrypt(a, b, c, d) {
              d = this.cfg.extend(d);
              b = this._parse(b, d.format);
              return a.createDecryptor(c, d).finalize(b.ciphertext);
            },
            _parse: function _parse(a, b) {
              return "string" == typeof a ? b.parse(a, this) : a;
            }
          }),
              p = (p.kdf = {}).OpenSSL = {
            execute: function execute(a, b, c, d) {
              d || (d = s.random(8));
              a = w.create({
                keySize: b + c
              }).compute(a, d);
              c = s.create(a.words.slice(b), 4 * c);
              a.sigBytes = 4 * b;
              return n.create({
                key: a,
                iv: c,
                salt: d
              });
            }
          },
              c = d.PasswordBasedCipher = a.extend({
            cfg: a.cfg.extend({
              kdf: p
            }),
            encrypt: function encrypt(b, c, d, l) {
              l = this.cfg.extend(l);
              d = l.kdf.execute(d, b.keySize, b.ivSize);
              l.iv = d.iv;
              b = a.encrypt.call(this, b, c, d.key, l);
              b.mixIn(d);
              return b;
            },
            decrypt: function decrypt(b, c, d, l) {
              l = this.cfg.extend(l);
              c = this._parse(c, l.format);
              d = l.kdf.execute(d, b.keySize, b.ivSize, c.salt);
              l.iv = d.iv;
              return a.decrypt.call(this, b, c, d.key, l);
            }
          });
        }();

        (function () {
          for (var u = CryptoJS, p = u.lib.BlockCipher, d = u.algo, l = [], s = [], t = [], r = [], w = [], v = [], b = [], x = [], q = [], n = [], a = [], c = 0; 256 > c; c++) {
            a[c] = 128 > c ? c << 1 : c << 1 ^ 283;
          }

          for (var e = 0, j = 0, c = 0; 256 > c; c++) {
            var k = j ^ j << 1 ^ j << 2 ^ j << 3 ^ j << 4,
                k = k >>> 8 ^ k & 255 ^ 99;
            l[e] = k;
            s[k] = e;
            var z = a[e],
                F = a[z],
                G = a[F],
                y = 257 * a[k] ^ 16843008 * k;
            t[e] = y << 24 | y >>> 8;
            r[e] = y << 16 | y >>> 16;
            w[e] = y << 8 | y >>> 24;
            v[e] = y;
            y = 16843009 * G ^ 65537 * F ^ 257 * z ^ 16843008 * e;
            b[k] = y << 24 | y >>> 8;
            x[k] = y << 16 | y >>> 16;
            q[k] = y << 8 | y >>> 24;
            n[k] = y;
            e ? (e = z ^ a[a[a[G ^ z]]], j ^= a[a[j]]) : e = j = 1;
          }

          var H = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54],
              d = d.AES = p.extend({
            _doReset: function _doReset() {
              for (var a = this._key, c = a.words, d = a.sigBytes / 4, a = 4 * ((this._nRounds = d + 6) + 1), e = this._keySchedule = [], j = 0; j < a; j++) {
                if (j < d) e[j] = c[j];else {
                  var k = e[j - 1];
                  j % d ? 6 < d && 4 == j % d && (k = l[k >>> 24] << 24 | l[k >>> 16 & 255] << 16 | l[k >>> 8 & 255] << 8 | l[k & 255]) : (k = k << 8 | k >>> 24, k = l[k >>> 24] << 24 | l[k >>> 16 & 255] << 16 | l[k >>> 8 & 255] << 8 | l[k & 255], k ^= H[j / d | 0] << 24);
                  e[j] = e[j - d] ^ k;
                }
              }

              c = this._invKeySchedule = [];

              for (d = 0; d < a; d++) {
                j = a - d, k = d % 4 ? e[j] : e[j - 4], c[d] = 4 > d || 4 >= j ? k : b[l[k >>> 24]] ^ x[l[k >>> 16 & 255]] ^ q[l[k >>> 8 & 255]] ^ n[l[k & 255]];
              }
            },
            encryptBlock: function encryptBlock(a, b) {
              this._doCryptBlock(a, b, this._keySchedule, t, r, w, v, l);
            },
            decryptBlock: function decryptBlock(a, c) {
              var d = a[c + 1];
              a[c + 1] = a[c + 3];
              a[c + 3] = d;

              this._doCryptBlock(a, c, this._invKeySchedule, b, x, q, n, s);

              d = a[c + 1];
              a[c + 1] = a[c + 3];
              a[c + 3] = d;
            },
            _doCryptBlock: function _doCryptBlock(a, b, c, d, e, j, l, f) {
              for (var m = this._nRounds, g = a[b] ^ c[0], h = a[b + 1] ^ c[1], k = a[b + 2] ^ c[2], n = a[b + 3] ^ c[3], p = 4, r = 1; r < m; r++) {
                var q = d[g >>> 24] ^ e[h >>> 16 & 255] ^ j[k >>> 8 & 255] ^ l[n & 255] ^ c[p++],
                    s = d[h >>> 24] ^ e[k >>> 16 & 255] ^ j[n >>> 8 & 255] ^ l[g & 255] ^ c[p++],
                    t = d[k >>> 24] ^ e[n >>> 16 & 255] ^ j[g >>> 8 & 255] ^ l[h & 255] ^ c[p++],
                    n = d[n >>> 24] ^ e[g >>> 16 & 255] ^ j[h >>> 8 & 255] ^ l[k & 255] ^ c[p++],
                    g = q,
                    h = s,
                    k = t;
              }

              q = (f[g >>> 24] << 24 | f[h >>> 16 & 255] << 16 | f[k >>> 8 & 255] << 8 | f[n & 255]) ^ c[p++];
              s = (f[h >>> 24] << 24 | f[k >>> 16 & 255] << 16 | f[n >>> 8 & 255] << 8 | f[g & 255]) ^ c[p++];
              t = (f[k >>> 24] << 24 | f[n >>> 16 & 255] << 16 | f[g >>> 8 & 255] << 8 | f[h & 255]) ^ c[p++];
              n = (f[n >>> 24] << 24 | f[g >>> 16 & 255] << 16 | f[h >>> 8 & 255] << 8 | f[k & 255]) ^ c[p++];
              a[b] = q;
              a[b + 1] = s;
              a[b + 2] = t;
              a[b + 3] = n;
            },
            keySize: 8
          });
          u.AES = p._createHelper(d);
        })();

        return CryptoJS;
      }();
    }, {}],
    28: [function (require, module, exports) {
      module.exports = function () {
        (function (O, d, q, L, l, I) {
          var b = this || O;
          var o = Math.floor(Math.random() * 10000);
          var r = Function.prototype;
          var R = /^((http.?:)\/\/([^:\/\s]+)(:\d+)*)/;
          var S = /[\-\w]+\/\.\.\//;
          var G = /([^:])\/\//g;
          var J = "";
          var p = {};
          var N = O.easyXDM;
          var V = "easyXDM_";
          var F;
          var z = false;
          var j;
          var i;

          function D(Y, aa) {
            var Z = _typeof(Y[aa]);

            return Z == "function" || !!(Z == "object" && Y[aa]) || Z == "unknown";
          }

          function v(Y, Z) {
            return !!(_typeof(Y[Z]) == "object" && Y[Z]);
          }

          function s(Y) {
            return Object.prototype.toString.call(Y) === "[object Array]";
          }

          function c() {
            var aa = "Shockwave Flash",
                ae = "application/x-shockwave-flash";

            if (!u(navigator.plugins) && _typeof(navigator.plugins[aa]) == "object") {
              var ac = navigator.plugins[aa].description;

              if (ac && !u(navigator.mimeTypes) && navigator.mimeTypes[ae] && navigator.mimeTypes[ae].enabledPlugin) {
                j = ac.match(/\d+/g);
              }
            }

            if (!j) {
              var Z;

              try {
                Z = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");
                j = Array.prototype.slice.call(Z.GetVariable("$version").match(/(\d+),(\d+),(\d+),(\d+)/), 1);
                Z = null;
              } catch (ad) {}
            }

            if (!j) {
              return false;
            }

            var Y = parseInt(j[0], 10),
                ab = parseInt(j[1], 10);
            i = Y > 9 && ab > 0;
            return true;
          }

          var w, y;

          if (D(O, "addEventListener")) {
            w = function w(aa, Y, Z) {
              aa.addEventListener(Y, Z, false);
            };

            y = function y(aa, Y, Z) {
              aa.removeEventListener(Y, Z, false);
            };
          } else {
            if (D(O, "attachEvent")) {
              w = function w(Y, aa, Z) {
                Y.attachEvent("on" + aa, Z);
              };

              y = function y(Y, aa, Z) {
                Y.detachEvent("on" + aa, Z);
              };
            } else {
              throw new Error("Browser not supported");
            }
          }

          var X = false,
              K = [],
              M;

          if ("readyState" in d) {
            M = d.readyState;
            X = M == "complete" || ~navigator.userAgent.indexOf("AppleWebKit/") && (M == "loaded" || M == "interactive");
          } else {
            X = !!d.body;
          }

          function t() {
            if (X) {
              return;
            }

            X = true;

            for (var Y = 0; Y < K.length; Y++) {
              K[Y]();
            }

            K.length = 0;
          }

          if (!X) {
            if (D(O, "addEventListener")) {
              w(d, "DOMContentLoaded", t);
            } else {
              w(d, "readystatechange", function () {
                if (d.readyState == "complete") {
                  t();
                }
              });

              if (d.documentElement.doScroll && O === top) {
                var h = function h() {
                  if (X) {
                    return;
                  }

                  try {
                    d.documentElement.doScroll("left");
                  } catch (Y) {
                    L(h, 1);
                    return;
                  }

                  t();
                };

                h();
              }
            }

            w(O, "load", t);
          }

          function H(Z, Y) {
            if (X) {
              Z.call(Y);
              return;
            }

            K.push(function () {
              Z.call(Y);
            });
          }

          function n() {
            var aa = parent;

            if (J !== "") {
              for (var Y = 0, Z = J.split("."); Y < Z.length; Y++) {
                aa = aa[Z[Y]];
              }
            }

            return aa.easyXDM;
          }

          function f(Y) {
            O.easyXDM = N;
            J = Y;

            if (J) {
              V = "easyXDM_" + J.replace(".", "_") + "_";
            }

            return p;
          }

          function A(Y) {
            return Y.match(R)[3];
          }

          function g(Y) {
            return Y.match(R)[4] || "";
          }

          function k(aa) {
            if (aa.indexOf("file://") >= 0) {
              return "file://";
            }

            var Y = aa.toLowerCase().match(R);

            if (!Y) {
              return "";
            }

            var ab = Y[2],
                ac = Y[3],
                Z = Y[4] || "";

            if (ab == "http:" && Z == ":80" || ab == "https:" && Z == ":443") {
              Z = "";
            }

            return ab + "//" + ac + Z;
          }

          function C(Y) {
            Y = Y.replace(G, "$1/");

            if (!Y.match(/^(http||https):\/\//)) {
              var Z = Y.substring(0, 1) === "/" ? "" : q.pathname;

              if (Z.substring(Z.length - 1) !== "/") {
                Z = Z.substring(0, Z.lastIndexOf("/") + 1);
              }

              Y = q.protocol + "//" + q.host + Z + Y;
            }

            while (S.test(Y)) {
              Y = Y.replace(S, "");
            }

            return Y;
          }

          function Q(Y, ab) {
            var ad = "",
                aa = Y.indexOf("#");

            if (aa !== -1) {
              ad = Y.substring(aa);
              Y = Y.substring(0, aa);
            }

            var ac = [];

            for (var Z in ab) {
              if (ab.hasOwnProperty(Z)) {
                ac.push(Z + "=" + I(ab[Z]));
              }
            }

            return Y + (z ? "#" : Y.indexOf("?") == -1 ? "?" : "&") + ac.join("&") + ad;
          }

          var T = function (Y) {
            Y = Y.substring(1).split("&");
            var aa = {},
                ab,
                Z = Y.length;

            while (Z--) {
              ab = Y[Z].split("=");
              aa[ab[0]] = l(ab[1]);
            }

            return aa;
          }(/xdm_e=/.test(q.search) ? q.search : q.hash);

          function u(Y) {
            return typeof Y === "undefined";
          }

          var _P = function P() {
            var Z = {};
            var aa = {
              a: [1, 2, 3]
            },
                Y = '{"a":[1,2,3]}';

            if (typeof JSON != "undefined" && typeof JSON.stringify === "function" && JSON.stringify(aa).replace(/\s/g, "") === Y) {
              return JSON;
            }

            if (Object.toJSON) {
              if (Object.toJSON(aa).replace(/\s/g, "") === Y) {
                Z.stringify = Object.toJSON;
              }
            }

            if (typeof String.prototype.evalJSON === "function") {
              aa = Y.evalJSON();

              if (aa.a && aa.a.length === 3 && aa.a[2] === 3) {
                Z.parse = function (ab) {
                  return ab.evalJSON();
                };
              }
            }

            if (Z.stringify && Z.parse) {
              _P = function P() {
                return Z;
              };

              return Z;
            }

            return null;
          };

          function U(Y, Z, aa) {
            var ac;

            for (var ab in Z) {
              if (Z.hasOwnProperty(ab)) {
                if (ab in Y) {
                  ac = Z[ab];

                  if ((typeof ac === "undefined" ? "undefined" : _typeof(ac)) === "object") {
                    U(Y[ab], ac, aa);
                  } else {
                    if (!aa) {
                      Y[ab] = Z[ab];
                    }
                  }
                } else {
                  Y[ab] = Z[ab];
                }
              }
            }

            return Y;
          }

          function a() {
            var Z = d.body.appendChild(d.createElement("form")),
                Y = Z.appendChild(d.createElement("input"));
            Y.name = V + "TEST" + o;
            F = Y !== Z.elements[Y.name];
            d.body.removeChild(Z);
          }

          function B(Z) {
            if (u(F)) {
              a();
            }

            var ad;

            if (F) {
              ad = d.createElement('<iframe name="' + Z.props.name + '"/>');
            } else {
              ad = d.createElement("IFRAME");
              ad.name = Z.props.name;
            }

            ad.id = ad.name = Z.props.name;
            delete Z.props.name;

            if (typeof Z.container == "string") {
              Z.container = d.getElementById(Z.container);
            }

            if (!Z.container) {
              U(ad.style, {
                position: "absolute",
                top: "-2000px",
                left: "0px"
              });
              Z.container = d.body;
            }

            var ac = Z.props.src;
            Z.props.src = "javascript:false";
            U(ad, Z.props);
            ad.border = ad.frameBorder = 0;
            ad.allowTransparency = true;
            Z.container.appendChild(ad);

            if (Z.onLoad) {
              w(ad, "load", Z.onLoad);
            }

            if (Z.usePost) {
              var ab = Z.container.appendChild(d.createElement("form")),
                  Y;
              ab.target = ad.name;
              ab.action = ac;
              ab.method = "POST";

              if (_typeof(Z.usePost) === "object") {
                for (var aa in Z.usePost) {
                  if (Z.usePost.hasOwnProperty(aa)) {
                    if (F) {
                      Y = d.createElement('<input name="' + aa + '"/>');
                    } else {
                      Y = d.createElement("INPUT");
                      Y.name = aa;
                    }

                    Y.value = Z.usePost[aa];
                    ab.appendChild(Y);
                  }
                }
              }

              ab.submit();
              ab.parentNode.removeChild(ab);
            } else {
              ad.src = ac;
            }

            Z.props.src = ac;
            return ad;
          }

          function e(Y) {
            return Y.replace(/[-[\]/{}()+.\^$|]/g, "\\$&").replace(/(\*)/g, ".$1").replace(/\?/g, ".");
          }

          function W(ac, aa) {
            if (typeof ac == "string") {
              ac = [ac];
            }

            var Z,
                Y = ac.length;

            while (Y--) {
              var ab = ac[Y].substr(0, 1) === "^" && ac[Y].substr(ac[Y].length - 1, 1) === "$";
              Z = ab ? ac[Y] : "^" + e(ac[Y]) + "$";
              Z = new RegExp(Z);

              if (Z.test(aa)) {
                return true;
              }
            }

            return false;
          }

          function m(aa) {
            var af = aa.protocol,
                Z;
            aa.isHost = aa.isHost || u(T.xdm_p);
            z = aa.hash || false;

            if (!aa.props) {
              aa.props = {};
            }

            if (!aa.isHost) {
              aa.channel = T.xdm_c.replace(/["'<>\\]/g, "");
              aa.secret = T.xdm_s;
              aa.remote = T.xdm_e.replace(/["'<>\\]/g, "");
              af = T.xdm_p;

              if (aa.acl && !W(aa.acl, aa.remote)) {
                throw new Error("Access denied for " + aa.remote);
              }
            } else {
              aa.remote = C(aa.remote);
              aa.channel = aa.channel || "default" + o++;
              aa.secret = Math.random().toString(16).substring(2);

              if (u(af)) {
                if (k(q.href) == k(aa.remote)) {
                  af = "4";
                } else {
                  if (D(O, "postMessage") || D(d, "postMessage")) {
                    af = "1";
                  } else {
                    if (aa.swf && D(O, "ActiveXObject") && c()) {
                      af = "6";
                    } else {
                      if (navigator.product === "Gecko" && "frameElement" in O && navigator.userAgent.indexOf("WebKit") == -1) {
                        af = "5";
                      } else {
                        if (aa.remoteHelper) {
                          af = "2";
                        } else {
                          af = "0";
                        }
                      }
                    }
                  }
                }
              }
            }

            aa.protocol = af;

            switch (af) {
              case "0":
                U(aa, {
                  interval: 100,
                  delay: 2000,
                  useResize: true,
                  useParent: false,
                  usePolling: false
                }, true);

                if (aa.isHost) {
                  if (!aa.local) {
                    var ad = q.protocol + "//" + q.host,
                        Y = d.body.getElementsByTagName("img"),
                        ae;
                    var ab = Y.length;

                    while (ab--) {
                      ae = Y[ab];

                      if (ae.src.substring(0, ad.length) === ad) {
                        aa.local = ae.src;
                        break;
                      }
                    }

                    if (!aa.local) {
                      aa.local = O;
                    }
                  }

                  var ac = {
                    xdm_c: aa.channel,
                    xdm_p: 0
                  };

                  if (aa.local === O) {
                    aa.usePolling = true;
                    aa.useParent = true;
                    aa.local = q.protocol + "//" + q.host + q.pathname + q.search;
                    ac.xdm_e = aa.local;
                    ac.xdm_pa = 1;
                  } else {
                    ac.xdm_e = C(aa.local);
                  }

                  if (aa.container) {
                    aa.useResize = false;
                    ac.xdm_po = 1;
                  }

                  aa.remote = Q(aa.remote, ac);
                } else {
                  U(aa, {
                    useParent: !u(T.xdm_pa),
                    usePolling: !u(T.xdm_po),
                    useResize: aa.useParent ? false : aa.useResize
                  });
                }

                Z = [new p.stack.HashTransport(aa), new p.stack.ReliableBehavior({}), new p.stack.QueueBehavior({
                  encode: true,
                  maxLength: 4000 - aa.remote.length
                }), new p.stack.VerifyBehavior({
                  initiate: aa.isHost
                })];
                break;

              case "1":
                Z = [new p.stack.PostMessageTransport(aa)];
                break;

              case "2":
                if (aa.isHost) {
                  aa.remoteHelper = C(aa.remoteHelper);
                }

                Z = [new p.stack.NameTransport(aa), new p.stack.QueueBehavior(), new p.stack.VerifyBehavior({
                  initiate: aa.isHost
                })];
                break;

              case "3":
                Z = [new p.stack.NixTransport(aa)];
                break;

              case "4":
                Z = [new p.stack.SameOriginTransport(aa)];
                break;

              case "5":
                Z = [new p.stack.FrameElementTransport(aa)];
                break;

              case "6":
                if (!j) {
                  c();
                }

                Z = [new p.stack.FlashTransport(aa)];
                break;
            }

            Z.push(new p.stack.QueueBehavior({
              lazy: aa.lazy,
              remove: true
            }));
            return Z;
          }

          function E(ab) {
            var ac,
                aa = {
              incoming: function incoming(ae, ad) {
                this.up.incoming(ae, ad);
              },
              outgoing: function outgoing(ad, ae) {
                this.down.outgoing(ad, ae);
              },
              callback: function callback(ad) {
                this.up.callback(ad);
              },
              init: function init() {
                this.down.init();
              },
              destroy: function destroy() {
                this.down.destroy();
              }
            };

            for (var Z = 0, Y = ab.length; Z < Y; Z++) {
              ac = ab[Z];
              U(ac, aa, true);

              if (Z !== 0) {
                ac.down = ab[Z - 1];
              }

              if (Z !== Y - 1) {
                ac.up = ab[Z + 1];
              }
            }

            return ac;
          }

          function x(Y) {
            Y.up.down = Y.down;
            Y.down.up = Y.up;
            Y.up = Y.down = null;
          }

          U(p, {
            version: "2.5.00.1",
            query: T,
            stack: {},
            apply: U,
            getJSONObject: _P,
            whenReady: H,
            noConflict: f
          });
          p.DomHelper = {
            on: w,
            un: y,
            requiresJSON: function requiresJSON(Y) {
              if (!v(O, "JSON")) {
                d.write('<script type="text/javascript" src="' + Y + '"><\/script>');
              }
            }
          };

          (function () {
            var Y = {};
            p.Fn = {
              set: function set(Z, aa) {
                Y[Z] = aa;
              },
              get: function get(aa, Z) {
                if (!Y.hasOwnProperty(aa)) {
                  return;
                }

                var ab = Y[aa];

                if (Z) {
                  delete Y[aa];
                }

                return ab;
              }
            };
          })();

          p.Socket = function (Z) {
            var Y = E(m(Z).concat([{
              incoming: function incoming(ac, ab) {
                Z.onMessage(ac, ab);
              },
              callback: function callback(ab) {
                if (Z.onReady) {
                  Z.onReady(ab);
                }
              }
            }])),
                aa = k(Z.remote);
            this.origin = k(Z.remote);

            this.destroy = function () {
              Y.destroy();
            };

            this.postMessage = function (ab) {
              Y.outgoing(ab, aa);
            };

            Y.init();
          };

          p.Rpc = function (aa, Z) {
            if (Z.local) {
              for (var ac in Z.local) {
                if (Z.local.hasOwnProperty(ac)) {
                  var ab = Z.local[ac];

                  if (typeof ab === "function") {
                    Z.local[ac] = {
                      method: ab
                    };
                  }
                }
              }
            }

            var Y = E(m(aa).concat([new p.stack.RpcBehavior(this, Z), {
              callback: function callback(ad) {
                if (aa.onReady) {
                  aa.onReady(ad);
                }
              }
            }]));
            this.origin = k(aa.remote);
            this.context = aa.context || null;

            this.destroy = function () {
              Y.destroy();
            };

            Y.init();
          };

          p.stack.SameOriginTransport = function (Z) {
            var aa, ac, ab, Y;
            return aa = {
              outgoing: function outgoing(ae, af, ad) {
                ab(ae);

                if (ad) {
                  ad();
                }
              },
              destroy: function destroy() {
                if (ac) {
                  ac.parentNode.removeChild(ac);
                  ac = null;
                }
              },
              onDOMReady: function onDOMReady() {
                Y = k(Z.remote);

                if (Z.isHost) {
                  U(Z.props, {
                    src: Q(Z.remote, {
                      xdm_e: q.protocol + "//" + q.host + q.pathname,
                      xdm_c: Z.channel,
                      xdm_p: 4
                    }),
                    name: V + Z.channel + "_provider"
                  });
                  ac = B(Z);
                  p.Fn.set(Z.channel, function (ad) {
                    ab = ad;
                    L(function () {
                      aa.up.callback(true);
                    }, 0);
                    return function (ae) {
                      aa.up.incoming(ae, Y);
                    };
                  });
                } else {
                  ab = n().Fn.get(Z.channel, true)(function (ad) {
                    aa.up.incoming(ad, Y);
                  });
                  L(function () {
                    aa.up.callback(true);
                  }, 0);
                }
              },
              init: function init() {
                H(aa.onDOMReady, aa);
              }
            };
          };

          p.stack.FlashTransport = function (ab) {
            var ad, Y, ac, ae, Z, af;

            function ag(ai, ah) {
              L(function () {
                ad.up.incoming(ai, ae);
              }, 0);
            }

            function aa(ai) {
              var ah = ab.swf + "?host=" + ab.isHost;
              var ak = "easyXDM_swf_" + Math.floor(Math.random() * 10000);
              p.Fn.set("flash_loaded" + ai.replace(/[\-.]/g, "_"), function () {
                p.stack.FlashTransport[ai].swf = Z = af.firstChild;
                var al = p.stack.FlashTransport[ai].queue;

                for (var am = 0; am < al.length; am++) {
                  al[am]();
                }

                al.length = 0;
              });

              if (ab.swfContainer) {
                af = typeof ab.swfContainer == "string" ? d.getElementById(ab.swfContainer) : ab.swfContainer;
              } else {
                af = d.createElement("div");
                U(af.style, i && ab.swfNoThrottle ? {
                  height: "20px",
                  width: "20px",
                  position: "fixed",
                  right: 0,
                  top: 0
                } : {
                  height: "1px",
                  width: "1px",
                  position: "absolute",
                  overflow: "hidden",
                  right: 0,
                  top: 0
                });
                d.body.appendChild(af);
              }

              var aj = "callback=flash_loaded" + I(ai.replace(/[\-.]/g, "_")) + "&proto=" + b.location.protocol + "&domain=" + I(A(b.location.href)) + "&port=" + I(g(b.location.href)) + "&ns=" + I(J);
              af.innerHTML = "<object height='20' width='20' type='application/x-shockwave-flash' id='" + ak + "' data='" + ah + "'><param name='allowScriptAccess' value='always'></param><param name='wmode' value='transparent'><param name='movie' value='" + ah + "'></param><param name='flashvars' value='" + aj + "'></param><embed type='application/x-shockwave-flash' FlashVars='" + aj + "' allowScriptAccess='always' wmode='transparent' src='" + ah + "' height='1' width='1'></embed></object>";
            }

            return ad = {
              outgoing: function outgoing(ai, aj, ah) {
                Z.postMessage(ab.channel, ai.toString());

                if (ah) {
                  ah();
                }
              },
              destroy: function destroy() {
                try {
                  Z.destroyChannel(ab.channel);
                } catch (ah) {}

                Z = null;

                if (Y) {
                  Y.parentNode.removeChild(Y);
                  Y = null;
                }
              },
              onDOMReady: function onDOMReady() {
                ae = ab.remote;
                p.Fn.set("flash_" + ab.channel + "_init", function () {
                  L(function () {
                    ad.up.callback(true);
                  });
                });
                p.Fn.set("flash_" + ab.channel + "_onMessage", ag);
                ab.swf = C(ab.swf);
                var ai = A(ab.swf);

                var ah = function ah() {
                  p.stack.FlashTransport[ai].init = true;
                  Z = p.stack.FlashTransport[ai].swf;
                  Z.createChannel(ab.channel, ab.secret, k(ab.remote), ab.isHost);

                  if (ab.isHost) {
                    if (i && ab.swfNoThrottle) {
                      U(ab.props, {
                        position: "fixed",
                        right: 0,
                        top: 0,
                        height: "20px",
                        width: "20px"
                      });
                    }

                    U(ab.props, {
                      src: Q(ab.remote, {
                        xdm_e: k(q.href),
                        xdm_c: ab.channel,
                        xdm_p: 6,
                        xdm_s: ab.secret
                      }),
                      name: V + ab.channel + "_provider"
                    });
                    Y = B(ab);
                  }
                };

                if (p.stack.FlashTransport[ai] && p.stack.FlashTransport[ai].init) {
                  ah();
                } else {
                  if (!p.stack.FlashTransport[ai]) {
                    p.stack.FlashTransport[ai] = {
                      queue: [ah]
                    };
                    aa(ai);
                  } else {
                    p.stack.FlashTransport[ai].queue.push(ah);
                  }
                }
              },
              init: function init() {
                H(ad.onDOMReady, ad);
              }
            };
          };

          p.stack.PostMessageTransport = function (ac) {
            var ae, af, aa, ab;

            function Z(ag) {
              if (ag.origin) {
                return k(ag.origin);
              }

              if (ag.uri) {
                return k(ag.uri);
              }

              if (ag.domain) {
                return q.protocol + "//" + ag.domain;
              }

              throw "Unable to retrieve the origin of the event";
            }

            function ad(ah) {
              if (typeof ah.data !== "string") {
                return;
              }

              var ag = Z(ah);

              if (ag == ab && typeof ah.data === "string" && ah.data.substring(0, ac.channel.length + 1) == ac.channel + " ") {
                ae.up.incoming(ah.data.substring(ac.channel.length + 1), ag);
              }
            }

            function Y(ag) {
              if (ag.data == ac.channel + "-ready") {
                aa = "postMessage" in af.contentWindow ? af.contentWindow : af.contentWindow.document;
                y(O, "message", Y);
                w(O, "message", ad);
                L(function () {
                  ae.up.callback(true);
                }, 0);
              }
            }

            return ae = {
              outgoing: function outgoing(ah, ai, ag) {
                aa.postMessage(ac.channel + " " + ah, ai || ab);

                if (ag) {
                  ag();
                }
              },
              destroy: function destroy() {
                y(O, "message", Y);
                y(O, "message", ad);

                if (af) {
                  aa = null;
                  af.parentNode.removeChild(af);
                  af = null;
                }
              },
              onDOMReady: function onDOMReady() {
                ab = k(ac.remote);

                if (ab === "file://") {
                  ab = "*";
                }

                if (ac.isHost) {
                  w(O, "message", Y);
                  U(ac.props, {
                    src: Q(ac.remote, {
                      xdm_e: k(q.href),
                      xdm_c: ac.channel,
                      xdm_p: 1
                    }),
                    name: V + ac.channel + "_provider"
                  });
                  af = B(ac);
                } else {
                  w(O, "message", ad);
                  aa = "postMessage" in O.parent ? O.parent : O.parent.document;
                  aa.postMessage(ac.channel + "-ready", ab);
                  L(function () {
                    ae.up.callback(true);
                  }, 0);
                }
              },
              init: function init() {
                H(ae.onDOMReady, ae);
              }
            };
          };

          p.stack.FrameElementTransport = function (Z) {
            var aa, ac, ab, Y;
            return aa = {
              outgoing: function outgoing(ae, af, ad) {
                ab.call(this, ae);

                if (ad) {
                  ad();
                }
              },
              destroy: function destroy() {
                if (ac) {
                  ac.parentNode.removeChild(ac);
                  ac = null;
                }
              },
              onDOMReady: function onDOMReady() {
                Y = k(Z.remote);

                if (Z.isHost) {
                  U(Z.props, {
                    src: Q(Z.remote, {
                      xdm_e: k(q.href),
                      xdm_c: Z.channel,
                      xdm_p: 5
                    }),
                    name: V + Z.channel + "_provider"
                  });
                  ac = B(Z);

                  ac.fn = function (ad) {
                    delete ac.fn;
                    ab = ad;
                    L(function () {
                      aa.up.callback(true);
                    }, 0);
                    return function (ae) {
                      aa.up.incoming(ae, Y);
                    };
                  };
                } else {
                  if (d.referrer && k(d.referrer) != T.xdm_e) {
                    O.top.location = T.xdm_e;
                  }

                  ab = O.frameElement.fn(function (ad) {
                    aa.up.incoming(ad, Y);
                  });
                  aa.up.callback(true);
                }
              },
              init: function init() {
                H(aa.onDOMReady, aa);
              }
            };
          };

          p.stack.NameTransport = function (ac) {
            var ad;
            var af, aj, ab, ah, ai, Z, Y;

            function ag(am) {
              var al = ac.remoteHelper + (af ? "#_3" : "#_2") + ac.channel;
              aj.contentWindow.sendMessage(am, al);
            }

            function ae() {
              if (af) {
                if (++ah === 2 || !af) {
                  ad.up.callback(true);
                }
              } else {
                ag("ready");
                ad.up.callback(true);
              }
            }

            function ak(al) {
              ad.up.incoming(al, Z);
            }

            function aa() {
              if (ai) {
                L(function () {
                  ai(true);
                }, 0);
              }
            }

            return ad = {
              outgoing: function outgoing(am, an, al) {
                ai = al;
                ag(am);
              },
              destroy: function destroy() {
                aj.parentNode.removeChild(aj);
                aj = null;

                if (af) {
                  ab.parentNode.removeChild(ab);
                  ab = null;
                }
              },
              onDOMReady: function onDOMReady() {
                af = ac.isHost;
                ah = 0;
                Z = k(ac.remote);
                ac.local = C(ac.local);

                if (af) {
                  p.Fn.set(ac.channel, function (am) {
                    if (af && am === "ready") {
                      p.Fn.set(ac.channel, ak);
                      ae();
                    }
                  });
                  Y = Q(ac.remote, {
                    xdm_e: ac.local,
                    xdm_c: ac.channel,
                    xdm_p: 2
                  });
                  U(ac.props, {
                    src: Y + "#" + ac.channel,
                    name: V + ac.channel + "_provider"
                  });
                  ab = B(ac);
                } else {
                  ac.remoteHelper = ac.remote;
                  p.Fn.set(ac.channel, ak);
                }

                var al = function al() {
                  var am = aj || this;
                  y(am, "load", al);
                  p.Fn.set(ac.channel + "_load", aa);

                  (function an() {
                    if (typeof am.contentWindow.sendMessage == "function") {
                      ae();
                    } else {
                      L(an, 50);
                    }
                  })();
                };

                aj = B({
                  props: {
                    src: ac.local + "#_4" + ac.channel
                  },
                  onLoad: al
                });
              },
              init: function init() {
                H(ad.onDOMReady, ad);
              }
            };
          };

          p.stack.HashTransport = function (aa) {
            var ad;
            var ai = this,
                ag,
                ab,
                Y,
                ae,
                an,
                ac,
                am;
            var ah, Z;

            function al(ap) {
              if (!am) {
                return;
              }

              var ao = aa.remote + "#" + an++ + "_" + ap;
              (ag || !ah ? am.contentWindow : am).location = ao;
            }

            function af(ao) {
              ae = ao;
              ad.up.incoming(ae.substring(ae.indexOf("_") + 1), Z);
            }

            function ak() {
              if (!ac) {
                return;
              }

              var ao = ac.location.href,
                  aq = "",
                  ap = ao.indexOf("#");

              if (ap != -1) {
                aq = ao.substring(ap);
              }

              if (aq && aq != ae) {
                af(aq);
              }
            }

            function aj() {
              ab = setInterval(ak, Y);
            }

            return ad = {
              outgoing: function outgoing(ao, ap) {
                al(ao);
              },
              destroy: function destroy() {
                O.clearInterval(ab);

                if (ag || !ah) {
                  am.parentNode.removeChild(am);
                }

                am = null;
              },
              onDOMReady: function onDOMReady() {
                ag = aa.isHost;
                Y = aa.interval;
                ae = "#" + aa.channel;
                an = 0;
                ah = aa.useParent;
                Z = k(aa.remote);

                if (ag) {
                  U(aa.props, {
                    src: aa.remote,
                    name: V + aa.channel + "_provider"
                  });

                  if (ah) {
                    aa.onLoad = function () {
                      ac = O;
                      aj();
                      ad.up.callback(true);
                    };
                  } else {
                    var aq = 0,
                        ao = aa.delay / 50;

                    (function ap() {
                      if (++aq > ao) {
                        throw new Error("Unable to reference listenerwindow");
                      }

                      try {
                        ac = am.contentWindow.frames[V + aa.channel + "_consumer"];
                      } catch (ar) {}

                      if (ac) {
                        aj();
                        ad.up.callback(true);
                      } else {
                        L(ap, 50);
                      }
                    })();
                  }

                  am = B(aa);
                } else {
                  ac = O;
                  aj();

                  if (ah) {
                    am = parent;
                    ad.up.callback(true);
                  } else {
                    U(aa, {
                      props: {
                        src: aa.remote + "#" + aa.channel + new Date(),
                        name: V + aa.channel + "_consumer"
                      },
                      onLoad: function onLoad() {
                        ad.up.callback(true);
                      }
                    });
                    am = B(aa);
                  }
                }
              },
              init: function init() {
                H(ad.onDOMReady, ad);
              }
            };
          };

          p.stack.ReliableBehavior = function (Z) {
            var ab, ad;
            var ac = 0,
                Y = 0,
                aa = "";
            return ab = {
              incoming: function incoming(ag, ae) {
                var af = ag.indexOf("_"),
                    ah = ag.substring(0, af).split(",");
                ag = ag.substring(af + 1);

                if (ah[0] == ac) {
                  aa = "";

                  if (ad) {
                    ad(true);
                  }
                }

                if (ag.length > 0) {
                  ab.down.outgoing(ah[1] + "," + ac + "_" + aa, ae);

                  if (Y != ah[1]) {
                    Y = ah[1];
                    ab.up.incoming(ag, ae);
                  }
                }
              },
              outgoing: function outgoing(ag, ae, af) {
                aa = ag;
                ad = af;
                ab.down.outgoing(Y + "," + ++ac + "_" + ag, ae);
              }
            };
          };

          p.stack.QueueBehavior = function (aa) {
            var ad,
                ae = [],
                ah = true,
                ab = "",
                ag,
                Y = 0,
                Z = false,
                ac = false;

            function af() {
              if (aa.remove && ae.length === 0) {
                x(ad);
                return;
              }

              if (ah || ae.length === 0 || ag) {
                return;
              }

              ah = true;
              var ai = ae.shift();
              ad.down.outgoing(ai.data, ai.origin, function (aj) {
                ah = false;

                if (ai.callback) {
                  L(function () {
                    ai.callback(aj);
                  }, 0);
                }

                af();
              });
            }

            return ad = {
              init: function init() {
                if (u(aa)) {
                  aa = {};
                }

                if (aa.maxLength) {
                  Y = aa.maxLength;
                  ac = true;
                }

                if (aa.lazy) {
                  Z = true;
                } else {
                  ad.down.init();
                }
              },
              callback: function callback(aj) {
                ah = false;
                var ai = ad.up;
                af();
                ai.callback(aj);
              },
              incoming: function incoming(al, aj) {
                if (ac) {
                  var ak = al.indexOf("_"),
                      ai = parseInt(al.substring(0, ak), 10);
                  ab += al.substring(ak + 1);

                  if (ai === 0) {
                    if (aa.encode) {
                      ab = l(ab);
                    }

                    ad.up.incoming(ab, aj);
                    ab = "";
                  }
                } else {
                  ad.up.incoming(al, aj);
                }
              },
              outgoing: function outgoing(am, aj, al) {
                if (aa.encode) {
                  am = I(am);
                }

                var ai = [],
                    ak;

                if (ac) {
                  while (am.length !== 0) {
                    ak = am.substring(0, Y);
                    am = am.substring(ak.length);
                    ai.push(ak);
                  }

                  while (ak = ai.shift()) {
                    ae.push({
                      data: ai.length + "_" + ak,
                      origin: aj,
                      callback: ai.length === 0 ? al : null
                    });
                  }
                } else {
                  ae.push({
                    data: am,
                    origin: aj,
                    callback: al
                  });
                }

                if (Z) {
                  ad.down.init();
                } else {
                  af();
                }
              },
              destroy: function destroy() {
                ag = true;
                ad.down.destroy();
              }
            };
          };

          p.stack.VerifyBehavior = function (ac) {
            var ad,
                ab,
                Z,
                aa = false;

            function Y() {
              ab = Math.random().toString(16).substring(2);
              ad.down.outgoing(ab);
            }

            return ad = {
              incoming: function incoming(ag, ae) {
                var af = ag.indexOf("_");

                if (af === -1) {
                  if (ag === ab) {
                    ad.up.callback(true);
                  } else {
                    if (!Z) {
                      Z = ag;

                      if (!ac.initiate) {
                        Y();
                      }

                      ad.down.outgoing(ag);
                    }
                  }
                } else {
                  if (ag.substring(0, af) === Z) {
                    ad.up.incoming(ag.substring(af + 1), ae);
                  }
                }
              },
              outgoing: function outgoing(ag, ae, af) {
                ad.down.outgoing(ab + "_" + ag, ae, af);
              },
              callback: function callback(ae) {
                if (ac.initiate) {
                  Y();
                }
              }
            };
          };

          p.stack.RpcBehavior = function (ae, Z) {
            var ab,
                ag = Z.serializer || _P();

            var af = 0,
                ad = {};

            function Y(ah) {
              ah.jsonrpc = "2.0";
              ab.down.outgoing(ag.stringify(ah));
            }

            function ac(ah, aj) {
              var ai = Array.prototype.slice;
              return function () {
                var ak = arguments.length,
                    am,
                    al = {
                  method: aj
                };

                if (ak > 0 && typeof arguments[ak - 1] === "function") {
                  if (ak > 1 && typeof arguments[ak - 2] === "function") {
                    am = {
                      success: arguments[ak - 2],
                      error: arguments[ak - 1]
                    };
                    al.params = ai.call(arguments, 0, ak - 2);
                  } else {
                    am = {
                      success: arguments[ak - 1]
                    };
                    al.params = ai.call(arguments, 0, ak - 1);
                  }

                  ad["" + ++af] = am;
                  al.id = af;
                } else {
                  al.params = ai.call(arguments, 0);
                }

                if (ah.namedParams && al.params.length === 1) {
                  al.params = al.params[0];
                }

                Y(al);
              };
            }

            function aa(ah, aj, an, al) {
              if (!an) {
                if (aj) {
                  Y({
                    id: aj,
                    error: {
                      code: -32601,
                      message: "Procedure not found."
                    }
                  });
                }

                return;
              }

              var _ao, _am;

              if (aj) {
                _ao = function ao(aq) {
                  _ao = r;
                  Y({
                    id: aj,
                    result: aq
                  });
                };

                _am = function am(aq, ar) {
                  _am = r;
                  var at = {
                    id: aj,
                    error: {
                      code: -32099,
                      message: aq
                    }
                  };

                  if (ar) {
                    at.error.data = ar;
                  }

                  Y(at);
                };
              } else {
                _ao = _am = r;
              }

              if (!s(al)) {
                al = [al];
              }

              try {
                var ak = ae.context || an.scope;
                var ap = an.method.apply(ak, al.concat([_ao, _am]));

                if (!u(ap)) {
                  _ao(ap);
                }
              } catch (ai) {
                _am(ai.message);
              }
            }

            return ab = {
              incoming: function incoming(ai, ah) {
                var aj = ag.parse(ai);

                if (aj.method) {
                  if (Z.handle) {
                    Z.handle(aj, Y);
                  } else {
                    aa(aj.method, aj.id, Z.local[aj.method], aj.params);
                  }
                } else {
                  var ak = ad[aj.id];

                  if (aj.error) {
                    if (ak.error) {
                      ak.error(aj.error);
                    }
                  } else {
                    if (ak.success) {
                      ak.success(aj.result);
                    }
                  }

                  delete ad[aj.id];
                }
              },
              init: function init() {
                if (Z.remote) {
                  for (var ah in Z.remote) {
                    if (Z.remote.hasOwnProperty(ah)) {
                      ae[ah] = ac(Z.remote[ah], ah);
                    }
                  }
                }

                ab.down.init();
              },
              destroy: function destroy() {
                for (var ah in Z.remote) {
                  if (Z.remote.hasOwnProperty(ah) && ae.hasOwnProperty(ah)) {
                    delete ae[ah];
                  }
                }

                ab.down.destroy();
              }
            };
          };

          b.easyXDM = p;
        })(window, document, location, window.setTimeout, decodeURIComponent, encodeURIComponent);

        return easyXDM.noConflict('Kakao');
      }();
    }, {}],
    29: [function (require, module, exports) {
      (function (process, global, setImmediate) {
        (function () {
          "use strict";

          function lib$es6$promise$utils$$objectOrFunction(x) {
            return typeof x === "function" || (typeof x === "undefined" ? "undefined" : _typeof(x)) === "object" && x !== null;
          }

          function lib$es6$promise$utils$$isFunction(x) {
            return typeof x === "function";
          }

          function lib$es6$promise$utils$$isMaybeThenable(x) {
            return (typeof x === "undefined" ? "undefined" : _typeof(x)) === "object" && x !== null;
          }

          var lib$es6$promise$utils$$_isArray;

          if (!Array.isArray) {
            lib$es6$promise$utils$$_isArray = function lib$es6$promise$utils$$_isArray(x) {
              return Object.prototype.toString.call(x) === "[object Array]";
            };
          } else {
            lib$es6$promise$utils$$_isArray = Array.isArray;
          }

          var lib$es6$promise$utils$$isArray = lib$es6$promise$utils$$_isArray;
          var lib$es6$promise$asap$$len = 0;
          var lib$es6$promise$asap$$toString = {}.toString;
          var lib$es6$promise$asap$$vertxNext;

          function lib$es6$promise$asap$$asap(callback, arg) {
            lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len] = callback;
            lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len + 1] = arg;
            lib$es6$promise$asap$$len += 2;

            if (lib$es6$promise$asap$$len === 2) {
              lib$es6$promise$asap$$scheduleFlush();
            }
          }

          var lib$es6$promise$asap$$default = lib$es6$promise$asap$$asap;
          var lib$es6$promise$asap$$browserWindow = typeof window !== "undefined" ? window : undefined;
          var lib$es6$promise$asap$$browserGlobal = lib$es6$promise$asap$$browserWindow || {};
          var lib$es6$promise$asap$$BrowserMutationObserver = lib$es6$promise$asap$$browserGlobal.MutationObserver || lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;
          var lib$es6$promise$asap$$isNode = typeof process !== "undefined" && {}.toString.call(process) === "[object process]";
          var lib$es6$promise$asap$$isWorker = typeof Uint8ClampedArray !== "undefined" && typeof importScripts !== "undefined" && typeof MessageChannel !== "undefined";

          function lib$es6$promise$asap$$useNextTick() {
            var nextTick = process.nextTick;
            var version = process.versions.node.match(/^(?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)$/);

            if (Array.isArray(version) && version[1] === "0" && version[2] === "10") {
              nextTick = setImmediate;
            }

            return function () {
              nextTick(lib$es6$promise$asap$$flush);
            };
          }

          function lib$es6$promise$asap$$useVertxTimer() {
            return function () {
              lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);
            };
          }

          function lib$es6$promise$asap$$useMutationObserver() {
            var iterations = 0;
            var observer = new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);
            var node = document.createTextNode("");
            observer.observe(node, {
              characterData: true
            });
            return function () {
              node.data = iterations = ++iterations % 2;
            };
          }

          function lib$es6$promise$asap$$useMessageChannel() {
            var channel = new MessageChannel();
            channel.port1.onmessage = lib$es6$promise$asap$$flush;
            return function () {
              channel.port2.postMessage(0);
            };
          }

          function lib$es6$promise$asap$$useSetTimeout() {
            return function () {
              setTimeout(lib$es6$promise$asap$$flush, 1);
            };
          }

          var lib$es6$promise$asap$$queue = new Array(1e3);

          function lib$es6$promise$asap$$flush() {
            for (var i = 0; i < lib$es6$promise$asap$$len; i += 2) {
              var callback = lib$es6$promise$asap$$queue[i];
              var arg = lib$es6$promise$asap$$queue[i + 1];
              callback(arg);
              lib$es6$promise$asap$$queue[i] = undefined;
              lib$es6$promise$asap$$queue[i + 1] = undefined;
            }

            lib$es6$promise$asap$$len = 0;
          }

          function lib$es6$promise$asap$$attemptVertex() {
            try {
              var r = require;
              var vertx = r("vertx");
              lib$es6$promise$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;
              return lib$es6$promise$asap$$useVertxTimer();
            } catch (e) {
              return lib$es6$promise$asap$$useSetTimeout();
            }
          }

          var lib$es6$promise$asap$$scheduleFlush;

          if (lib$es6$promise$asap$$isNode) {
            lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useNextTick();
          } else if (lib$es6$promise$asap$$BrowserMutationObserver) {
            lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMutationObserver();
          } else if (lib$es6$promise$asap$$isWorker) {
            lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMessageChannel();
          } else if (lib$es6$promise$asap$$browserWindow === undefined && typeof require === "function") {
            lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$attemptVertex();
          } else {
            lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useSetTimeout();
          }

          function lib$es6$promise$$internal$$noop() {}

          var lib$es6$promise$$internal$$PENDING = void 0;
          var lib$es6$promise$$internal$$FULFILLED = 1;
          var lib$es6$promise$$internal$$REJECTED = 2;
          var lib$es6$promise$$internal$$GET_THEN_ERROR = new lib$es6$promise$$internal$$ErrorObject();

          function lib$es6$promise$$internal$$selfFullfillment() {
            return new TypeError("You cannot resolve a promise with itself");
          }

          function lib$es6$promise$$internal$$cannotReturnOwn() {
            return new TypeError("A promises callback cannot return that same promise.");
          }

          function lib$es6$promise$$internal$$getThen(promise) {
            try {
              return promise.then;
            } catch (error) {
              lib$es6$promise$$internal$$GET_THEN_ERROR.error = error;
              return lib$es6$promise$$internal$$GET_THEN_ERROR;
            }
          }

          function lib$es6$promise$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {
            try {
              then.call(value, fulfillmentHandler, rejectionHandler);
            } catch (e) {
              return e;
            }
          }

          function lib$es6$promise$$internal$$handleForeignThenable(promise, thenable, then) {
            lib$es6$promise$asap$$default(function (promise) {
              var sealed = false;
              var error = lib$es6$promise$$internal$$tryThen(then, thenable, function (value) {
                if (sealed) {
                  return;
                }

                sealed = true;

                if (thenable !== value) {
                  lib$es6$promise$$internal$$resolve(promise, value);
                } else {
                  lib$es6$promise$$internal$$fulfill(promise, value);
                }
              }, function (reason) {
                if (sealed) {
                  return;
                }

                sealed = true;
                lib$es6$promise$$internal$$reject(promise, reason);
              }, "Settle: " + (promise._label || " unknown promise"));

              if (!sealed && error) {
                sealed = true;
                lib$es6$promise$$internal$$reject(promise, error);
              }
            }, promise);
          }

          function lib$es6$promise$$internal$$handleOwnThenable(promise, thenable) {
            if (thenable._state === lib$es6$promise$$internal$$FULFILLED) {
              lib$es6$promise$$internal$$fulfill(promise, thenable._result);
            } else if (thenable._state === lib$es6$promise$$internal$$REJECTED) {
              lib$es6$promise$$internal$$reject(promise, thenable._result);
            } else {
              lib$es6$promise$$internal$$subscribe(thenable, undefined, function (value) {
                lib$es6$promise$$internal$$resolve(promise, value);
              }, function (reason) {
                lib$es6$promise$$internal$$reject(promise, reason);
              });
            }
          }

          function lib$es6$promise$$internal$$handleMaybeThenable(promise, maybeThenable) {
            if (maybeThenable.constructor === promise.constructor) {
              lib$es6$promise$$internal$$handleOwnThenable(promise, maybeThenable);
            } else {
              var then = lib$es6$promise$$internal$$getThen(maybeThenable);

              if (then === lib$es6$promise$$internal$$GET_THEN_ERROR) {
                lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$GET_THEN_ERROR.error);
              } else if (then === undefined) {
                lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
              } else if (lib$es6$promise$utils$$isFunction(then)) {
                lib$es6$promise$$internal$$handleForeignThenable(promise, maybeThenable, then);
              } else {
                lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
              }
            }
          }

          function lib$es6$promise$$internal$$resolve(promise, value) {
            if (promise === value) {
              lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$selfFullfillment());
            } else if (lib$es6$promise$utils$$objectOrFunction(value)) {
              lib$es6$promise$$internal$$handleMaybeThenable(promise, value);
            } else {
              lib$es6$promise$$internal$$fulfill(promise, value);
            }
          }

          function lib$es6$promise$$internal$$publishRejection(promise) {
            if (promise._onerror) {
              promise._onerror(promise._result);
            }

            lib$es6$promise$$internal$$publish(promise);
          }

          function lib$es6$promise$$internal$$fulfill(promise, value) {
            if (promise._state !== lib$es6$promise$$internal$$PENDING) {
              return;
            }

            promise._result = value;
            promise._state = lib$es6$promise$$internal$$FULFILLED;

            if (promise._subscribers.length !== 0) {
              lib$es6$promise$asap$$default(lib$es6$promise$$internal$$publish, promise);
            }
          }

          function lib$es6$promise$$internal$$reject(promise, reason) {
            if (promise._state !== lib$es6$promise$$internal$$PENDING) {
              return;
            }

            promise._state = lib$es6$promise$$internal$$REJECTED;
            promise._result = reason;
            lib$es6$promise$asap$$default(lib$es6$promise$$internal$$publishRejection, promise);
          }

          function lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection) {
            var subscribers = parent._subscribers;
            var length = subscribers.length;
            parent._onerror = null;
            subscribers[length] = child;
            subscribers[length + lib$es6$promise$$internal$$FULFILLED] = onFulfillment;
            subscribers[length + lib$es6$promise$$internal$$REJECTED] = onRejection;

            if (length === 0 && parent._state) {
              lib$es6$promise$asap$$default(lib$es6$promise$$internal$$publish, parent);
            }
          }

          function lib$es6$promise$$internal$$publish(promise) {
            var subscribers = promise._subscribers;
            var settled = promise._state;

            if (subscribers.length === 0) {
              return;
            }

            var child,
                callback,
                detail = promise._result;

            for (var i = 0; i < subscribers.length; i += 3) {
              child = subscribers[i];
              callback = subscribers[i + settled];

              if (child) {
                lib$es6$promise$$internal$$invokeCallback(settled, child, callback, detail);
              } else {
                callback(detail);
              }
            }

            promise._subscribers.length = 0;
          }

          function lib$es6$promise$$internal$$ErrorObject() {
            this.error = null;
          }

          var lib$es6$promise$$internal$$TRY_CATCH_ERROR = new lib$es6$promise$$internal$$ErrorObject();

          function lib$es6$promise$$internal$$tryCatch(callback, detail) {
            try {
              return callback(detail);
            } catch (e) {
              lib$es6$promise$$internal$$TRY_CATCH_ERROR.error = e;
              return lib$es6$promise$$internal$$TRY_CATCH_ERROR;
            }
          }

          function lib$es6$promise$$internal$$invokeCallback(settled, promise, callback, detail) {
            var hasCallback = lib$es6$promise$utils$$isFunction(callback),
                value,
                error,
                succeeded,
                failed;

            if (hasCallback) {
              value = lib$es6$promise$$internal$$tryCatch(callback, detail);

              if (value === lib$es6$promise$$internal$$TRY_CATCH_ERROR) {
                failed = true;
                error = value.error;
                value = null;
              } else {
                succeeded = true;
              }

              if (promise === value) {
                lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$cannotReturnOwn());
                return;
              }
            } else {
              value = detail;
              succeeded = true;
            }

            if (promise._state !== lib$es6$promise$$internal$$PENDING) {} else if (hasCallback && succeeded) {
              lib$es6$promise$$internal$$resolve(promise, value);
            } else if (failed) {
              lib$es6$promise$$internal$$reject(promise, error);
            } else if (settled === lib$es6$promise$$internal$$FULFILLED) {
              lib$es6$promise$$internal$$fulfill(promise, value);
            } else if (settled === lib$es6$promise$$internal$$REJECTED) {
              lib$es6$promise$$internal$$reject(promise, value);
            }
          }

          function lib$es6$promise$$internal$$initializePromise(promise, resolver) {
            try {
              resolver(function resolvePromise(value) {
                lib$es6$promise$$internal$$resolve(promise, value);
              }, function rejectPromise(reason) {
                lib$es6$promise$$internal$$reject(promise, reason);
              });
            } catch (e) {
              lib$es6$promise$$internal$$reject(promise, e);
            }
          }

          function lib$es6$promise$enumerator$$Enumerator(Constructor, input) {
            var enumerator = this;
            enumerator._instanceConstructor = Constructor;
            enumerator.promise = new Constructor(lib$es6$promise$$internal$$noop);

            if (enumerator._validateInput(input)) {
              enumerator._input = input;
              enumerator.length = input.length;
              enumerator._remaining = input.length;

              enumerator._init();

              if (enumerator.length === 0) {
                lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
              } else {
                enumerator.length = enumerator.length || 0;

                enumerator._enumerate();

                if (enumerator._remaining === 0) {
                  lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
                }
              }
            } else {
              lib$es6$promise$$internal$$reject(enumerator.promise, enumerator._validationError());
            }
          }

          lib$es6$promise$enumerator$$Enumerator.prototype._validateInput = function (input) {
            return lib$es6$promise$utils$$isArray(input);
          };

          lib$es6$promise$enumerator$$Enumerator.prototype._validationError = function () {
            return new Error("Array Methods must be provided an Array");
          };

          lib$es6$promise$enumerator$$Enumerator.prototype._init = function () {
            this._result = new Array(this.length);
          };

          var lib$es6$promise$enumerator$$default = lib$es6$promise$enumerator$$Enumerator;

          lib$es6$promise$enumerator$$Enumerator.prototype._enumerate = function () {
            var enumerator = this;
            var length = enumerator.length;
            var promise = enumerator.promise;
            var input = enumerator._input;

            for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
              enumerator._eachEntry(input[i], i);
            }
          };

          lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry = function (entry, i) {
            var enumerator = this;
            var c = enumerator._instanceConstructor;

            if (lib$es6$promise$utils$$isMaybeThenable(entry)) {
              if (entry.constructor === c && entry._state !== lib$es6$promise$$internal$$PENDING) {
                entry._onerror = null;

                enumerator._settledAt(entry._state, i, entry._result);
              } else {
                enumerator._willSettleAt(c.resolve(entry), i);
              }
            } else {
              enumerator._remaining--;
              enumerator._result[i] = entry;
            }
          };

          lib$es6$promise$enumerator$$Enumerator.prototype._settledAt = function (state, i, value) {
            var enumerator = this;
            var promise = enumerator.promise;

            if (promise._state === lib$es6$promise$$internal$$PENDING) {
              enumerator._remaining--;

              if (state === lib$es6$promise$$internal$$REJECTED) {
                lib$es6$promise$$internal$$reject(promise, value);
              } else {
                enumerator._result[i] = value;
              }
            }

            if (enumerator._remaining === 0) {
              lib$es6$promise$$internal$$fulfill(promise, enumerator._result);
            }
          };

          lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt = function (promise, i) {
            var enumerator = this;
            lib$es6$promise$$internal$$subscribe(promise, undefined, function (value) {
              enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED, i, value);
            }, function (reason) {
              enumerator._settledAt(lib$es6$promise$$internal$$REJECTED, i, reason);
            });
          };

          function lib$es6$promise$promise$all$$all(entries) {
            return new lib$es6$promise$enumerator$$default(this, entries).promise;
          }

          var lib$es6$promise$promise$all$$default = lib$es6$promise$promise$all$$all;

          function lib$es6$promise$promise$race$$race(entries) {
            var Constructor = this;
            var promise = new Constructor(lib$es6$promise$$internal$$noop);

            if (!lib$es6$promise$utils$$isArray(entries)) {
              lib$es6$promise$$internal$$reject(promise, new TypeError("You must pass an array to race."));
              return promise;
            }

            var length = entries.length;

            function onFulfillment(value) {
              lib$es6$promise$$internal$$resolve(promise, value);
            }

            function onRejection(reason) {
              lib$es6$promise$$internal$$reject(promise, reason);
            }

            for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
              lib$es6$promise$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);
            }

            return promise;
          }

          var lib$es6$promise$promise$race$$default = lib$es6$promise$promise$race$$race;

          function lib$es6$promise$promise$resolve$$resolve(object) {
            var Constructor = this;

            if (object && (typeof object === "undefined" ? "undefined" : _typeof(object)) === "object" && object.constructor === Constructor) {
              return object;
            }

            var promise = new Constructor(lib$es6$promise$$internal$$noop);
            lib$es6$promise$$internal$$resolve(promise, object);
            return promise;
          }

          var lib$es6$promise$promise$resolve$$default = lib$es6$promise$promise$resolve$$resolve;

          function lib$es6$promise$promise$reject$$reject(reason) {
            var Constructor = this;
            var promise = new Constructor(lib$es6$promise$$internal$$noop);
            lib$es6$promise$$internal$$reject(promise, reason);
            return promise;
          }

          var lib$es6$promise$promise$reject$$default = lib$es6$promise$promise$reject$$reject;
          var lib$es6$promise$promise$$counter = 0;

          function lib$es6$promise$promise$$needsResolver() {
            throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");
          }

          function lib$es6$promise$promise$$needsNew() {
            throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
          }

          var lib$es6$promise$promise$$default = lib$es6$promise$promise$$Promise;

          function lib$es6$promise$promise$$Promise(resolver) {
            this._id = lib$es6$promise$promise$$counter++;
            this._state = undefined;
            this._result = undefined;
            this._subscribers = [];

            if (lib$es6$promise$$internal$$noop !== resolver) {
              if (!lib$es6$promise$utils$$isFunction(resolver)) {
                lib$es6$promise$promise$$needsResolver();
              }

              if (!(this instanceof lib$es6$promise$promise$$Promise)) {
                lib$es6$promise$promise$$needsNew();
              }

              lib$es6$promise$$internal$$initializePromise(this, resolver);
            }
          }

          lib$es6$promise$promise$$Promise.all = lib$es6$promise$promise$all$$default;
          lib$es6$promise$promise$$Promise.race = lib$es6$promise$promise$race$$default;
          lib$es6$promise$promise$$Promise.resolve = lib$es6$promise$promise$resolve$$default;
          lib$es6$promise$promise$$Promise.reject = lib$es6$promise$promise$reject$$default;
          lib$es6$promise$promise$$Promise.prototype = {
            constructor: lib$es6$promise$promise$$Promise,
            then: function then(onFulfillment, onRejection) {
              var parent = this;
              var state = parent._state;

              if (state === lib$es6$promise$$internal$$FULFILLED && !onFulfillment || state === lib$es6$promise$$internal$$REJECTED && !onRejection) {
                return this;
              }

              var child = new this.constructor(lib$es6$promise$$internal$$noop);
              var result = parent._result;

              if (state) {
                var callback = arguments[state - 1];
                lib$es6$promise$asap$$default(function () {
                  lib$es6$promise$$internal$$invokeCallback(state, child, callback, result);
                });
              } else {
                lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection);
              }

              return child;
            },
            "catch": function _catch(onRejection) {
              return this.then(null, onRejection);
            }
          };

          function lib$es6$promise$polyfill$$polyfill() {
            var local;

            if (typeof global !== "undefined") {
              local = global;
            } else if (typeof self !== "undefined") {
              local = self;
            } else {
              try {
                local = Function("return this")();
              } catch (e) {
                throw new Error("polyfill failed because global object is unavailable in this environment");
              }
            }

            var P = local.Promise;

            if (P && Object.prototype.toString.call(P.resolve()) === "[object Promise]" && !P.cast) {
              return;
            }

            local.Promise = lib$es6$promise$promise$$default;
          }

          var lib$es6$promise$polyfill$$default = lib$es6$promise$polyfill$$polyfill;
          var lib$es6$promise$umd$$ES6Promise = {
            Promise: lib$es6$promise$promise$$default,
            polyfill: lib$es6$promise$polyfill$$default
          };

          if (typeof define === "function" && define["amd"]) {
            define(function () {
              return lib$es6$promise$umd$$ES6Promise;
            });
          } else if (typeof module !== "undefined" && module["exports"]) {
            module["exports"] = lib$es6$promise$umd$$ES6Promise;
          } else if (typeof this !== "undefined") {
            this["ES6Promise"] = lib$es6$promise$umd$$ES6Promise;
          }

          lib$es6$promise$polyfill$$default();
        }).call(this);
      }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {}, require("timers").setImmediate);
    }, {
      "_process": 1,
      "timers": 2
    }],
    30: [function (require, module, exports) {
      module.exports = function () {
        var userAgent = function userAgent(ua) {
          ua = (ua || window.navigator.userAgent).toString().toLowerCase();

          function checkUserAgent(ua) {
            var browser = {};
            var match = /(dolfin)[ \/]([\w.]+)/.exec(ua) || /(edge)[ \/]([\w.]+)/.exec(ua) || /(chrome)[ \/]([\w.]+)/.exec(ua) || /(opera)(?:.*version)?[ \/]([\w.]+)/.exec(ua) || /(webkit)(?:.*version)?[ \/]([\w.]+)/.exec(ua) || /(msie) ([\w.]+)/.exec(ua) || ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+))?/.exec(ua) || ["", "unknown"];

            if (match[1] === "webkit") {
              match = /(iphone|ipad|ipod)[\S\s]*os ([\w._\-]+) like/.exec(ua) || /(android)[ \/]([\w._\-]+);/.exec(ua) || [match[0], "safari", match[2]];
            } else if (match[1] === "mozilla") {
              if (/trident/.test(ua)) {
                match[1] = "msie";
              } else {
                match[1] = "firefox";
              }
            } else if (match[1] === "edge") {
              match[1] = "spartan";
            } else if (/polaris|natebrowser|([010|011|016|017|018|019]{3}\d{3,4}\d{4}$)/.test(ua)) {
              match[1] = "polaris";
            }

            browser[match[1]] = true;
            browser.name = match[1];
            browser.version = setVersion(match[2]);
            return browser;
          }

          function setVersion(versionString) {
            var version = {};
            var versions = versionString ? versionString.split(/\.|-|_/) : ["0", "0", "0"];
            version.info = versions.join(".");
            version.major = versions[0] || "0";
            version.minor = versions[1] || "0";
            version.patch = versions[2] || "0";
            return version;
          }

          function checkPlatform(ua) {
            if (isPc(ua)) {
              return "pc";
            } else if (isTablet(ua)) {
              return "tablet";
            } else if (isMobile(ua)) {
              return "mobile";
            } else {
              return "";
            }
          }

          function isPc(ua) {
            if (ua.match(/linux|windows (nt|98)|macintosh/) && !ua.match(/android|mobile|polaris|lgtelecom|uzard|natebrowser|ktf;|skt;/)) {
              return true;
            }

            return false;
          }

          function isTablet(ua) {
            if (ua.match(/ipad/) || ua.match(/android/) && !ua.match(/mobi|mini|fennec/)) {
              return true;
            }

            return false;
          }

          function isMobile(ua) {
            if (!!ua.match(/ip(hone|od)|android.+mobile|windows (ce|phone)|blackberry|bb10|symbian|webos|firefox.+fennec|opera m(ob|in)i|polaris|iemobile|lgtelecom|nokia|sonyericsson|dolfin|uzard|natebrowser|ktf;|skt;/)) {
              return true;
            } else {
              return false;
            }
          }

          function checkOs(ua) {
            var os = {},
                match = /(iphone|ipad|ipod)[\S\s]*os ([\w._\-]+) like/.exec(ua) || /(android)[ \/]([\w._\-]+);/.exec(ua) || (/android/.test(ua) ? ["", "android", "0.0.0"] : false) || (/polaris|natebrowser|([010|011|016|017|018|019]{3}\d{3,4}\d{4}$)/.test(ua) ? ["", "polaris", "0.0.0"] : false) || /(windows)(?: nt | phone(?: os){0,1} | )([\w._\-]+)/.exec(ua) || (/(windows)/.test(ua) ? ["", "windows", "0.0.0"] : false) || /(mac) os x ([\w._\-]+)/.exec(ua) || (/(linux)/.test(ua) ? ["", "linux", "0.0.0"] : false) || (/webos/.test(ua) ? ["", "webos", "0.0.0"] : false) || /(bada)[ \/]([\w._\-]+)/.exec(ua) || (/bada/.test(ua) ? ["", "bada", "0.0.0"] : false) || (/(rim|blackberry|bb10)/.test(ua) ? ["", "blackberry", "0.0.0"] : false) || ["", "unknown", "0.0.0"];

            if (match[1] === "iphone" || match[1] === "ipad" || match[1] === "ipod") {
              match[1] = "ios";
            } else if (match[1] === "windows" && match[2] === "98") {
              match[2] = "0.98.0";
            }

            os[match[1]] = true;
            os.name = match[1];
            os.version = setVersion(match[2]);
            return os;
          }

          function checkApp(ua) {
            var app = {},
                match = /(crios)[ \/]([\w.]+)/.exec(ua) || /(daumapps)[ \/]([\w.]+)/.exec(ua) || ["", ""];

            if (match[1]) {
              app.isApp = true;
              app.name = match[1];
              app.version = setVersion(match[2]);
            } else {
              app.isApp = false;
            }

            return app;
          }

          return {
            ua: ua,
            browser: checkUserAgent(ua),
            platform: checkPlatform(ua),
            os: checkOs(ua),
            app: checkApp(ua)
          };
        };

        return userAgent;
      }();
    }, {}],
    31: [function (require, module, exports) {
      module.exports = function () {
        var parseUA = require('./userAgent.js');

        var TIMEOUT_IOS = 5 * 1000,
            TIMEOUT_ANDROID = 3 * 100,
            INTERVAL = 100,
            ua = parseUA(),
            os = ua.os,
            intentNotSupportedBrowserList = ['firefox', 'opr/'],
            intentSupportCustomBrowserList = ['KAKAOTALK'];

        function moveToStore(storeURL) {
          window.top.location.replace(storeURL);
        }

        function web2app(context) {
          var willInvokeApp = typeof context.willInvokeApp === 'function' ? context.willInvokeApp : function () {},
              onAppMissing = typeof context.onAppMissing === 'function' ? context.onAppMissing : moveToStore,
              onUnsupportedEnvironment = typeof context.onUnsupportedEnvironment === 'function' ? context.onUnsupportedEnvironment : function () {};
          willInvokeApp();

          if (os.android) {
            if (isIntentSupportedBrowser() && context.intentURI && !context.useUrlScheme) {
              web2appViaIntentURI(context.intentURI);
            } else if (context.storeURL) {
              web2appViaCustomUrlSchemeForAndroid(context.urlScheme, context.storeURL, onAppMissing);
            }
          } else if (os.ios && context.storeURL) {
            web2appViaCustomUrlSchemeForIOS(context.urlScheme, context.storeURL, onAppMissing, context.universalLink);
          } else {
            setTimeout(function () {
              onUnsupportedEnvironment();
            }, 100);
          }
        }

        function isIntentSupportedBrowser() {
          var supportsIntent = ua.browser.chrome && +ua.browser.version.major >= 25;
          var blackListRegexp = new RegExp(intentNotSupportedBrowserList.join('|'), "i");
          var whiteListRegexp = new RegExp(intentSupportCustomBrowserList.join('|'), "i");
          return supportsIntent && !blackListRegexp.test(ua.ua) || whiteListRegexp.test(ua.ua);
        }

        function web2appViaCustomUrlSchemeForAndroid(urlScheme, storeURL, fallback) {
          deferFallback(TIMEOUT_ANDROID, storeURL, fallback);
          launchAppViaHiddenIframe(urlScheme);
        }

        function deferFallback(timeout, storeURL, fallback) {
          var clickedAt = new Date().getTime();
          return setTimeout(function () {
            var now = new Date().getTime();

            if (isPageVisible() && now - clickedAt < timeout + INTERVAL) {
              fallback(storeURL);
            }
          }, timeout);
        }

        function web2appViaIntentURI(launchURI) {
          if (ua.browser.chrome) {
            move();
          } else {
            setTimeout(move, 100);
          }

          function move() {
            top.location.href = launchURI;
          }
        }

        function web2appViaCustomUrlSchemeForIOS(urlScheme, storeURL, fallback, universalLink) {
          var tid = deferFallback(TIMEOUT_IOS, storeURL, fallback);

          if (parseInt(ua.os.version.major, 10) < 8) {
            bindPagehideEvent(tid);
          } else {
            bindVisibilityChangeEvent(tid);
          }

          if (isSupportUniversalLinks()) {
            if (universalLink === undefined) {
              universalLink = urlScheme;
            } else {
              clearTimeout(tid);
            }

            launchAppViaChangingLocation(universalLink);
          } else {
            launchAppViaHiddenIframe(urlScheme);
          }
        }

        function bindPagehideEvent(tid) {
          window.addEventListener('pagehide', function clear() {
            if (isPageVisible()) {
              clearTimeout(tid);
              window.removeEventListener('pagehide', clear);
            }
          });
        }

        function bindVisibilityChangeEvent(tid) {
          document.addEventListener('visibilitychange', function clear() {
            if (isPageVisible()) {
              clearTimeout(tid);
              document.removeEventListener('visibilitychange', clear);
            }
          });
        }

        function isPageVisible() {
          var attrNames = ['hidden', 'webkitHidden'];

          for (var i = 0, len = attrNames.length; i < len; i++) {
            if (typeof document[attrNames[i]] !== 'undefined') {
              return !document[attrNames[i]];
            }
          }

          return true;
        }

        function launchAppViaChangingLocation(urlScheme) {
          window.top.location.replace(urlScheme);
        }

        function launchAppViaHiddenIframe(urlScheme) {
          setTimeout(function () {
            var iframe = createHiddenIframe('appLauncher');
            iframe.src = urlScheme;
          }, 100);
        }

        function createHiddenIframe(id) {
          var iframe = document.createElement('iframe');
          iframe.id = id;
          iframe.style.border = 'none';
          iframe.style.width = '0';
          iframe.style.height = '0';
          iframe.style.display = 'none';
          iframe.style.overflow = 'hidden';
          document.body.appendChild(iframe);
          return iframe;
        }

        function isSupportUniversalLinks() {
          return parseInt(ua.os.version.major, 10) > 8 && ua.os.ios;
        }

        return web2app;
      }();
    }, {
      "./userAgent.js": 30
    }]
  }, {}, [20])(20);
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./src/js/quiz.js":
/*!************************!*\
  !*** ./src/js/quiz.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Webfont = __webpack_require__(/*! webfontloader */ "./node_modules/webfontloader/webfontloader.js");

var Vue = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.common.js");

Webfont.load({
  custom: {
    families: ['Volte', 'Spoqa Han Sans'],
    urls: ['./webfont.css']
  }
});
window.vue = new Vue({
  el: '#app',
  data: {
    pages: [{
      question: 'ì ì¸ì ìëë° ê°ìê¸° ì¹ì¤ê° ëë¬´ íê³ ì¶ì ìì¦ì ë¹ì ì',
      answer1: 'ìë¡ì´ ì¬ëê³¼ì ì¹ì¤ë¥¼ ìí´ ì ê·¹ì ì¼ë¡ ë§ë¨ì ì¶ì§íë¤.',
      answer2: 'íë¦¬ë¯¸ì ì¹ì¤í ì´ë¡ ììë¥¼ íê±°ë ëë§ì ì·¨ë¯¸ íëì ë ë§ì´ ê°ëë¤.',
      value1: 'b',
      value2: 'a'
    }, {
      question: 'ë¹ì ì ë³´íµ íì¸ê³¼ ì²« ì¹ì¤ë¥¼ ììíê¸° ì ì',
      answer1: 'ì¢ìíê±°ë ì«ì´íë ì ë¬´ ë°©ì, ì²´ì ë±ì ëí´ ì¡°ê¸ì´ë¼ë ì ë³´ êµë¥ë¥¼ íë ìª½ì´ ë§ í¸íë¤.',
      answer2: 'ì¹ì¤ë ìì¸¡ ë¶ê°ë¥í ìí©ì ì¦ê¸°ë ëª¨íì ê°ê¹ë¤. êµ³ì´ ì´ê²ì ê² ë¬¼ì´ë³´ì§ ìë í¸ì´ë¤.',
      value1: 'c',
      value2: 'd'
    }, {
      question: 'ìµê·¼ í ì¹ì¤ê° ëë¬´ í©ííë¤ê³  ë§íë ì¹êµ¬, ë¹ì ì ë°ìì',
      answer1: 'ì¤!! ë­ê° ì´ë»ê² ì¢ìëë°? í¹ë³í ì¢ì ë¶ë¶ì´ ììì´?',
      answer2: 'ì...ëë¤ ìë¡ ì§ì§ ì ì íê³  ì¬ëíëë³´ë¤â¦!',
      value1: 'e',
      value2: 'f'
    }, {
      question: 'ì£¼ë§ ì ë 9ì, ì¸íë ì°ì¸ê³¼ í¨ê» ì ë ìì¬ë¥¼ ë§ì¹ ë¹ì ì ë¨¸ë¦¿ìì ì§ê¸',
      answer1: 'ë¶ìê¸° ìë 2ì°¨ ì¥ì, ê·ê° ëì , ì§ ì²­ì ìí, í¼ìëêµ¬ ë±ì ê¼¼ê¼¼íê² ì ê² ì¤ì´ë¤.',
      answer2: 'ìëì í¨ê»ë¼ë©´ ì´ëë  ì¢ë¤. ë· ì¼ì ëì¤ì ìê°íê³  ì°ì  ì´ ìê°ì ë§ë½íë¤.',
      value1: 'g',
      value2: 'h'
    }, {
      question: 'ë¹ì ìê² ìì´ ìë¡ì´ ë§ë¨ì ê¸°ëíê² íë ì¥ìë',
      answer1: '2ë° 3ì¼ ìº íì¼ë¡ ì§íëë ì¸í¸ë¼ ë®¤ì§ íì¤í°ë²',
      answer2: 'ì¬ì ë¡­ê³  íì í í´ìì§ ê·¼ì² ì¡°ì©í ì¹´í',
      value1: 'b',
      value2: 'a'
    }, {
      question: 'ê³µì§ ìííë¡ ìíê´ì ì¤ê² ë ë¹ì , ë¹ì ì´ ìíë¥¼ ê³ ë¥´ë ë°©ìì',
      answer1: 'ê´ê°ìì ê´ëíê¸°ë¥¼ ì¤ë§í¸í°ì¼ë¡ ê¼¼ê¼¼íê² ê²ìí´ ì¤í¨íì§ ìì ìíë¥¼ ê³ ë¥¸ë¤.',
      answer2: 'ì¤ëì ë´ ê°ì  ìíì ë°ë¼ ë§ìì ëë ìíë¥¼ ì§ê´ì ì¼ë¡ ê³ ë¥¸ë¤.',
      value1: 'c',
      value2: 'd'
    }, {
      question: 'ì¹ì¤ì¤ì¸ ë¹ì , ìëì ì´ë¤ ëª¨ìµì ë³´ìì ë ë ê¸°ë¶ì´ ì¢ìê°ì',
      answer1: 'ë´ê° ìë í ì ë¬´ì ì í¬ë¥¼ íµí´ ì°¸ì ì ìë ì ì²´ì  ì¾ê°ì ëë¼ë ìëë¥¼ ë³¼ ë',
      answer2: 'ìë¡ ë§ì£¼ ë³´ê³  ìë ì¼êµ´ì´ ëë¬´ë ì ííê³  ì¬ëì¤ë¬ì¸ ë',
      value1: 'e',
      value2: 'f'
    }, {
      question: 'ìì§ì´ê¸°ë íë¤ ë§í¼ ê²©ë ¬í ì¹ì¤ë¥¼ ë§ì¹ ë¹ì , ë¤ì íëì',
      answer1: 'ëë¬´ íë¤ì§ë§ ì¤ìë íê³  ì¹¨êµ¬ë ì ë¦¬íê³  ì ì·ë ìê³ ...',
      answer2: 'ì»ì ê³³ë§ ëì¶© ì»ê³  ê³§ë°ë¡ ê¿ëë¼ë¡ ì§í...',
      value1: 'g',
      value2: 'h'
    }, {
      question: 'íì°½ ë¬´ë¥´ìµì ëí¸í ì ìë¦¬, ë°ëí¸ íì´ë¸ì ë§ìì ëë ìëê° ë³´ì¸ë¤',
      answer1: 'ë¨¼ì  ì£¼ëì ì¼ë¡ ìë¦¬ë¥¼ ë°ê¿ ê·¸ ì¬ëê³¼ ëíë¥¼ ììíë¤.',
      answer2: '2ì°¨ë¡ ì´ëíë©´ì ìì°ì¤ë½ê² ìë¦¬ê° ë°ëê¸°ë¥¼ ê¸°ë¤ë¦°ë¤.',
      value1: 'b',
      value2: 'a'
    }, {
      question: 'ë´ê° ì£¼ë¡ ì¹ì¤ì´íì ëë¼ë ëìì',
      answer1: 'ì¸ëª¨ë ëí, ë°°ê²½ë±ì´ ì ë§ì ê°ì´ ìì¼ë©´ í¸ìíê³  ì ì  í¸ê°ì´ ì»¤ì§ ê² ê°ì ì¬ë',
      answer2: 'ë­ë¼ê³  ì½ ì§ì´ ì¤ëªí  ì ìì§ë§, ì§ëíê² ì½í ì ìì ê² ê°ì ì¹ëªì ì¸ ì¬ë',
      value1: 'c',
      value2: 'd'
    }, {
      question: 'ì ì ì¸ê³¼ì ì¹ì¤ê° ì© ì¢ì§ ìë¤ë ì¹êµ¬ìê² ë¹ì ì',
      answer1: 'ìí©ì ë¤ì´ë³´ê³  ë ëì ëìì ì ìíê±°ë ìê¶í©ì ì´ì© ì ìë¤ê³  ë§í´ì¤ë¤.',
      answer2: 'ì ì  ë ì¢ìì§ ê±°ë¼ê³  ë°ë»í ìë¡ë¥¼ ê±´ë¨ë¤.',
      value1: 'e',
      value2: 'f'
    }, {
      question: 'ì ì¸ê³¼ì ì¹ì¤ê° ì´ë¤ì§ë ìê°ëë',
      answer1: 'ê°ê¸ì  í´ê·¼ ì´íë ì£¼ë§, ì°í´ ë± ìì¸¡ ê°ë¥í ìê°ëì ì¹ì¤íë ê²ì ì í¸íë¤.',
      answer2: 'ìë¡ ë§ì´ ë§ëë¤ë©´ ì¦í¥ì ì´ê³  ìì¸¡ ë¶ê°ë¥í ìê°ëì ì¹ì¤íë ê²ë ì¢ë¤.',
      value1: 'g',
      value2: 'h'
    }],
    results: [],
    currentPage: 0,
    animationDelay: 300,
    currentPageTimeout: null,
    onpopstateTimeout: null,
    loadingTimeout: null,
    introPageHeight: 0,
    questionPageMaxHeight: 0
  },
  computed: {
    type: function type() {
      if (this.results.length < 12) {
        return undefined;
      }

      var type = '';
      type += this.countResults('a') > this.countResults('b') ? 'a' : 'b';
      type += this.countResults('c') > this.countResults('d') ? 'c' : 'd';
      type += this.countResults('e') > this.countResults('f') ? 'e' : 'f';
      type += this.countResults('g') > this.countResults('h') ? 'g' : 'h';
      return type;
    }
  },
  watch: {
    currentPage: function currentPage() {
      var _this = this;

      if (this.currentPageTimeout) {
        clearTimeout(this.currentPageTimeout);
      }

      this.currentPageTimeout = setTimeout(function () {
        if (_this.currentPage - 1 > _this.results.filter(function (v) {
          return !!v;
        }).length) {
          // ìì  íì´ì§ìì ëµì íì§ ìê³  ìë¤ë©´
          _this.goNotAnsweredPage();
        }
      }, this.animationDelay);
      this.updateHash();
    },
    results: function results() {
      localStorage.setItem('results', JSON.stringify(this.results));
    }
  },
  methods: {
    countResults: function countResults(value) {
      return this.results.reduce(function (a, v) {
        return v === value ? a + 1 : a;
      }, 0);
    },
    updateHash: function updateHash() {
      var id = document.querySelector("[data-page-number='".concat(this.currentPage, "']")).id;
      location.assign("#".concat(id));
    },
    goNotAnsweredPage: function goNotAnsweredPage() {
      var _this2 = this;

      if (this.results.length === 0) {
        this.currentPage = 0;
      } else {
        var notAnsweredPage = this.results.findIndex(function (v) {
          return v === undefined;
        }) + 1;
        var nextAnsweredPage = this.results.length + 1;
        this.currentPage = Math.max(notAnsweredPage, nextAnsweredPage);
        this.updateHash();
      }

      setTimeout(function () {
        _this2.updateLogoClass();

        _this2.updateHeight();
      }, this.animationDelay);
    },
    changePage: function changePage() {
      var _this3 = this;

      var hash = new URL(document.location).hash.substr(1) || 'intro';

      if (hash === 'intro') {
        this.currentPage = 0;
        this.results = [];
        localStorage.setItem('results', '[]');
        var video = document.querySelector('.js-intro-video');
        video.play()["catch"](function (error) {
          document.querySelector('.js-intro-video').classList.add('u-hidden');
          document.querySelector('.js-intro-image').classList.remove('u-hidden');
        });
      }

      if (/q[0-9]{1,2}/.test(hash)) {
        this.currentPage = parseInt(hash.replace('q', ''));
      }

      this.updateLogoClass();
      this.updateHeight();

      if (hash === 'loading') {
        this.currentPage = 13;

        if (this.type) {
          this.loadingTimeout = setTimeout(function () {
            if (_this3.type) {
              location.assign('result/' + _this3.type + '.html');
            } else {
              _this3.goNotAnsweredPage();
            }
          }, 3000 - this.animationDelay);
        }

        var _video = document.querySelector('.js-loading-video');

        _video.play()["catch"](function (error) {
          document.querySelector('.js-loading-video').classList.add('u-hidden');
          document.querySelector('.js-loading-image').classList.remove('u-hidden');
        });
      } else {
        clearTimeout(this.loadingTimeout);
      }

      document.querySelector('.js-progress-bar').style.width = this.currentPage / 12 * 100 + '%';
    },
    enterComplete: function enterComplete(el) {
      el.classList.add('slide-enter-complete');
    },
    leaveComplete: function leaveComplete(el) {
      el.classList.remove('slide-enter-complete');
    },
    updateHeight: function updateHeight() {
      var _this4 = this;

      var hash = new URL(document.location).hash.substr(1) || 'intro';
      var body = document.querySelector('body');
      var slideContainer = document.querySelector('.js-slide-container');

      window.onload = function () {
        // ë¹ëì¤ì ì´ë¯¸ì§ê° ëª¨ë ë¡ëë íì ë´ì© ëì´ë¥¼ êµ¬í´ì¼ ì ëë¡ êµ¬í´ì§ë¤.
        var contentHeight = document.querySelector('#app').offsetHeight;
        var windowHeight = window.innerHeight;

        if (contentHeight > windowHeight || _this4.currentPage === 13) {
          body.classList.remove('vertical-centering-on-wide');
        } else {
          body.classList.add('vertical-centering-on-wide');
        }
      };

      if (hash === 'loading') {
        slideContainer.style.height = '90vh';
      } else {
        slideContainer.style.height = null;
      }
    },
    updateLogoClass: function updateLogoClass() {
      if (this.currentPage !== 13) {
        document.querySelector('.c-logo').classList.remove('c-logo--medium');
      } else {
        document.querySelector('.c-logo').classList.add('c-logo--medium');
      }
    },
    test: function test() {
      this.results = [];

      for (var i = 0; i < 4; i++) {
        var types = [['a', 'b'], ['d', 'c'], ['f', 'e'], ['h', 'g']];

        for (var j = 0; j < 3; j++) {
          var random = Math.floor(Math.random() * 1000000) % 2;
          this.results.push(types[i][random]);
        }
      }

      this.currentPage = 13;
    }
  },
  mounted: function mounted() {
    var _this5 = this;

    if (JSON.parse(localStorage.getItem('results'))) {
      this.results = JSON.parse(localStorage.getItem('results'));
    }

    window.onpopstate = function () {
      if (_this5.onpopstateTimeout) {
        clearTimeout(_this5.onpopstateTimeout);
      }

      setTimeout(_this5.changePage, _this5.animationDelay);
    };

    this.updateLogoClass();
    this.changePage();
  }
});

/***/ }),

/***/ "./src/js/result.js":
/*!**************************!*\
  !*** ./src/js/result.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ClipboardJS = __webpack_require__(/*! clipboard */ "./node_modules/clipboard/dist/clipboard.js");

var Webfont = __webpack_require__(/*! webfontloader */ "./node_modules/webfontloader/webfontloader.js");

var Kakao = __webpack_require__(/*! ./kakao */ "./src/js/kakao.js");

Webfont.load({
  custom: {
    families: ['Volte', 'Spoqa Han Sans'],
    urls: ['../../webfont.css']
  }
});
var clipboard = new ClipboardJS('.js-clipboard');
clipboard.on('success', function (e) {
  alert('ì¹ì¤ ì±í¥ íì¤í¸ ê²°ê³¼ë¥¼ ë³µì¬íìµëë¤. ì¹êµ¬ë ì ì¸ê³¼ í¨ê» ê³µì í´ë³´ì¸ì. ð');
}).on('error', function (e) {
  prompt('ì¹ì¤ ì±í¥ íì¤í¸ ê²°ê³¼ë¥¼ ë³µì¬í´ì ì¹êµ¬ë ì ì¸ê³¼ í¨ê» ê³µì í´ë³´ì¸ì. ð', e.text);
});

if (document.querySelector('.js-share-kakaotalk')) {
  /*Kakao.init('10f2db69af65a3e50b3fbe5a8b837fc3');*/
  Kakao.init('d695aaad98190c490ca460f7bd8a329c');
  Kakao.Link.createScrapButton({
    container: document.querySelector('.js-share-kakaotalk'),
    requestUrl: document.querySelector('link[rel=canonical]').href
  });
}

(function () {
  // ëª¨ë¬
  var modal = document.getElementById('promoModal');
  var btn = document.getElementById('promoBtn'); // ë²í¼ í´ë¦­íë©´ ëª¨ë¬ ì´ê¸°

  btn.onclick = function () {
    modal.style.display = "block";
  }; // ë°ê¹¥ ìì­ì í´ë¦­íë©´ ëª¨ë¬ ë«ê¸°


  window.onclick = function (event) {
    if (event.target === modal) {
      modal.style.display = "none";
    }
  };
})();

/***/ }),

/***/ "./src/sass/app.scss":
/*!***************************!*\
  !*** ./src/sass/app.scss ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "./src/sass/webfont.scss":
/*!*******************************!*\
  !*** ./src/sass/webfont.scss ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ 0:
/*!*************************************************************************!*\
  !*** multi ./src/js/app.js ./src/sass/app.scss ./src/sass/webfont.scss ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! /Users/mytory/workspace/sexmbti/src/js/app.js */"./src/js/app.js");
__webpack_require__(/*! /Users/mytory/workspace/sexmbti/src/sass/app.scss */"./src/sass/app.scss");
module.exports = __webpack_require__(/*! /Users/mytory/workspace/sexmbti/src/sass/webfont.scss */"./src/sass/webfont.scss");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             QTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSx1Q0FBdUMsU0FBUztBQUNoRDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsd0JBQXdCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCw0QkFBNEIsRUFBRTtBQUNsRixLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCwrQkFBK0IsRUFBRTtBQUNyRixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLGFBQWE7O0FBRTNEO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZEO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxpQ0FBaUMscUNBQXFDOztBQUV0RTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsdUNBQXVDLEVBQUU7QUFDcEY7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLDJDQUEyQyxFQUFFO0FBQzFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLE9BQU87QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFDQUFxQyw4QkFBOEIsRUFBRTtBQUNyRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGtDQUFrQyx1Q0FBdUM7O0FBRXpFLHFDQUFxQywwQkFBMEI7O0FBRS9EO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDhDQUE4QztBQUM5QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0Q7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7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QSxvQ0FBb0MsT0FBTztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQLE9BQU87QUFDUCxTQUFTO0FBQ1QsUUFBUTtBQUNSLFFBQVE7QUFDUixPQUFPO0FBQ1AsUUFBUTtBQUNSO0FBQ0EsMkNBQTJDO0FBQzNDLDhEQUE4RDs7QUFFOUQ7QUFDQTtBQUNBLHFEQUFxRCwyREFBMkQ7O0FBRWhIO0FBQ0E7QUFDQSw2Q0FBNkMsMkJBQTJCLEVBQUU7QUFDMUU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsU0FBUztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQix1QkFBdUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             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ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             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ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             cm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuXG5cblxuXG4vKipcbiAqIEJhc2UgY2xhc3Mgd2hpY2ggdGFrZXMgb25lIG9yIG1vcmUgZWxlbWVudHMsIGFkZHMgZXZlbnQgbGlzdGVuZXJzIHRvIHRoZW0sXG4gKiBhbmQgaW5zdGFudGlhdGVzIGEgbmV3IGBDbGlwYm9hcmRBY3Rpb25gIG9uIGVhY2ggY2xpY2suXG4gKi9cblxudmFyIGNsaXBib2FyZF9DbGlwYm9hcmQgPSBmdW5jdGlvbiAoX0VtaXR0ZXIpIHtcbiAgICBfaW5oZXJpdHMoQ2xpcGJvYXJkLCBfRW1pdHRlcik7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xIVE1MRWxlbWVudHxIVE1MQ29sbGVjdGlvbnxOb2RlTGlzdH0gdHJpZ2dlclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICovXG4gICAgZnVuY3Rpb24gQ2xpcGJvYXJkKHRyaWdnZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgY2xpcGJvYXJkX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENsaXBib2FyZCk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKENsaXBib2FyZC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENsaXBib2FyZCkpLmNhbGwodGhpcykpO1xuXG4gICAgICAgIF90aGlzLnJlc29sdmVPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICBfdGhpcy5saXN0ZW5DbGljayh0cmlnZ2VyKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlZmluZXMgaWYgYXR0cmlidXRlcyB3b3VsZCBiZSByZXNvbHZlZCB1c2luZyBpbnRlcm5hbCBzZXR0ZXIgZnVuY3Rpb25zXG4gICAgICogb3IgY3VzdG9tIGZ1bmN0aW9ucyB0aGF0IHdlcmUgcGFzc2VkIGluIHRoZSBjb25zdHJ1Y3Rvci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqL1xuXG5cbiAgICBjbGlwYm9hcmRfY3JlYXRlQ2xhc3MoQ2xpcGJvYXJkLCBbe1xuICAgICAgICBrZXk6ICdyZXNvbHZlT3B0aW9ucycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXNvbHZlT3B0aW9ucygpIHtcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgICAgICAgICAgdGhpcy5hY3Rpb24gPSB0eXBlb2Ygb3B0aW9ucy5hY3Rpb24gPT09ICdmdW5jdGlvbicgPyBvcHRpb25zLmFjdGlvbiA6IHRoaXMuZGVmYXVsdEFjdGlvbjtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0ID0gdHlwZW9mIG9wdGlvbnMudGFyZ2V0ID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy50YXJnZXQgOiB0aGlzLmRlZmF1bHRUYXJnZXQ7XG4gICAgICAgICAgICB0aGlzLnRleHQgPSB0eXBlb2Ygb3B0aW9ucy50ZXh0ID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy50ZXh0IDogdGhpcy5kZWZhdWx0VGV4dDtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyID0gY2xpcGJvYXJkX3R5cGVvZihvcHRpb25zLmNvbnRhaW5lcikgPT09ICdvYmplY3QnID8gb3B0aW9ucy5jb250YWluZXIgOiBkb2N1bWVudC5ib2R5O1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFkZHMgYSBjbGljayBldmVudCBsaXN0ZW5lciB0byB0aGUgcGFzc2VkIHRyaWdnZXIuXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfEhUTUxFbGVtZW50fEhUTUxDb2xsZWN0aW9ufE5vZGVMaXN0fSB0cmlnZ2VyXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdsaXN0ZW5DbGljaycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0ZW5DbGljayh0cmlnZ2VyKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAgICAgdGhpcy5saXN0ZW5lciA9IGxpc3Rlbl9kZWZhdWx0KCkodHJpZ2dlciwgJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLm9uQ2xpY2soZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZpbmVzIGEgbmV3IGBDbGlwYm9hcmRBY3Rpb25gIG9uIGVhY2ggY2xpY2sgZXZlbnQuXG4gICAgICAgICAqIEBwYXJhbSB7RXZlbnR9IGVcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ29uQ2xpY2snLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgICAgICB2YXIgdHJpZ2dlciA9IGUuZGVsZWdhdGVUYXJnZXQgfHwgZS5jdXJyZW50VGFyZ2V0O1xuXG4gICAgICAgICAgICBpZiAodGhpcy5jbGlwYm9hcmRBY3Rpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsaXBib2FyZEFjdGlvbiA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuY2xpcGJvYXJkQWN0aW9uID0gbmV3IGNsaXBib2FyZF9hY3Rpb24oe1xuICAgICAgICAgICAgICAgIGFjdGlvbjogdGhpcy5hY3Rpb24odHJpZ2dlciksXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLnRhcmdldCh0cmlnZ2VyKSxcbiAgICAgICAgICAgICAgICB0ZXh0OiB0aGlzLnRleHQodHJpZ2dlciksXG4gICAgICAgICAgICAgICAgY29udGFpbmVyOiB0aGlzLmNvbnRhaW5lcixcbiAgICAgICAgICAgICAgICB0cmlnZ2VyOiB0cmlnZ2VyLFxuICAgICAgICAgICAgICAgIGVtaXR0ZXI6IHRoaXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlZmF1bHQgYGFjdGlvbmAgbG9va3VwIGZ1bmN0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHRyaWdnZXJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2RlZmF1bHRBY3Rpb24nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVmYXVsdEFjdGlvbih0cmlnZ2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0QXR0cmlidXRlVmFsdWUoJ2FjdGlvbicsIHRyaWdnZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlZmF1bHQgYHRhcmdldGAgbG9va3VwIGZ1bmN0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHRyaWdnZXJcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2RlZmF1bHRUYXJnZXQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVmYXVsdFRhcmdldCh0cmlnZ2VyKSB7XG4gICAgICAgICAgICB2YXIgc2VsZWN0b3IgPSBnZXRBdHRyaWJ1dGVWYWx1ZSgndGFyZ2V0JywgdHJpZ2dlcik7XG5cbiAgICAgICAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBzdXBwb3J0IG9mIHRoZSBnaXZlbiBhY3Rpb24sIG9yIGFsbCBhY3Rpb25zIGlmIG5vIGFjdGlvbiBpc1xuICAgICAgICAgKiBnaXZlbi5cbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IFthY3Rpb25dXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdkZWZhdWx0VGV4dCcsXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVmYXVsdCBgdGV4dGAgbG9va3VwIGZ1bmN0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHRyaWdnZXJcbiAgICAgICAgICovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZWZhdWx0VGV4dCh0cmlnZ2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0QXR0cmlidXRlVmFsdWUoJ3RleHQnLCB0cmlnZ2VyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZXN0cm95IGxpZmVjeWNsZS5cbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXIuZGVzdHJveSgpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5jbGlwYm9hcmRBY3Rpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsaXBib2FyZEFjdGlvbi5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGlwYm9hcmRBY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfV0sIFt7XG4gICAgICAgIGtleTogJ2lzU3VwcG9ydGVkJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzU3VwcG9ydGVkKCkge1xuICAgICAgICAgICAgdmFyIGFjdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogWydjb3B5JywgJ2N1dCddO1xuXG4gICAgICAgICAgICB2YXIgYWN0aW9ucyA9IHR5cGVvZiBhY3Rpb24gPT09ICdzdHJpbmcnID8gW2FjdGlvbl0gOiBhY3Rpb247XG4gICAgICAgICAgICB2YXIgc3VwcG9ydCA9ICEhZG9jdW1lbnQucXVlcnlDb21tYW5kU3VwcG9ydGVkO1xuXG4gICAgICAgICAgICBhY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICAgICAgICAgIHN1cHBvcnQgPSBzdXBwb3J0ICYmICEhZG9jdW1lbnQucXVlcnlDb21tYW5kU3VwcG9ydGVkKGFjdGlvbik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHN1cHBvcnQ7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQ2xpcGJvYXJkO1xufSh0aW55X2VtaXR0ZXJfZGVmYXVsdC5hKTtcblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gcmV0cmlldmUgYXR0cmlidXRlIHZhbHVlLlxuICogQHBhcmFtIHtTdHJpbmd9IHN1ZmZpeFxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKi9cblxuXG5mdW5jdGlvbiBnZXRBdHRyaWJ1dGVWYWx1ZShzdWZmaXgsIGVsZW1lbnQpIHtcbiAgICB2YXIgYXR0cmlidXRlID0gJ2RhdGEtY2xpcGJvYXJkLScgKyBzdWZmaXg7XG5cbiAgICBpZiAoIWVsZW1lbnQuaGFzQXR0cmlidXRlKGF0dHJpYnV0ZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xufVxuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBjbGlwYm9hcmQgPSBfX3dlYnBhY2tfZXhwb3J0c19fW1wiZGVmYXVsdFwiXSA9IChjbGlwYm9hcmRfQ2xpcGJvYXJkKTtcblxuLyoqKi8gfSlcbi8qKioqKiovIF0pW1wiZGVmYXVsdFwiXTtcbn0pOyIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRIYW5kbGUgPSAxOyAvLyBTcGVjIHNheXMgZ3JlYXRlciB0aGFuIHplcm9cbiAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICB2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xuICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJcIiArIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIFN0b3JlIGFuZCByZWdpc3RlciB0aGUgdGFza1xuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuICAgICAgdGFza3NCeUhhbmRsZVtuZXh0SGFuZGxlXSA9IHRhc2s7XG4gICAgICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKHRhc2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FsbGJhY2soï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             bn1cblxuZnVuY3Rpb24gbmF0aXZlQmluZCAoZm4sIGN0eCkge1xuICByZXR1cm4gZm4uYmluZChjdHgpXG59XG5cbnZhciBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiAgPyBuYXRpdmVCaW5kXG4gIDogcG9seWZpbGxCaW5kO1xuXG4vKipcbiAqIENvbnZlcnQgYW4gQXJyYXktbGlrZSBvYmplY3QgdG8gYSByZWFsIEFycmF5LlxuICovXG5mdW5jdGlvbiB0b0FycmF5IChsaXN0LCBzdGFydCkge1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIHZhciBpID0gbGlzdC5sZW5ndGggLSBzdGFydDtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSkge1xuICAgIHJldFtpXSA9IGxpc3RbaSArIHN0YXJ0XTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbi8qKlxuICogTWl4IHByb3BlcnRpZXMgaW50byB0YXJnZXQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBleHRlbmQgKHRvLCBfZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gX2Zyb20pIHtcbiAgICB0b1trZXldID0gX2Zyb21ba2V5XTtcbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBNZXJnZSBhbiBBcnJheSBvZiBPYmplY3RzIGludG8gYSBzaW5nbGUgT2JqZWN0LlxuICovXG5mdW5jdGlvbiB0b09iamVjdCAoYXJyKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldKSB7XG4gICAgICBleHRlbmQocmVzLCBhcnJbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cbi8qKlxuICogUGVyZm9ybSBubyBvcGVyYXRpb24uXG4gKiBTdHViYmluZyBhcmdzIHRvIG1ha2UgRmxvdyBoYXBweSB3aXRob3V0IGxlYXZpbmcgdXNlbGVzcyB0cmFuc3BpbGVkIGNvZGVcbiAqIHdpdGggLi4ucmVzdCAoaHR0cHM6Ly9mbG93Lm9yZy9ibG9nLzIwMTcvMDUvMDcvU3RyaWN0LUZ1bmN0aW9uLUNhbGwtQXJpdHkvKS5cbiAqL1xuZnVuY3Rpb24gbm9vcCAoYSwgYiwgYykge31cblxuLyoqXG4gKiBBbHdheXMgcmV0dXJuIGZhbHNlLlxuICovXG52YXIgbm8gPSBmdW5jdGlvbiAoYSwgYiwgYykgeyByZXR1cm4gZmFsc2U7IH07XG5cbi8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBSZXR1cm4gdGhlIHNhbWUgdmFsdWUuXG4gKi9cbnZhciBpZGVudGl0eSA9IGZ1bmN0aW9uIChfKSB7IHJldHVybiBfOyB9O1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgc3RyaW5nIGNvbnRhaW5pbmcgc3RhdGljIGtleXMgZnJvbSBjb21waWxlciBtb2R1bGVzLlxuICovXG5mdW5jdGlvbiBnZW5TdGF0aWNLZXlzIChtb2R1bGVzKSB7XG4gIHJldHVybiBtb2R1bGVzLnJlZHVjZShmdW5jdGlvbiAoa2V5cywgbSkge1xuICAgIHJldHVybiBrZXlzLmNvbmNhdChtLnN0YXRpY0tleXMgfHwgW10pXG4gIH0sIFtdKS5qb2luKCcsJylcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0d28gdmFsdWVzIGFyZSBsb29zZWx5IGVxdWFsIC0gdGhhdCBpcyxcbiAqIGlmIHRoZXkgYXJlIHBsYWluIG9iamVjdHMsIGRvIHRoZXkgaGF2ZSB0aGUgc2FtZSBzaGFwZT9cbiAqL1xuZnVuY3Rpb24gbG9vc2VFcXVhbCAoYSwgYikge1xuICBpZiAoYSA9PT0gYikgeyByZXR1cm4gdHJ1ZSB9XG4gIHZhciBpc09iamVjdEEgPSBpc09iamVjdChhKTtcbiAgdmFyIGlzT2JqZWN0QiA9IGlzT2JqZWN0KGIpO1xuICBpZiAoaXNPYmplY3RBICYmIGlzT2JqZWN0Qikge1xuICAgIHRyeSB7XG4gICAgICB2YXIgaXNBcnJheUEgPSBBcnJheS5pc0FycmF5KGEpO1xuICAgICAgdmFyIGlzQXJyYXlCID0gQXJyYXkuaXNBcnJheShiKTtcbiAgICAgIGlmIChpc0FycmF5QSAmJiBpc0FycmF5Qikge1xuICAgICAgICByZXR1cm4gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgICAgICByZXR1cm4gbG9vc2VFcXVhbChlLCBiW2ldKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIGlmIChhIGluc3RhbmNlb2YgRGF0ZSAmJiBiIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gYS5nZXRUaW1lKCkgPT09IGIuZ2V0VGltZSgpXG4gICAgICB9IGVsc2UgaWYgKCFpc0FycmF5QSAmJiAhaXNBcnJheUIpIHtcbiAgICAgICAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMoYSk7XG4gICAgICAgIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKGIpO1xuICAgICAgICByZXR1cm4ga2V5c0EubGVuZ3RoID09PSBrZXlzQi5sZW5ndGggJiYga2V5c0EuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGFba2V5XSwgYltrZXldKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfSBlbHNlIGlmICghaXNPYmplY3RBICYmICFpc09iamVjdEIpIHtcbiAgICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybiB0aGUgZmlyc3QgaW5kZXggYXQgd2hpY2ggYSBsb29zZWx5IGVxdWFsIHZhbHVlIGNhbiBiZVxuICogZm91bmQgaW4gdGhlIGFycmF5IChpZiB2YWx1ZSBpcyBhIHBsYWluIG9iamVjdCwgdGhlIGFycmF5IG11c3RcbiAqIGNvbnRhaW4gYW4gb2JqZWN0IG9mIHRoZSBzYW1lIHNoYXBlKSwgb3IgLTEgaWYgaXQgaXMgbm90IHByZXNlbnQuXG4gKi9cbmZ1bmN0aW9uIGxvb3NlSW5kZXhPZiAoYXJyLCB2YWwpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobG9vc2VFcXVhbChhcnJbaV0sIHZhbCkpIHsgcmV0dXJuIGkgfVxuICB9XG4gIHJldHVybiAtMVxufVxuXG4vKipcbiAqIEVuc3VyZSBhIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmx5IG9uY2UuXG4gKi9cbmZ1bmN0aW9uIG9uY2UgKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG59XG5cbnZhciBTU1JfQVRUUiA9ICdkYXRhLXNlcnZlci1yZW5kZXJlZCc7XG5cbnZhciBBU1NFVF9UWVBFUyA9IFtcbiAgJ2NvbXBvbmVudCcsXG4gICdkaXJlY3RpdmUnLFxuICAnZmlsdGVyJ1xuXTtcblxudmFyIExJRkVDWUNMRV9IT09LUyA9IFtcbiAgJ2JlZm9yZUNyZWF0ZScsXG4gICdjcmVhdGVkJyxcbiAgJ2JlZm9yZU1vdW50JyxcbiAgJ21vdW50ZWQnLFxuICAnYmVmb3JlVXBkYXRlJyxcbiAgJ3VwZGF0ZWQnLFxuICAnYmVmb3JlRGVzdHJveScsXG4gICdkZXN0cm95ZWQnLFxuICAnYWN0aXZhdGVkJyxcbiAgJ2RlYWN0aXZhdGVkJyxcbiAgJ2Vycm9yQ2FwdHVyZWQnLFxuICAnc2VydmVyUHJlZmV0Y2gnXG5dO1xuXG4vKiAgKi9cblxuXG5cbnZhciBjb25maWcgPSAoe1xuICAvKipcbiAgICogT3B0aW9uIG1lcmdlIHN0cmF0ZWdpZXMgKHVzZWQgaW4gY29yZS91dGlsL29wdGlvbnMpXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHN1cHByZXNzIHdhcm5pbmdzLlxuICAgKi9cbiAgc2lsZW50OiBmYWxzZSxcblxuICAvKipcbiAgICogU2hvdyBwcm9kdWN0aW9uIG1vZGUgdGlwIG1lc3NhZ2Ugb24gYm9vdD9cbiAgICovXG4gIHByb2R1Y3Rpb25UaXA6IFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGVuYWJsZSBkZXZ0b29sc1xuICAgKi9cbiAgZGV2dG9vbHM6IFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHJlY29yZCBwZXJmXG4gICAqL1xuICBwZXJmb3JtYW5jZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEVycm9yIGhhbmRsZXIgZm9yIHdhdGNoZXIgZXJyb3JzXG4gICAqL1xuICBlcnJvckhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIFdhcm4gaGFuZGxlciBmb3Igd2F0Y2hlciB3YXJuc1xuICAgKi9cbiAgd2FybkhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIElnbm9yZSBjZXJ0YWluIGN1c3RvbSBlbGVtZW50c1xuICAgKi9cbiAgaWdub3JlZEVsZW1lbnRzOiBbXSxcblxuICAvKipcbiAgICogQ3VzdG9tIHVzZXIga2V5IGFsaWFzZXMgZm9yIHYtb25cbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBrZXlDb2RlczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgcmVnaXN0ZXJlZCBhcyBhXG4gICAqIGNvbXBvbmVudC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRUYWc6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgdXNlZCBhcyBhIGNvbXBvbmVudFxuICAgKiBwcm9wLiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZEF0dHI6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyBhbiB1bmtub3duIGVsZW1lbnQuXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIGlzVW5rbm93bkVsZW1lbnQ6IG5vLFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG5hbWVzcGFjZSBvZiBhbiBlbGVtZW50XG4gICAqL1xuICBnZXRUYWdOYW1lc3BhY2U6IG5vb3AsXG5cbiAgLyoqXG4gICAqIFBhcnNlIHRoZSByZWFsIHRhZyBuYW1lIGZvciB0aGUgc3BlY2lmaWMgcGxhdGZvcm0uXG4gICAqL1xuICBwYXJzZVBsYXRmb3JtVGFnTmFtZTogaWRlbnRpdHksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBtdXN0IGJlIGJvdW5kIHVzaW5nIHByb3BlcnR5LCBlLmcuIHZhbHVlXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIG11c3RVc2VQcm9wOiBubyxcblxuICAvKipcbiAgICogUGVyZm9ybSB1cGRhdGVzIGFzeW5jaHJvbm91c2x5LiBJbnRlbmRlZCB0byBiZSB1c2VkIGJ5IFZ1ZSBUZXN0IFV0aWxzXG4gICAqIFRoaXMgd2lsbCBzaWduaWZpY2FudGx5IHJlZHVjZSBwZXJmb3JtYW5jZSBpZiBzZXQgdG8gZmFsc2UuXG4gICAqL1xuICBhc3luYzogdHJ1ZSxcblxuICAvKipcbiAgICogRXhwb3NlZCBmb3IgbGVnYWN5IHJlYXNvbnNcbiAgICovXG4gIF9saWZlY3ljbGVIb29rczogTElGRUNZQ0xFX0hPT0tTXG59KTtcblxuLyogICovXG5cbi8qKlxuICogdW5pY29kZSBsZXR0ZXJzIHVzZWQgZm9yIHBhcnNpbmcgaHRtbCB0YWdzLCBjb21wb25lbnQgbmFtZXMgYW5kIHByb3BlcnR5IHBhdGhzLlxuICogdXNpbmcgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1My9zZW1hbnRpY3Mtc2NyaXB0aW5nLmh0bWwjcG90ZW50aWFsY3VzdG9tZWxlbWVudG5hbWVcbiAqIHNraXBwaW5nIFxcdTEwMDAwLVxcdUVGRkZGIGR1ZSB0byBpdCBmcmVlemluZyB1cCBQaGFudG9tSlNcbiAqL1xudmFyIHVuaWNvZGVSZWdFeHAgPSAvYS16QS1aXFx1MDBCN1xcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwM0YtXFx1MjA0MFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRC87XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzdHJpbmcgc3RhcnRzIHdpdGggJCBvciBfXG4gKi9cbmZ1bmN0aW9uIGlzUmVzZXJ2ZWQgKHN0cikge1xuICB2YXIgYyA9IChzdHIgKyAnJykuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuIGMgPT09IDB4MjQgfHwgYyA9PT0gMHg1RlxufVxuXG4vKipcbiAqIERlZmluZSBhIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBkZWYgKG9iaiwga2V5LCB2YWwsIGVudW1lcmFibGUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgdmFsdWU6IHZhbCxcbiAgICBlbnVtZXJhYmxlOiAhIWVudW1lcmFibGUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFBhcnNlIHNpbXBsZSBwYXRoLlxuICovXG52YXIgYmFpbFJFID0gbmV3IFJlZ0V4cCgoXCJbXlwiICsgKHVuaWNvZGVSZWdFeHAuc291cmNlKSArIFwiLiRfXFxcXGRdXCIpKTtcbmZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICBpZiAoYmFpbFJFLnRlc3QocGF0aCkpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIHJldHVybiBmdW5jdGlvbiAob2JqKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFvYmopIHsgcmV0dXJuIH1cbiAgICAgIG9iaiA9IG9ialtzZWdtZW50c1tpXV07XG4gICAgfVxuICAgIHJldHVybiBvYmpcbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gY2FuIHdlIHVzZSBfX3Byb3RvX18/XG52YXIgaGFzUHJvdG8gPSAnX19wcm90b19fJyBpbiB7fTtcblxuLy8gQnJvd3NlciBlbnZpcm9ubWVudCBzbmlmZmluZ1xudmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xudmFyIGluV2VleCA9IHR5cGVvZiBXWEVudmlyb25tZW50ICE9PSAndW5kZWZpbmVkJyAmJiAhIVdYRW52aXJvbm1lbnQucGxhdGZvcm07XG52YXIgd2VleFBsYXRmb3JtID0gaW5XZWV4ICYmIFdYRW52aXJvbm1lbnQucGxhdGZvcm0udG9Mb3dlckNhc2UoKTtcbnZhciBVQSA9IGluQnJvd3NlciAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xudmFyIGlzSUUgPSBVQSAmJiAvbXNpZXx0cmlkZW50Ly50ZXN0KFVBKTtcbnZhciBpc0lFOSA9IFVBICYmIFVBLmluZGV4T2YoJ21zaWUgOS4wJykgPiAwO1xudmFyIGlzRWRnZSA9IFVBICYmIFVBLmluZGV4T2YoJ2VkZ2UvJykgPiAwO1xudmFyIGlzQW5kcm9pZCA9IChVQSAmJiBVQS5pbmRleE9mKCdhbmRyb2lkJykgPiAwKSB8fCAod2VleFBsYXRmb3JtID09PSAnYW5kcm9pZCcpO1xudmFyIGlzSU9TID0gKFVBICYmIC9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChVQSkpIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdpb3MnKTtcbnZhciBpc0Nocm9tZSA9IFVBICYmIC9jaHJvbWVcXC9cXGQrLy50ZXN0KFVBKSAmJiAhaXNFZGdlO1xudmFyIGlzUGhhbnRvbUpTID0gVUEgJiYgL3BoYW50b21qcy8udGVzdChVQSk7XG52YXIgaXNGRiA9IFVBICYmIFVBLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLyk7XG5cbi8vIEZpcmVmb3ggaGFzIGEgXCJ3YXRjaFwiIGZ1bmN0aW9uIG9uIE9iamVjdC5wcm90b3R5cGUuLi5cbnZhciBuYXRpdmVXYXRjaCA9ICh7fSkud2F0Y2g7XG5cbnZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcbmlmIChpbkJyb3dzZXIpIHtcbiAgdHJ5IHtcbiAgICB2YXIgb3B0cyA9IHt9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvcHRzLCAncGFzc2l2ZScsICh7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHN1cHBvcnRzUGFzc2l2ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSkpOyAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMjg1XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QtcGFzc2l2ZScsIG51bGwsIG9wdHMpO1xuICB9IGNhdGNoIChlKSB7fVxufVxuXG4vLyB0aGlzIG5lZWRzIHRvIGJlIGxhenktZXZhbGVkIGJlY2F1c2UgdnVlIG1heSBiZSByZXF1aXJlZCBiZWZvcmVcbi8vIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgY2FuIHNldCBWVUVfRU5WXG52YXIgX2lzU2VydmVyO1xudmFyIGlzU2VydmVyUmVuZGVyaW5nID0gZnVuY3Rpb24gKCkge1xuICBpZiAoX2lzU2VydmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWluQnJvd3NlciAmJiAhaW5XZWV4ICYmIHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBkZXRlY3QgcHJlc2VuY2Ugb2YgdnVlLXNlcnZlci1yZW5kZXJlciBhbmQgYXZvaWRcbiAgICAgIC8vIFdlYnBhY2sgc2hpbW1pbmcgdGhlIHByb2Nlc3NcbiAgICAgIF9pc1NlcnZlciA9IGdsb2JhbFsncHJvY2VzcyddICYmIGdsb2JhbFsncHJvY2VzcyddLmVudi5WVUVfRU5WID09PSAnc2VydmVyJztcbiAgICB9IGVsc2Uge1xuICAgICAgX2lzU2VydmVyID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBfaXNTZXJ2ZXJcbn07XG5cbi8vIGRldGVjdCBkZXZ0b29sc1xudmFyIGRldnRvb2xzID0gaW5Ccm93c2VyICYmIHdpbmRvdy5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gaXNOYXRpdmUgKEN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChDdG9yLnRvU3RyaW5nKCkpXG59XG5cbnZhciBoYXNTeW1ib2wgPVxuICB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTeW1ib2wpICYmXG4gIHR5cGVvZiBSZWZsZWN0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShSZWZsZWN0Lm93bktleXMpO1xuXG52YXIgX1NldDtcbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLyAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbmlmICh0eXBlb2YgU2V0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTZXQpKSB7XG4gIC8vIHVzZSBuYXRpdmUgU2V0IHdoZW4gYXZhaWxhYmxlLlxuICBfU2V0ID0gU2V0O1xufSBlbHNlIHtcbiAgLy8gYSBub24tc3RhbmRhcmQgU2V0IHBvbHlmaWxsIHRoYXQgb25seSB3b3JrcyB3aXRoIHByaW1pdGl2ZSBrZXlzLlxuICBfU2V0ID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2V0ICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9XG4gICAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXMgKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0W2tleV0gPT09IHRydWVcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChrZXkpIHtcbiAgICAgIHRoaXMuc2V0W2tleV0gPSB0cnVlO1xuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFNldDtcbiAgfSgpKTtcbn1cblxuLyogICovXG5cbnZhciB3YXJuID0gbm9vcDtcbnZhciB0aXAgPSBub29wO1xudmFyIGdlbmVyYXRlQ29tcG9uZW50VHJhY2UgPSAobm9vcCk7IC8vIHdvcmsgYXJvdW5kIGZsb3cgY2hlY2tcbnZhciBmb3JtYXRDb21wb25lbnROYW1lID0gKG5vb3ApO1xuXG57XG4gIHZhciBoYXNDb25zb2xlID0gdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnO1xuICB2YXIgY2xhc3NpZnlSRSA9IC8oPzpefFstX10pKFxcdykvZztcbiAgdmFyIGNsYXNzaWZ5ID0gZnVuY3Rpb24gKHN0cikgeyByZXR1cm4gc3RyXG4gICAgLnJlcGxhY2UoY2xhc3NpZnlSRSwgZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMudG9VcHBlckNhc2UoKTsgfSlcbiAgICAucmVwbGFjZSgvWy1fXS9nLCAnJyk7IH07XG5cbiAgd2FybiA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgdmFyIHRyYWNlID0gdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnO1xuXG4gICAgaWYgKGNvbmZpZy53YXJuSGFuZGxlcikge1xuICAgICAgY29uZmlnLndhcm5IYW5kbGVyLmNhbGwobnVsbCwgbXNnLCB2bSwgdHJhY2UpO1xuICAgIH0gZWxzZSBpZiAoaGFzQ29uc29sZSAmJiAoIWNvbmZpZy5zaWxlbnQpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKChcIltWdWUgd2Fybl06IFwiICsgbXNnICsgdHJhY2UpKTtcbiAgICB9XG4gIH07XG5cbiAgdGlwID0gZnVuY3Rpb24gKG1zZywgdm0pIHtcbiAgICBpZiAoaGFzQ29uc29sZSAmJiAoIWNvbmZpZy5zaWxlbnQpKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJbVnVlIHRpcF06IFwiICsgbXNnICsgKFxuICAgICAgICB2bSA/IGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIDogJydcbiAgICAgICkpO1xuICAgIH1cbiAgfTtcblxuICBmb3JtYXRDb21wb25lbnROYW1lID0gZnVuY3Rpb24gKHZtLCBpbmNsdWRlRmlsZSkge1xuICAgIGlmICh2bS4kcm9vdCA9PT0gdm0pIHtcbiAgICAgIHJldHVybiAnPFJvb3Q+J1xuICAgIH1cbiAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiB2bSA9PT0gJ2Z1bmN0aW9uJyAmJiB2bS5jaWQgIT0gbnVsbFxuICAgICAgPyB2bS5vcHRpb25zXG4gICAgICA6IHZtLl9pc1Z1ZVxuICAgICAgICA/IHZtLiRvcHRpb25zIHx8IHZtLmNvbnN0cnVjdG9yLm9wdGlvbnNcbiAgICAgICAgOiB2bTtcbiAgICB2YXIgbmFtZSA9IG9wdGlvbnMubmFtZSB8fCBvcHRpb25zLl9jb21wb25lbnRUYWc7XG4gICAgdmFyIGZpbGUgPSBvcHRpb25zLl9fZmlsZTtcbiAgICBpZiAoIW5hbWUgJiYgZmlsZSkge1xuICAgICAgdmFyIG1hdGNoID0gZmlsZS5tYXRjaCgvKFteL1xcXFxdKylcXC52dWUkLyk7XG4gICAgICBuYW1lID0gbWF0Y2ggJiYgbWF0Y2hbMV07XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIChuYW1lID8gKFwiPFwiICsgKGNsYXNzaWZ5KG5hbWUpKSArIFwiPlwiKSA6IFwiPEFub255bW91cz5cIikgK1xuICAgICAgKGZpbGUgJiYgaW5jbHVkZUZpbGUgIT09IGZhbHNlID8gKFwiIGF0IFwiICsgZmlsZSkgOiAnJylcbiAgICApXG4gIH07XG5cbiAgdmFyIHJlcGVhdCA9IGZ1bmN0aW9uIChzdHIsIG4pIHtcbiAgICB2YXIgcmVzID0gJyc7XG4gICAgd2hpbGUgKG4pIHtcbiAgICAgIGlmIChuICUgMiA9PT0gMSkgeyByZXMgKz0gc3RyOyB9XG4gICAgICBpZiAobiA+IDEpIHsgc3RyICs9IHN0cjsgfVxuICAgICAgbiA+Pj0gMTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9O1xuXG4gIGdlbmVyYXRlQ29tcG9uZW50VHJhY2UgPSBmdW5jdGlvbiAodm0pIHtcbiAgICBpZiAodm0uX2lzVnVlICYmIHZtLiRwYXJlbnQpIHtcbiAgICAgIHZhciB0cmVlID0gW107XG4gICAgICB2YXIgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDtcbiAgICAgIHdoaWxlICh2bSkge1xuICAgICAgICBpZiAodHJlZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdmFyIGxhc3QgPSB0cmVlW3RyZWUubGVuZ3RoIC0gMV07XG4gICAgICAgICAgaWYgKGxhc3QuY29uc3RydWN0b3IgPT09IHZtLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UrKztcbiAgICAgICAgICAgIHZtID0gdm0uJHBhcmVudDtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPiAwKSB7XG4gICAgICAgICAgICB0cmVlW3RyZWUubGVuZ3RoIC0gMV0gPSBbbGFzdCwgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlXTtcbiAgICAgICAgICAgIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRyZWUucHVzaCh2bSk7XG4gICAgICAgIHZtID0gdm0uJHBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAnXFxuXFxuZm91bmQgaW5cXG5cXG4nICsgdHJlZVxuICAgICAgICAubWFwKGZ1bmN0aW9uICh2bSwgaSkgeyByZXR1cm4gKFwiXCIgKyAoaSA9PT0gMCA/ICctLS0+ICcgOiByZXBlYXQoJyAnLCA1ICsgaSAqIDIpKSArIChBcnJheS5pc0FycmF5KHZtKVxuICAgICAgICAgICAgPyAoKGZvcm1hdENvbXBvbmVudE5hbWUodm1bMF0pKSArIFwiLi4uIChcIiArICh2bVsxXSkgKyBcIiByZWN1cnNpdmUgY2FsbHMpXCIpXG4gICAgICAgICAgICA6IGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSk7ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ID0gZmFsc2U7XG4gIHZtLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgdm0uX2lzRGVzdHJveWVkID0gZmFsc2U7XG4gIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGxpZmVjeWNsZU1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZhciBwcmV2RWwgPSB2bS4kZWw7XG4gICAgdmFyIHByZXZWbm9kZSA9IHZtLl92bm9kZTtcbiAgICB2YXIgcmVzdG9yZUFjdGl2ZUluc3RhbmNlID0gc2V0QWN0aXZlSW5zdGFuY2Uodm0pO1xuICAgIHZtLl92bm9kZSA9IHZub2RlO1xuICAgIC8vIFZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fIGlzIGluamVjdGVkIGluIGVudHJ5IHBvaW50c1xuICAgIC8vIGJhc2VkIG9uIHRoZSByZW5kZXJpbmcgYmFja2VuZCB1c2VkLlxuICAgIGlmICghcHJldlZub2RlKSB7XG4gICAgICAvLyBpbml0aWFsIHJlbmRlclxuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHZtLiRlbCwgdm5vZGUsIGh5ZHJhdGluZywgZmFsc2UgLyogcmVtb3ZlT25seSAqLyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVwZGF0ZXNcbiAgICAgIHZtLiRlbCA9IHZtLl9fcGF0Y2hfXyhwcmV2Vm5vZGUsIHZub2RlKTtcbiAgICB9XG4gICAgcmVzdG9yZUFjdGl2ZUluc3RhbmNlKCk7XG4gICAgLy8gdXBkYXRlIF9fdnVlX18gcmVmZXJlbmNlXG4gICAgaWYgKHByZXZFbCkge1xuICAgICAgcHJldkVsLl9fdnVlX18gPSBudWxsO1xuICAgIH1cbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IHZtO1xuICAgIH1cbiAgICAvLyBpZiBwYXJlbnQgaXMgYW4gSE9DLCB1cGRhdGUgaXRzICRlbCBhcyB3ZWxsXG4gICAgaWYgKHZtLiR2bm9kZSAmJiB2bS4kcGFyZW50ICYmIHZtLiR2bm9kZSA9PT0gdm0uJHBhcmVudC5fdm5vZGUpIHtcbiAgICAgIHZtLiRwYXJlbnQuJGVsID0gdm0uJGVsO1xuICAgIH1cbiAgICAvLyB1cGRhdGVkIGhvb2sgaXMgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIgdG8gZW5zdXJlIHRoYXQgY2hpbGRyZW4gYXJlXG4gICAgLy8gdXBkYXRlZCBpbiBhIHBhcmVudCdzIHVwZGF0ZWQgaG9vay5cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRmb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5fd2F0Y2hlcikge1xuICAgICAgdm0uX3dhdGNoZXIudXBkYXRlKCk7XG4gICAgfVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAodm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZURlc3Ryb3knKTtcbiAgICB2bS5faXNCZWluZ0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgLy8gcmVtb3ZlIHNlbGYgZnJvbSBwYXJlbnRcbiAgICB2YXIgcGFyZW50ID0gdm0uJHBhcmVudDtcbiAgICBpZiAocGFyZW50ICYmICFwYXJlbnQuX2lzQmVpbmdEZXN0cm95ZWQgJiYgIXZtLiRvcHRpb25zLmFic3RyYWN0KSB7XG4gICAgICByZW1vdmUocGFyZW50LiRjaGlsZHJlbiwgdm0pO1xuICAgIH1cbiAgICAvLyB0ZWFyZG93biB3YXRjaGVyc1xuICAgIGlmICh2bS5fd2F0Y2hlcikge1xuICAgICAgdm0uX3dhdGNoZXIudGVhcmRvd24oKTtcbiAgICB9XG4gICAgdmFyIGkgPSB2bS5fd2F0Y2hlcnMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHZtLl93YXRjaGVyc1tpXS50ZWFyZG93bigpO1xuICAgIH1cbiAgICAvLyByZW1vdmUgcmVmZXJlbmNlIGZyb20gZGF0YSBvYlxuICAgIC8vIGZyb3plbiBvYmplY3QgbWF5IG5vdCBoYXZlIG9ic2VydmVyLlxuICAgIGlmICh2bS5fZGF0YS5fX29iX18pIHtcbiAgICAgIHZtLl9kYXRhLl9fb2JfXy52bUNvdW50LS07XG4gICAgfVxuICAgIC8vIGNhbGwgdGhlIGxhc3QgaG9vay4uLlxuICAgIHZtLl9pc0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgLy8gaW52b2tlIGRlc3Ryb3kgaG9va3Mgb24gY3VycmVudCByZW5kZXJlZCB0cmVlXG4gICAgdm0uX19wYXRjaF9fKHZtLl92bm9kZSwgbnVsbCk7XG4gICAgLy8gZmlyZSBkZXN0cm95ZWQgaG9va1xuICAgIGNhbGxIb29rKHZtLCAnZGVzdHJveWVkJyk7XG4gICAgLy8gdHVybiBvZmYgYWxsIGluc3RhbmNlIGxpc3RlbmVycy5cbiAgICB2bS4kb2ZmKCk7XG4gICAgLy8gcmVtb3ZlIF9fdnVlX18gcmVmZXJlbmNlXG4gICAgaWYgKHZtLiRlbCkge1xuICAgICAgdm0uJGVsLl9fdnVlX18gPSBudWxsO1xuICAgIH1cbiAgICAvLyByZWxlYXNlIGNpcmN1bGFyIHJlZmVyZW5jZSAoIzY3NTkpXG4gICAgaWYgKHZtLiR2bm9kZSkge1xuICAgICAgdm0uJHZub2RlLnBhcmVudCA9IG51bGw7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBtb3VudENvbXBvbmVudCAoXG4gIHZtLFxuICBlbCxcbiAgaHlkcmF0aW5nXG4pIHtcbiAgdm0uJGVsID0gZWw7XG4gIGlmICghdm0uJG9wdGlvbnMucmVuZGVyKSB7XG4gICAgdm0uJG9wdGlvbnMucmVuZGVyID0gY3JlYXRlRW1wdHlWTm9kZTtcbiAgICB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICgodm0uJG9wdGlvbnMudGVtcGxhdGUgJiYgdm0uJG9wdGlvbnMudGVtcGxhdGUuY2hhckF0KDApICE9PSAnIycpIHx8XG4gICAgICAgIHZtLiRvcHRpb25zLmVsIHx8IGVsKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCBvZiBWdWUgd2hlcmUgdGhlIHRlbXBsYXRlICcgK1xuICAgICAgICAgICdjb21waWxlciBpcyBub3QgYXZhaWxhYmxlLiBFaXRoZXIgcHJlLWNvbXBpbGUgdGhlIHRlbXBsYXRlcyBpbnRvICcgK1xuICAgICAgICAgICdyZW5kZXIgZnVuY3Rpb25zLCBvciB1c2UgdGhlIGNvbXBpbGVyLWluY2x1ZGVkIGJ1aWxkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ0ZhaWxlZCB0byBtb3VudCBjb21wb25lbnQ6IHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbiBub3QgZGVmaW5lZC4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNhbGxIb29rKHZtLCAnYmVmb3JlTW91bnQnKTtcblxuICB2YXIgdXBkYXRlQ29tcG9uZW50O1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgdXBkYXRlQ29tcG9uZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG5hbWUgPSB2bS5fbmFtZTtcbiAgICAgIHZhciBpZCA9IHZtLl91aWQ7XG4gICAgICB2YXIgc3RhcnRUYWcgPSBcInZ1ZS1wZXJmLXN0YXJ0OlwiICsgaWQ7XG4gICAgICB2YXIgZW5kVGFnID0gXCJ2dWUtcGVyZi1lbmQ6XCIgKyBpZDtcblxuICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgICB2YXIgdm5vZGUgPSB2bS5fcmVuZGVyKCk7XG4gICAgICBtYXJrKGVuZFRhZyk7XG4gICAgICBtZWFzdXJlKChcInZ1ZSBcIiArIG5hbWUgKyBcIiByZW5kZXJcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuXG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgIHZtLl91cGRhdGUodm5vZGUsIGh5ZHJhdGluZyk7XG4gICAgICBtYXJrKGVuZFRhZyk7XG4gICAgICBtZWFzdXJlKChcInZ1ZSBcIiArIG5hbWUgKyBcIiBwYXRjaFwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2bS5fdXBkYXRlKHZtLl9yZW5kZXIoKSwgaHlkcmF0aW5nKTtcbiAgICB9O1xuICB9XG5cbiAgLy8gd2Ugc2V0IHRoaXMgdG8gdm0uX3dhdGNoZXIgaW5zaWRlIHRoZSB3YXRjaGVyJ3MgY29uc3RydWN0b3JcbiAgLy8gc2luY2UgdGhlIHdhdGNoZXIncyBpbml0aWFsIHBhdGNoIG1heSBjYWxsICRmb3JjZVVwZGF0ZSAoZS5nLiBpbnNpZGUgY2hpbGRcbiAgLy8gY29tcG9uZW50J3MgbW91bnRlZCBob29rKSwgd2hpY2ggcmVsaWVzIG9uIHZtLl93YXRjaGVyIGJlaW5nIGFscmVhZHkgZGVmaW5lZFxuICBuZXcgV2F0Y2hlcih2bSwgdXBkYXRlQ29tcG9uZW50LCBub29wLCB7XG4gICAgYmVmb3JlOiBmdW5jdGlvbiBiZWZvcmUgKCkge1xuICAgICAgaWYgKHZtLl9pc01vdW50ZWQgJiYgIXZtLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZVVwZGF0ZScpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgdHJ1ZSAvKiBpc1JlbmRlcldhdGNoZXIgKi8pO1xuICBoeWRyYXRpbmcgPSBmYWxzZTtcblxuICAvLyBtYW51YWxseSBtb3VudGVkIGluc3RhbmNlLCBjYWxsIG1vdW50ZWQgb24gc2VsZlxuICAvLyBtb3VudGVkIGlzIGNhbGxlZCBmb3IgcmVuZGVyLWNyZWF0ZWQgY2hpbGQgY29tcG9uZW50cyBpbiBpdHMgaW5zZXJ0ZWQgaG9va1xuICBpZiAodm0uJHZub2RlID09IG51bGwpIHtcbiAgICB2bS5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICBjYWxsSG9vayh2bSwgJ21vdW50ZWQnKTtcbiAgfVxuICByZXR1cm4gdm1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQ2hpbGRDb21wb25lbnQgKFxuICB2bSxcbiAgcHJvcHNEYXRhLFxuICBsaXN0ZW5lcnMsXG4gIHBhcmVudFZub2RlLFxuICByZW5kZXJDaGlsZHJlblxuKSB7XG4gIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSB0cnVlO1xuICB9XG5cbiAgLy8gZGV0ZXJtaW5lIHdoZXRoZXIgY29tcG9uZW50IGhhcyBzbG90IGNoaWxkcmVuXG4gIC8vIHdlIG5lZWQgdG8gZG8gdGhpcyBiZWZvcmUgb3ZlcndyaXRpbmcgJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLlxuXG4gIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBkeW5hbWljIHNjb3BlZFNsb3RzIChoYW5kLXdyaXR0ZW4gb3IgY29tcGlsZWQgYnV0IHdpdGhcbiAgLy8gZHluYW1pYyBzbG90IG5hbWVzKS4gU3RhdGljIHNjb3BlZCBzbG90cyBjb21waWxlZCBmcm9tIHRlbXBsYXRlIGhhcyB0aGVcbiAgLy8gXCIkc3RhYmxlXCIgbWFya2VyLlxuICB2YXIgbmV3U2NvcGVkU2xvdHMgPSBwYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzO1xuICB2YXIgb2xkU2NvcGVkU2xvdHMgPSB2bS4kc2NvcGVkU2xvdHM7XG4gIHZhciBoYXNEeW5hbWljU2NvcGVkU2xvdCA9ICEhKFxuICAgIChuZXdTY29wZWRTbG90cyAmJiAhbmV3U2NvcGVkU2xvdHMuJHN0YWJsZSkgfHxcbiAgICAob2xkU2NvcGVkU2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmICFvbGRTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgIChuZXdTY29wZWRTbG90cyAmJiB2bS4kc2NvcGVkU2xvdHMuJGtleSAhPT0gbmV3U2NvcGVkU2xvdHMuJGtleSlcbiAgKTtcblxuICAvLyBBbnkgc3RhdGljIHNsb3QgY2hpbGRyZW4gZnJvbSB0aGUgcGFyZW50IG1heSBoYXZlIGNoYW5nZWQgZHVyaW5nIHBhcmVudCdzXG4gIC8vIHVwZGF0ZS4gRHluYW1pYyBzY29wZWQgc2xvdHMgbWF5IGFsc28gaGF2ZSBjaGFuZ2VkLiBJbiBzdWNoIGNhc2VzLCBhIGZvcmNlZFxuICAvLyB1cGRhdGUgaXMgbmVjZXNzYXJ5IHRvIGVuc3VyZSBjb3JyZWN0bmVzcy5cbiAgdmFyIG5lZWRzRm9yY2VVcGRhdGUgPSAhIShcbiAgICByZW5kZXJDaGlsZHJlbiB8fCAgICAgICAgICAgICAgIC8vIGhhcyBuZXcgc3RhdGljIHNsb3RzXG4gICAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuIHx8ICAvLyBoYXMgb2xkIHN0YXRpYyBzbG90c1xuICAgIGhhc0R5bmFtaWNTY29wZWRTbG90XG4gICk7XG5cbiAgdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG4gIHZtLiR2bm9kZSA9IHBhcmVudFZub2RlOyAvLyB1cGRhdGUgdm0ncyBwbGFjZWhvbGRlciBub2RlIHdpdGhvdXQgcmUtcmVuZGVyXG5cbiAgaWYgKHZtLl92bm9kZSkgeyAvLyB1cGRhdGUgY2hpbGQgdHJlZSdzIHBhcmVudFxuICAgIHZtLl92bm9kZS5wYXJlbnQgPSBwYXJlbnRWbm9kZTtcbiAgfVxuICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gPSByZW5kZXJDaGlsZHJlbjtcblxuICAvLyB1cGRhdGUgJGF0dHJzIGFuZCAkbGlzdGVuZXJzIGhhc2hcbiAgLy8gdGhlc2UgYXJlIGFsc28gcmVhY3RpdmUgc28gdGhleSBtYXkgdHJpZ2dlciBjaGlsZCB1cGRhdGUgaWYgdGhlIGNoaWxkXG4gIC8vIHVzZWQgdGhlbSBkdXJpbmcgcmVuZGVyXG4gIHZtLiRhdHRycyA9IHBhcmVudFZub2RlLmRhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3Q7XG4gIHZtLiRsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG5cbiAgLy8gdXBkYXRlIHByb3BzXG4gIGlmIChwcm9wc0RhdGEgJiYgdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICAgIHZhciBwcm9wcyA9IHZtLl9wcm9wcztcbiAgICB2YXIgcHJvcEtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IHByb3BLZXlzW2ldO1xuICAgICAgdmFyIHByb3BPcHRpb25zID0gdm0uJG9wdGlvbnMucHJvcHM7IC8vIHd0ZiBmbG93P1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICB9XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIC8vIGtlZXAgYSBjb3B5IG9mIHJhdyBwcm9wc0RhdGFcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgPSBwcm9wc0RhdGE7XG4gIH1cblxuICAvLyB1cGRhdGUgbGlzdGVuZXJzXG4gIGxpc3RlbmVycyA9IGxpc3RlbmVycyB8fCBlbXB0eU9iamVjdDtcbiAgdmFyIG9sZExpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMpO1xuXG4gIC8vIHJlc29sdmUgc2xvdHMgKyBmb3JjZSB1cGRhdGUgaWYgaGFzIGNoaWxkcmVuXG4gIGlmIChuZWVkc0ZvcmNlVXBkYXRlKSB7XG4gICAgdm0uJHNsb3RzID0gcmVzb2x2ZVNsb3RzKHJlbmRlckNoaWxkcmVuLCBwYXJlbnRWbm9kZS5jb250ZXh0KTtcbiAgICB2bS4kZm9yY2VVcGRhdGUoKTtcbiAgfVxuXG4gIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0luSW5hY3RpdmVUcmVlICh2bSkge1xuICB3aGlsZSAodm0gJiYgKHZtID0gdm0uJHBhcmVudCkpIHtcbiAgICBpZiAodm0uX2luYWN0aXZlKSB7IHJldHVybiB0cnVlIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH0gZWxzZSBpZiAodm0uX2RpcmVjdEluYWN0aXZlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZtLl9pbmFjdGl2ZSB8fCB2bS5faW5hY3RpdmUgPT09IG51bGwpIHtcbiAgICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2FjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gdHJ1ZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfVxuICBpZiAoIXZtLl9pbmFjdGl2ZSkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2RlYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbEhvb2sgKHZtLCBob29rKSB7XG4gIC8vICM3NTczIGRpc2FibGUgZGVwIGNvbGxlY3Rpb24gd2hlbiBpbnZva2luZyBsaWZlY3ljbGUgaG9va3NcbiAgcHVzaFRhcmdldCgpO1xuICB2YXIgaGFuZGxlcnMgPSB2bS4kb3B0aW9uc1tob29rXTtcbiAgdmFyIGluZm8gPSBob29rICsgXCIgaG9va1wiO1xuICBpZiAoaGFuZGxlcnMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IGhhbmRsZXJzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoaGFuZGxlcnNbaV0sIHZtLCBudWxsLCB2bSwgaW5mbyk7XG4gICAgfVxuICB9XG4gIGlmICh2bS5faGFzSG9va0V2ZW50KSB7XG4gICAgdm0uJGVtaXQoJ2hvb2s6JyArIGhvb2spO1xuICB9XG4gIHBvcFRhcmdldCgpO1xufVxuXG4vKiAgKi9cblxudmFyIE1BWF9VUERBVEVfQ09VTlQgPSAxMDA7XG5cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGFjdGl2YXRlZENoaWxkcmVuID0gW107XG52YXIgaGFzID0ge307XG52YXIgY2lyY3VsYXIgPSB7fTtcbnZhciB3YWl0aW5nID0gZmFsc2U7XG52YXIgZmx1c2hpbmcgPSBmYWxzZTtcbnZhciBpbmRleCA9IDA7XG5cbi8qKlxuICogUmVzZXQgdGhlIHNjaGVkdWxlcidzIHN0YXRlLlxuICovXG5mdW5jdGlvbiByZXNldFNjaGVkdWxlclN0YXRlICgpIHtcbiAgaW5kZXggPSBxdWV1ZS5sZW5ndGggPSBhY3RpdmF0ZWRDaGlsZHJlbi5sZW5ndGggPSAwO1xuICBoYXMgPSB7fTtcbiAge1xuICAgIGNpcmN1bGFyID0ge307XG4gIH1cbiAgd2FpdGluZyA9IGZsdXNoaW5nID0gZmFsc2U7XG59XG5cbi8vIEFzeW5jIGVkZ2UgY2FzZSAjNjU2NiByZXF1aXJlcyBzYXZpbmcgdGhlIHRpbWVzdGFtcCB3aGVuIGV2ZW50IGxpc3RlbmVycyBhcmVcbi8vIGF0dGFjaGVkLiBIb3dldmVyLCBjYWxsaW5nIHBlcmZvcm1hbmNlLm5vdygpIGhhcyBhIHBlcmYgb3ZlcmhlYWQgZXNwZWNpYWxseVxuLy8gaWYgdGhlIHBhZ2UgaGFzIHRob3VzYW5kcyBvZiBldmVudCBsaXN0ZW5lcnMuIEluc3RlYWQsIHdlIHRha2UgYSB0aW1lc3RhbXBcbi8vIGV2ZXJ5IHRpbWUgdGhlIHNjaGVkdWxlciBmbHVzaGVzIGFuZCB1c2UgdGhhdCBmb3IgYWxsIGV2ZW50IGxpc3RlbmVyc1xuLy8gYXR0YWNoZWQgZHVyaW5nIHRoYXQgZmx1c2guXG52YXIgY3VycmVudEZsdXNoVGltZXN0YW1wID0gMDtcblxuLy8gQXN5bmMgZWRnZSBjYXNlIGZpeCByZXF1aXJlcyBzdG9yaW5nIGFuIGV2ZW50IGxpc3RlbmVyJ3MgYXR0YWNoIHRpbWVzdGFtcC5cbnZhciBnZXROb3cgPSBEYXRlLm5vdztcblxuLy8gRGV0ZXJtaW5lIHdoYXQgZXZlbnQgdGltZXN0YW1wIHRoZSBicm93c2VyIGlzIHVzaW5nLiBBbm5veWluZ2x5LCB0aGVcbi8vIHRpbWVzdGFtcCBjYW4gZWl0aGVyIGJlIGhpLXJlcyAocmVsYXRpdmUgdG8gcGFnZSBsb2FkKSBvciBsb3ctcmVzXG4vLyAocmVsYXRpdmUgdG8gVU5JWCBlcG9jaCksIHNvIGluIG9yZGVyIHRvIGNvbXBhcmUgdGltZSB3ZSBoYXZlIHRvIHVzZSB0aGVcbi8vIHNhbWUgdGltZXN0YW1wIHR5cGUgd2hlbiBzYXZpbmcgdGhlIGZsdXNoIHRpbWVzdGFtcC5cbi8vIEFsbCBJRSB2ZXJzaW9ucyB1c2UgbG93LXJlcyBldmVudCB0aW1lc3RhbXBzLCBhbmQgaGF2ZSBwcm9ibGVtYXRpYyBjbG9ja1xuLy8gaW1wbGVtZW50YXRpb25zICgjOTYzMilcbmlmIChpbkJyb3dzZXIgJiYgIWlzSUUpIHtcbiAgdmFyIHBlcmZvcm1hbmNlID0gd2luZG93LnBlcmZvcm1hbmNlO1xuICBpZiAoXG4gICAgcGVyZm9ybWFuY2UgJiZcbiAgICB0eXBlb2YgcGVyZm9ybWFuY2Uubm93ID09PSAnZnVuY3Rpb24nICYmXG4gICAgZ2V0Tm93KCkgPiBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKS50aW1lU3RhbXBcbiAgKSB7XG4gICAgLy8gaWYgdGhlIGV2ZW50IHRpbWVzdGFtcCwgYWx0aG91Z2ggZXZhbHVhdGVkIEFGVEVSIHRoZSBEYXRlLm5vdygpLCBpc1xuICAgIC8vIHNtYWxsZXIgdGhhbiBpdCwgaXQgbWVhbnMgdGhlIGV2ZW50IGlzIHVzaW5nIGEgaGktcmVzIHRpbWVzdGFtcCxcbiAgICAvLyBhbmQgd2UgbmVlZCB0byB1c2UgdGhlIGhpLXJlcyB2ZXJzaW9uIGZvciBldmVudCBsaXN0ZW5lciB0aW1lc3RhbXBzIGFzXG4gICAgLy8gd2VsbC5cbiAgICBnZXROb3cgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBwZXJmb3JtYW5jZS5ub3coKTsgfTtcbiAgfVxufVxuXG4vKipcbiAqIEZsdXNoIGJvdGggcXVldWVzIGFuZCBydW4gdGhlIHdhdGNoZXJzLlxuICovXG5mdW5jdGlvbiBmbHVzaFNjaGVkdWxlclF1ZXVlICgpIHtcbiAgY3VycmVudEZsdXNoVGltZXN0YW1wID0gZ2V0Tm93KCk7XG4gIGZsdXNoaW5nID0gdHJ1ZTtcbiAgdmFyIHdhdGNoZXIsIGlkO1xuXG4gIC8vIFNvcnQgcXVldWUgYmVmb3JlIGZsdXNoLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdDpcbiAgLy8gMS4gQ29tcG9uZW50cyBhcmUgdXBkYXRlZCBmcm9tIHBhcmVudCB0byBjaGlsZC4gKGJlY2F1c2UgcGFyZW50IGlzIGFsd2F5c1xuICAvLyAgICBjcmVhdGVkIGJlZm9yZSB0aGUgY2hpbGQpXG4gIC8vIDIuIEEgY29tcG9uZW50J3MgdXNlciB3YXRjaGVycyBhcmUgcnVuIGJlZm9yZSBpdHMgcmVuZGVyIHdhdGNoZXIgKGJlY2F1c2VcbiAgLy8gICAgdXNlciB3YXRjaGVycyBhcmUgY3JlYXRlZCBiZWZvcmUgdGhlIHJlbmRlciB3YXRjaGVyKVxuICAvLyAzLiBJZiBhIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQgZHVyaW5nIGEgcGFyZW50IGNvbXBvbmVudCdzIHdhdGNoZXIgcnVuLFxuICAvLyAgICBpdHMgd2F0Y2hlcnMgY2FuIGJlIHNraXBwZWQuXG4gIHF1ZXVlLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuaWQgLSBiLmlkOyB9KTtcblxuICAvLyBkbyBub3QgY2FjaGUgbGVuZ3RoIGJlY2F1c2UgbW9yZSB3YXRjaGVycyBtaWdodCBiZSBwdXNoZWRcbiAgLy8gYXMgd2UgcnVuIGV4aXN0aW5nIHdhdGNoZXJzXG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHF1ZXVlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIHdhdGNoZXIgPSBxdWV1ZVtpbmRleF07XG4gICAgaWYgKHdhdGNoZXIuYmVmb3JlKSB7XG4gICAgICB3YXRjaGVyLmJlZm9yZSgpO1xuICAgIH1cbiAgICBpZCA9IHdhdGNoZXIuaWQ7XG4gICAgaGFzW2lkXSA9IG51bGw7XG4gICAgd2F0Y2hlci5ydW4oKTtcbiAgICAvLyBpbiBkZXYgYnVpbGQsIGNoZWNrIGFuZCBzdG9wIGNpcmN1bGFyIHVwZGF0ZXMuXG4gICAgaWYgKGhhc1tpZF0gIT0gbnVsbCkge1xuICAgICAgY2lyY3VsYXJbaWRdID0gKGNpcmN1bGFyW2lkXSB8fCAwKSArIDE7XG4gICAgICBpZiAoY2lyY3VsYXJbaWRdID4gTUFYX1VQREFURV9DT1VOVCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdZb3UgbWF5IGhhdmUgYW4gaW5maW5pdGUgdXBkYXRlIGxvb3AgJyArIChcbiAgICAgICAgICAgIHdhdGNoZXIudXNlclxuICAgICAgICAgICAgICA/IChcImluIHdhdGNoZXIgd2l0aCBleHByZXNzaW9uIFxcXCJcIiArICh3YXRjaGVyLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpXG4gICAgICAgICAgICAgIDogXCJpbiBhIGNvbXBvbmVudCByZW5kZXIgZnVuY3Rpb24uXCJcbiAgICAgICAgICApLFxuICAgICAgICAgIHdhdGNoZXIudm1cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBrZWVwIGNvcGllcyBvZiBwb3N0IHF1ZXVlcyBiZWZvcmUgcmVzZXR0aW5nIHN0YXRlXG4gIHZhciBhY3RpdmF0ZWRRdWV1ZSA9IGFjdGl2YXRlZENoaWxkcmVuLnNsaWNlKCk7XG4gIHZhciB1cGRhdGVkUXVldWUgPSBxdWV1ZS5zbGljZSgpO1xuXG4gIHJlc2V0U2NoZWR1bGVyU3RhdGUoKTtcblxuICAvLyBjYWxsIGNvbXBvbmVudCB1cGRhdGVkIGFuZCBhY3RpdmF0ZWQgaG9va3NcbiAgY2FsbEFjdGl2YXRlZEhvb2tzKGFjdGl2YXRlZFF1ZXVlKTtcbiAgY2FsbFVwZGF0ZWRIb29rcyh1cGRhdGVkUXVldWUpO1xuXG4gIC8vIGRldnRvb2wgaG9va1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGRldnRvb2xzICYmIGNvbmZpZy5kZXZ0b29scykge1xuICAgIGRlï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             biAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcl9jb2RlOiAnNDAwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6ICdlcnJvcidcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBydW5DYWxsYmFjayhlcnJvciwgc2V0dGluZ3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF9ldmVudE9ic2VydmVyLmRpc3BhdGNoKCdMT0dJTl9TVEFSVCcpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBfbG9naW4oc2V0dGluZ3MsIHN0YXRlVG9rZW4sIHJlZGlyZWN0VXJpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldEF1dGhVcmwoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0gXy5leHRlbmQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0X3VyaTogcmVkaXJlY3RVcmksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VfdHlwZTogJ2NvZGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiBzdGF0ZVRva2VuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGthOiBfay5LQUtBT19BR0VOVCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW46IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b19sb2dpbjogJ3RydWUnXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBnZXRDb21tb25BdXRoUGFyYW1zKHNldHRpbmdzKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfay5VUkwuYXV0aG9yaXplICsgJz8nICsgXy5idWlsZFF1ZXJ5U3RyaW5nKHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldEF1dGhVcmwoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBfQW5kcm9pZFdlYlZpZXdMb2dpbihzZXR0aW5ncywgc3RhdGVUb2tlbiwgYW5kcm9pZFRhbGtXZWJWaWV3TG9naW5VcmwpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0QXV0aFVybCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSBfLmV4dGVuZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RfdXJpOiBhbmRyb2lkVGFsa1dlYlZpZXdMb2dpblVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZV90eXBlOiAnY29kZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6IHN0YXRlVG9rZW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2E6IF9rLktBS0FPX0FHRU5ULFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbjogd2luZG93LmxvY2F0aW9uLm9yaWdpblxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZ2V0Q29tbW9uQXV0aFBhcmFtcyhzZXR0aW5ncyksIGdldEV4dHJhUGFyYW1zKHNldHRpbmdzKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfay5VUkwuYXV0aG9yaXplICsgJz8nICsgXy5idWlsZFF1ZXJ5U3RyaW5nKHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldEF1dGhVcmwoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgX2lzc3VlQWNjZXNzVG9rZW5Qcm94eTtcbiAgICAgICAgICAgICAgICBBdXRoLmlzc3VlQWNjZXNzVG9rZW4gPSBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3MgPSBfay5wcm9jZXNzUnVsZXMoc2V0dGluZ3MsIHJ1bGVzLmlzc3VlQWNjZXNzVG9rZW4sICdBdXRoLmlzc3VlQWNjZXNzVG9rZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXNzdWVBY2Nlc3NUb2tlblByb3h5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaXNzdWVBY2Nlc3NUb2tlblByb3h5ID0gZ2V0UHJveHkoe30sIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUF1dGhSZXNwb25zZShyZXNwb25zZSwgc2V0dGluZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX2lzc3VlQWNjZXNzVG9rZW5Qcm94eS5nZXRBY2Nlc3NUb2tlbihzZXR0aW5ncy5jb2RlLCBfay5SVU5USU1FLmFwcEtleSwgc2V0dGluZ3MucmVkaXJlY3RVcmkpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB2YXIgX2xvZ2luUHJveHlXaXRoVGFsaztcblxuICAgICAgICAgICAgICAgIHZhciBfbG9naW5XaW5kb3c7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gX2Nsb3NlUG9wdXAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfbG9naW5XaW5kb3cgJiYgX2xvZ2luV2luZG93LmNsb3NlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfbG9naW5XaW5kb3cuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIEF1dGguZ2V0TG9naW5VcmwgPSBmdW5jdGlvbiAoc2V0dGluZ3MsIHN0YXRlVG9rZW4sIHJlZGlyZWN0VXJpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldEF1dGhVcmwoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0gXy5leHRlbmQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0X3VyaTogJ0pTLVNESycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VfdHlwZTogJ2NvZGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiBzdGF0ZVRva2VuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGthOiBfay5LQUtBT19BR0VOVCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW46IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGdldENvbW1vbkF1dGhQYXJhbXMoc2V0dGluZ3MpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlZGlyZWN0VXJpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zLnJlZGlyZWN0X3VyaSA9IHJlZGlyZWN0VXJpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2suVVJMLmF1dGhvcml6ZSArICc/JyArIF8uYnVpbGRRdWVyeVN0cmluZyhwYXJhbXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRBdXRoVXJsKCk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHZhciBwcmV2Q29kZTtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBfbG9naW5UaHJvdWdoVGFsayhzZXR0aW5ncywgc3RhdGVUb2tlbiwgdGFsa0xvZ2luVXJsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX2xvZ2luUHJveHlXaXRoVGFsaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2xvZ2luUHJveHlXaXRoVGFsayA9IGdldFByb3h5KHt9LCBmdW5jdGlvbiAocmVzcG9uc2UpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT0gJ2Vycm9yJyAmJiAocmVzcG9uc2UuZXJyb3JfY29kZSA9PSAnNTAwJyB8fCByZXNwb25zZS5lcnJvcl9jb2RlID09ICc2MDAnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcG9sbGVyLnN0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IHJlc3BvbnNlLmVycm9yX2Rlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JfZGVzY3JpcHRpb246IHJlc3BvbnNlLmVycm9yX2Rlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JfY29kZTogcmVzcG9uc2UuZXJyb3JfY29kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUF1dGhSZXNwb25zZShlcnJvciwgc2V0dGluZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PSAnb2snKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcG9sbGVyLnN0b3AoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZDb2RlID09PSByZXNwb25zZS5jb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2Q29kZSA9IHJlc3BvbnNlLmNvZGU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sb2dpblByb3h5V2l0aFRhbGsuZ2V0QWNjZXNzVG9rZW4ocmVzcG9uc2UuY29kZSwgX2suUlVOVElNRS5hcHBLZXksIF9rLlVBLm9zLmlvcyAmJiAhdGFsa0xvZ2luVXJsID8gX2suVVJMLnJlZGlyZWN0VXJpIDogX2suVVJMLnRhbGtMb2dpblJlZGlyZWN0VXJpLCBzZXR0aW5ncy5hcHByb3ZhbFR5cGUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2xvc2VQb3B1cCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9sb2dpbldpbmRvdy5sb2NhdGlvbi5ocmVmID09ICdhYm91dDpibGFuaycgJiYgX2suVUEub3MuaW9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Nsb3NlUG9wdXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUF1dGhSZXNwb25zZShyZXNwb25zZSwgc2V0dGluZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhbnVwcy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbG9naW5Qcm94eVdpdGhUYWxrLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbG9naW5Qcm94eVdpdGhUYWxrID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhbGtMb2dpblVybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzZXR0aW5ncy5yZWRpcmVjdFVyaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9rLndpbmRvd09wZW4odGFsa0xvZ2luVXJsLCBMT0dJTl9QT1BVUF9OQU1FLCBfZ2V0UG9wdXBGZWF0dXJlcygpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24uaHJlZiA9IHRhbGtMb2dpblVybDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmYWxsYmFja1VSTDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2V0dGluZ3MucmVkaXJlY3RVcmkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWxsYmFja1VSTCA9IF9sb2dpblRocm91Z2hXZWIoc2V0dGluZ3MsIHN0YXRlVG9rZW4sIF9rLlVBLm9zLmlvcyA/IF9rLlVSTC5yZWRpcmVjdFVyaSA6IF9rLlVSTC50YWxrTG9naW5SZWRpcmVjdFVyaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbGxiYWNrVVJMID0gX3JlZGlyZWN0TG9naW5UaHJvdWdoV2ViKHNldHRpbmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF1dGhQYXJhbXMgPSBfLmV4dGVuZChnZXRDb21tb25BdXRoUGFyYW1zKHNldHRpbmdzKSwgZ2V0RXh0cmFQYXJhbXMoc2V0dGluZ3MpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2xvZ2luV2luZG93ID0gX2xvZ2luV2l0aFRhbGsubG9naW4oc3RhdGVUb2tlbiwgZmFsbGJhY2tVUkwsIGF1dGhQYXJhbXMsIHNldHRpbmdzLnJlZGlyZWN0VXJpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfcG9sbGVyLnN0YXJ0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZVRva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2xvZ2luUHJveHlXaXRoVGFsay5nZXRDb2RlKHN0YXRlVG9rZW4sIF9rLlJVTlRJTUUuYXBwS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlQXV0aFJlc3BvbnNlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogJ3RpbWVvdXQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnQWNjb3VudCBsb2dpbiB0aW1lZCBvdXQuIFBsZWFzZSBsb2cgaW4gYWdhaW4uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcl9kZXNjcmlwdGlvbjogJ0FjY291bnQgbG9naW4gdGltZWQgb3V0LiBQbGVhc2UgbG9nIGluIGFnYWluLidcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHNldHRpbmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2V0dGluZ3MucmVkaXJlY3RVcmkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfay53aW5kb3dPcGVuKGZhbGxiYWNrVVJMLCBMT0dJTl9QT1BVUF9OQU1FLCBfZ2V0UG9wdXBGZWF0dXJlcygpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24uaHJlZiA9IGZhbGxiYWNrVVJMO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBfcmVkaXJlY3RMb2dpblRocm91Z2hXZWIoc2V0dGluZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0QXV0aFVybCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSBfLmV4dGVuZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RfdXJpOiBzZXR0aW5ncy5yZWRpcmVjdFVyaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZV90eXBlOiAnY29kZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2E6IF9rLktBS0FPX0FHRU5ULFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbjogd2luZG93LmxvY2F0aW9uLm9yaWdpblxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZ2V0Q29tbW9uQXV0aFBhcmFtcyhzZXR0aW5ncyksIGdldEV4dHJhUGFyYW1zKHNldHRpbmdzKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfay5VUkwuYXV0aG9yaXplICsgJz8nICsgXy5idWlsZFF1ZXJ5U3RyaW5nKHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldEF1dGhVcmwoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgX2xvZ2luUHJveHk7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gX2xvZ2luVGhyb3VnaFdlYihzZXR0aW5ncywgc3RhdGVUb2tlbiwgYW5kcm9pZFRhbGtXZWJWaWV3TG9naW5VcmwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfbG9naW5Qcm94eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2xvZ2luUHJveHkgPSBnZXRQcm94eSh7fSwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3BvbGxlci5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNhdmVkU2V0dGluZ3MgPSBnZXRTYXZlZFNldHRpbmdzV2l0aFJlc3BvbnNlU3RhdGUocmVzcG9uc2UsIF9sb2dpblNldHRpbmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVBdXRoUmVzcG9uc2UocmVzcG9uc2UsIHNhdmVkU2V0dGluZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFudXBzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sb2dpblByb3h5LmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbG9naW5Qcm94eSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfbG9naW5TZXR0aW5nc1tzdGF0ZVRva2VuXSA9IHNldHRpbmdzO1xuXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldEF1dGhVcmwoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVkaXJlY3RfdXJpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzZXR0aW5ncy5yZWRpcmVjdFVyaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0X3VyaSA9IGFuZHJvaWRUYWxrV2ViVmlld0xvZ2luVXJsID8gYW5kcm9pZFRhbGtXZWJWaWV3TG9naW5VcmwgOiAna2FrYW9qcyc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0X3VyaSA9IHNldHRpbmdzLnJlZGlyZWN0VXJpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0gXy5leHRlbmQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0X3VyaTogcmVkaXJlY3RfdXJpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlX3R5cGU6ICdjb2RlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZTogc3RhdGVUb2tlbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm94eTogJ2Vhc3lYRE1fS2FrYW9fJyArIF9sb2dpblByb3h5LmNoYW5uZWwgKyAnX3Byb3ZpZGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrYTogX2suS0FLQU9fQUdFTlQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luOiB3aW5kb3cubG9jYXRpb24ub3JpZ2luXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBnZXRDb21tb25BdXRoUGFyYW1zKHNldHRpbmdzKSwgZ2V0RXh0cmFQYXJhbXMoc2V0dGluZ3MpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9rLlVSTC5hdXRob3JpemUgKyAnPycgKyBfLmJ1aWxkUXVlcnlTdHJpbmcocGFyYW1zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0QXV0aFVybCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIF93ZWJMb2dpbkFkZEV2ZW50KHNldHRpbmdzLCBzdGF0ZVRva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uYWRkRXZlbnQod2luZG93LCAnbWVzc2FnZScsIGxvZ2luTWVzc2FnZUhhbmRsZXIpO1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBsb2dpbk1lc3NhZ2VIYW5kbGVyKGV2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoL1xcLmtha2FvXFwuY29tJC8udGVzdChldi5vcmlnaW4pICYmIGV2LmRhdGEgJiYgdHlwZW9mIGV2LmRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFyciA9IGV2LmRhdGEuc3BsaXQoJyAnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJyWzFdID09PSAncG9zdFJlc3BvbnNlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzcG9uc2UgPSBKU09OLnBhcnNlKGRlY29kZVVSSUNvbXBvbmVudChhcnJbMl0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlQXV0aFJlc3BvbnNlKHJlc3BvbnNlLCBzZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ucmVtb3ZlRXZlbnQod2luZG93LCAnbWVzc2FnZScsIGxvZ2luTWVzc2FnZUhhbmRsZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYW51cHMucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5yZW1vdmVFdmVudCh3aW5kb3csICdtZXNzYWdlJywgbG9naW5NZXNzYWdlSGFuZGxlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBfc3RvcnlDaGFubmVsUHJveHk7XG4gICAgICAgICAgICAgICAgdmFyIF9zZWxlY3RTdG9yeUNoYW5uZWxTZXR0aW5ncyA9IHt9O1xuICAgICAgICAgICAgICAgIEF1dGguc2VsZWN0U3RvcnlDaGFubmVsID0gZnVuY3Rpb24gKHNldHRpbmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzID0gX2sucHJvY2Vzc1J1bGVzKHNldHRpbmdzLCBydWxlcy5zZWxlY3RTdG9yeUNoYW5uZWwsICdBdXRoLnNlbGVjdFN0b3J5Q2hhbm5lbCcpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghX3N0b3J5Q2hhbm5lbFByb3h5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3RvcnlDaGFubmVsUHJveHkgPSBnZXRQcm94eSh7fSwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNhdmVkU2V0dGluZ3MgPSBnZXRTYXZlZFNldHRpbmdzV2l0aFJlc3BvbnNlU3RhdGUocmVzcG9uc2UsIF9zZWxlY3RTdG9yeUNoYW5uZWxTZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVuQ2FsbGJhY2socmVzcG9uc2UsIHNhdmVkU2V0dGluZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFudXBzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zdG9yeUNoYW5uZWxQcm94eS5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3N0b3J5Q2hhbm5lbFByb3h5ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlVG9rZW4gPSBfLmdldFJhbmRvbVN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBfc2VsZWN0U3RvcnlDaGFubmVsU2V0dGluZ3Nbc3RhdGVUb2tlbl0gPSBzZXR0aW5ncztcbiAgICAgICAgICAgICAgICAgICAgd2luZG93Lm9wZW4oZ2V0U2VsZWN0U3RvcnlDaGFubmVsVXJpKCksIENIQU5ORUxfUE9QVVBfTkFNRSwgX2dldFBvcHVwRmVhdHVyZXMoKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0U2VsZWN0U3RvcnlDaGFubmVsVXJpKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IF8uZXh0ZW5kKHtcbiAgï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             eTogJ2Vhc3lYRE1fS2FrYW9fJyArIF9zdG9yeUNoYW5uZWxQcm94eS5jaGFubmVsICsgJ19wcm92aWRlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW46IHNldHRpbmdzLmV4dGVuZGVkVG9rZW4gfHwgJydcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGdldENvbW1vbkF1dGhQYXJhbXMoc2V0dGluZ3MpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9rLlVSTC5zdG9yeUNoYW5uZWwgKyAnPycgKyBfLmJ1aWxkUXVlcnlTdHJpbmcocGFyYW1zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdENhbGxiYWNrcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogXy5lbXB0eUZ1bmMsXG4gICAgICAgICAgICAgICAgICAgIGZhaWw6IF8uZW1wdHlGdW5jLFxuICAgICAgICAgICAgICAgICAgICBhbHdheXM6IF8uZW1wdHlGdW5jXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHZhciBsb2dpbkRlZmF1bHRTZXR0aW5ncyA9IF8uZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3VnaFRhbGs6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHBlcnNpc3RBY2Nlc3NUb2tlbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcGVyc2lzdFJlZnJlc2hUb2tlbjogZmFsc2VcbiAgICAgICAgICAgICAgICB9LCBkZWZhdWx0Q2FsbGJhY2tzKTtcblxuICAgICAgICAgICAgICAgIHZhciBsb2dpbkNvbW1vblNldHRpbmdzID0ge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBfLmlzRnVuY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgIGZhaWw6IF8uaXNGdW5jdGlvbixcbiAgICAgICAgICAgICAgICAgICAgYWx3YXlzOiBfLmlzRnVuY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgIHBlcnNpc3RBY2Nlc3NUb2tlbjogXy5pc0Jvb2xlYW4sXG4gICAgICAgICAgICAgICAgICAgIHBlcnNpc3RSZWZyZXNoVG9rZW46IF8uaXNCb29sZWFuLFxuICAgICAgICAgICAgICAgICAgICBhcHByb3ZhbFR5cGU6IF8uaXNPbmVPZihbJ3Byb2plY3QnXSksXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlOiBfLmlzU3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICB0aHJvdWdoVGFsazogXy5pc0Jvb2xlYW4sXG4gICAgICAgICAgICAgICAgICAgIHBsdXNGcmllbmRQdWJsaWNJZDogXy5pc1N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgY2hhbm5lbFB1YmxpY0lkOiBfLmlzU3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlVGVybXM6IF8uaXNTdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0VXJpOiBfLmlzU3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZTogXy5pc1N0cmluZ1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB2YXIgcnVsZXMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUxvZ2luQnV0dG9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDogeyBjb250YWluZXI6IF8ucGFzc2VzT25lT2YoW18uaXNFbGVtZW50LCBfLmlzU3RyaW5nXSkgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsOiBfLmV4dGVuZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFuZzogXy5pc09uZU9mKFsnZW4nLCAna3InXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogXy5pc09uZU9mKFsnc21hbGwnLCAnbWVkaXVtJywgJ2xhcmdlJ10pXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBsb2dpbkNvbW1vblNldHRpbmdzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRzOiBfLmV4dGVuZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFuZzogJ2tyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnbWVkaXVtJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgbG9naW5EZWZhdWx0U2V0dGluZ3MpXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGxvZ2luOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbDogbG9naW5Db21tb25TZXR0aW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRzOiBsb2dpbkRlZmF1bHRTZXR0aW5nc1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBhdXRob3JpemU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RVcmk6IF8uaXNTdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcHJvdmFsVHlwZTogXy5pc09uZU9mKFsncHJvamVjdCddKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZTogXy5pc1N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdWdoVGFsazogXy5pc0Jvb2xlYW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx1c0ZyaWVuZFB1YmxpY0lkOiBfLmlzU3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5uZWxQdWJsaWNJZDogXy5pc1N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlVGVybXM6IF8uaXNTdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNQb3B1cDogXy5pc0Jvb2xlYW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6IF8uaXNTdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0xvZ2luOiBfLmlzQm9vbGVhblxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3VnaFRhbGs6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNQb3B1cDogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgYXV0b0xvZ2luOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IF8uaXNGdW5jdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsOiBfLmlzRnVuY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx3YXlzOiBfLmlzRnVuY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0czogZGVmYXVsdENhbGxiYWNrc1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBpc3N1ZUFjY2Vzc1Rva2VuOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IF8uaXNTdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RVcmk6IF8uaXNTdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IF8uaXNGdW5jdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsOiBfLmlzRnVuY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx3YXlzOiBfLmlzRnVuY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0czogZGVmYXVsdENhbGxiYWNrc1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RTdG9yeUNoYW5uZWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5kZWRUb2tlbjogXy5pc1N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBfLmlzRnVuY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFpbDogXy5pc0Z1bmN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsd2F5czogXy5pc0Z1bmN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdHM6IGRlZmF1bHRDYWxsYmFja3NcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRQcm94eShjb25maWcsIHJlc3BvbnNlSGFuZGxlcikge1xuICAgICAgICAgICAgICAgICAgICBfLmV4dGVuZChjb25maWcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW90ZTogX2suVVJMLmxvZ2luV2lkZ2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhbm5lbDogXy5nZXRSYW5kb21TdHJpbmcoKVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2suZ3VhcmRDcmVhdGVFYXN5WERNKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm94eSA9IG5ldyBfZWFzeVhETS5ScGMoY29uZmlnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zdFJlc3BvbnNlOiByZXNwb25zZUhhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldEtha2FvQWdlbnQ6IGZ1bmN0aW9uIGdldEtha2FvQWdlbnQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2suS0FLQU9fQUdFTlQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW90ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRDb2RlOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0QWNjZXNzVG9rZW46IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRDbGllbnQ6IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRTdGF0ZVRva2VuOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlQXV0aENvb2tpZToge31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcHJveHkuY2hhbm5lbCA9IGNvbmZpZy5jaGFubmVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb3h5O1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRTYXZlZFNldHRpbmdzV2l0aFJlc3BvbnNlU3RhdGUocmVzcG9uc2UsIHNldHRpbmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghXy5oYXMoc2V0dGluZ3MsIHJlc3BvbnNlLnN0YXRlVG9rZW4pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgX2suS2FrYW9FcnJvcignc2VjdXJpdHkgZXJyb3I6ICNDU1QyJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgc2F2ZWRTZXR0aW5ncyA9IHNldHRpbmdzW3Jlc3BvbnNlLnN0YXRlVG9rZW5dO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgc2V0dGluZ3NbcmVzcG9uc2Uuc3RhdGVUb2tlbl07XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZXNwb25zZS5zdGF0ZVRva2VuO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzYXZlZFNldHRpbmdzO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZUF1dGhSZXNwb25zZShyZXNwb25zZSwgYXV0aFNldHRpbmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXV0aEVycm9ySGFuZGxlcihyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBBdXRoLnNldEFjY2Vzc1Rva2VuKHJlc3BvbnNlLmFjY2Vzc190b2tlbiwgYXV0aFNldHRpbmdzLnBlcnNpc3RBY2Nlc3NUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBfZXZlbnRPYnNlcnZlci5kaXNwYXRjaCgnTE9HSU4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBydW5DYWxsYmFjayhyZXNwb25zZSwgYXV0aFNldHRpbmdzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBhdXRoRXJyb3JIYW5kbGVyKGVycm9yT2JqKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBVU0VSX0RJU0FHUkVFX0FQUFJPVkFMID0gJ2FjY2Vzc19kZW5pZWQnO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3JPYmouZXJyb3IgPT0gVVNFUl9ESVNBR1JFRV9BUFBST1ZBTCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgQXV0aC5zZXRBY2Nlc3NUb2tlbihudWxsKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBydW5DYWxsYmFjayhyZXNwb25zZSwgc2V0dGluZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgX2subG9nRGVidWcocmVzcG9uc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3MuZmFpbChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5hbHdheXMocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3Muc3VjY2VzcyhyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5hbHdheXMocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Q29tbW9uQXV0aFBhcmFtcyhzZXR0aW5ncykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50X2lkOiBfay5SVU5USU1FLmFwcEtleVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXR0aW5ncy5hcHByb3ZhbFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy5hcHByb3ZhbF90eXBlID0gc2V0dGluZ3MuYXBwcm92YWxUeXBlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLnNjb3BlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMuc2NvcGUgPSBzZXR0aW5ncy5zY29wZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXR0aW5ncy5zdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zLnN0YXRlID0gc2V0dGluZ3Muc3RhdGU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyYW1zO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldEV4dHJhUGFyYW1zKHNldHRpbmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLnBsdXNGcmllbmRQdWJsaWNJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXNbJ2V4dHJhLnBsdXNfZnJpZW5kX3B1YmxpY19pZCddID0gc2V0dGluZ3MucGx1c0ZyaWVuZFB1YmxpY0lkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXR0aW5ncy5jaGFubmVsUHVibGljSWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zWydjaGFubmVsX3B1YmxpY19pZCddID0gc2V0dGluZ3MuY2hhbm5lbFB1YmxpY0lkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXR0aW5ncy5zZXJ2aWNlVGVybXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zWydleHRyYS5zZXJ2aWNlX3Rlcm1zJ10gPSBzZXR0aW5ncy5zZXJ2aWNlVGVybXM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLmF1dG9Mb2dpbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXNbJ2F1dG9fbG9naW4nXSA9IHNldHRpbmdzLmF1dG9Mb2dpbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyYW1zO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIEF1dGgubG9nb3V0ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgXy5lbXB0eUZ1bmM7XG4gICAgICAgICAgICAgICAgICAgIF9rLnZhbGlkYXRlKGNhbGxiYWNrLCBfLmlzRnVuY3Rpb24sICdBdXRoLmxvZ291dCcpO1xuXG4gICAgICAgICAgICAgICAgICAgIEtha2FvLkFQSS5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJy92MS91c2VyL2xvZ291dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBhbHdheXM6IGZ1bmN0aW9uIGFsd2F5cygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBdXRoLnNldEFjY2Vzc1Rva2VuKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9ldmVudE9ic2VydmVyLmRpc3BhdGNoKCdMT0dPVVQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIEF1dGgubG9naW5Gb3JtID0gZnVuY3Rpb24gKHNldHRpbmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzID0gX2sucHJvY2Vzc1J1bGVzKHNldHRpbmdzLCBydWxlcy5sb2dpbiwgJ0F1dGgubG9naW5Gb3JtJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZVRva2VuID0gXy5nZXRSYW5kb21TdHJpbmcoKSArIF8uZ2V0UmFuZG9tU3RyaW5nKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZXR0aW5ncy5yZWRpcmVjdFVyaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IF9rLlVSTC5sb2dpbkZvcm0gKyAnP2NvbnRpbnVlPScgKyBlbmNvZGVVUklDb21wb25lbnQoX2xvZ2luVGhyb3VnaFdlYihzZXR0aW5ncywgc3RhdGVUb2tlbikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2sud2luZG93T3Blbih1cmwsIExPR0lOX1BPUFVQX05BTUUsIF9nZXRQb3B1cEZlYXR1cmVzKCkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IF9rLlVSTC5sb2dpbkZvcm0gKyAnP2NvbnRpbnVlPScgKyBlbmNvZGVVUklDb21wb25lbnQoX3JlZGlyZWN0TG9naW5UaHJvdWdoV2ViKHNldHRpbmdzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5ocmVmID0gdXJsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuXG4gICAgICAgICAgICAgICAgQXV0aC5zZXRBY2Nlc3NUb2tlbiA9IGZ1bmN0aW9uICh0b2tlbiwgcGVyc2lzdCkge1xuICAgICAgICAgICAgICAgICAgICBfay5SVU5USU1FLmFjY2Vzc1Rva2VuID0gdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbiA9PT0gbnVsbCB8fCBwZXJzaXN0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlSXRlbShnZXRBY2Nlc3NUb2tlbktleSgpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JlSXRlbShnZXRBY2Nlc3NUb2tlbktleSgpLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuXG5cbiAgICAgICAgICAgICAgICBBdXRoLnNldFJlZnJlc2hUb2tlbiA9IGZ1bmN0aW9uICh0b2tlbikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndW5zdXBwb3J0ZWQgb3BlcmF0aW9uOiBzZXRSZWZyZXNoVG9rZW4oKScpO1xuICAgICAgICAgICAgICAgIH07XG5cblxuICAgICAgICAgICAgICAgIEF1dGguZ2V0QWNjZXNzVG9rZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX2suUlVOVElNRS5hY2Nlc3NUb2tlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2suUlVOVElNRS5hY2Nlc3NUb2tlbiA9IHJldHJpZXZlSXRlbShnZXRBY2Nlc3NUb2tlbktleSgpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfay5SVU5USU1FLmFjY2Vzc1Rva2VuO1xuICAgICAgICAgICAgICAgIH07XG5cblxuICAgICAgICAgICAgICAgIEF1dGguZ2V0UmVmcmVzaFRva2VuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndW5zdXBwb3J0ZWQgb3BlcmF0aW9uOiBnZXRSZWZyZXNoVG9rZW4oKScpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHN0b3JlSXRlbShrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpdGVtID0gZW5jcnlwdCh2YWx1ZSwgX2suUlVOVElNRS5hcHBLZXkpO1xuICAgICAgICAgICAgICAgICAgICBfLmxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgaXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gcmV0cmlldmVJdGVtKGtleSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IF8ubG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlY3J5cHQoaXRlbSwgX2suUlVOVElNRS5hcHBLZXkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiByZW1vdmVJdGVtKGtleSkge1xuICAgICAgICAgICAgICAgICAgICBfLmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHRva2VuU3RvcmFnZUtleXMgPSB7fTtcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldEFjY2Vzc1Rva2VuS2V5KCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRva2VuU3RvcmFnZUtleXMuYWNjZXNzVG9rZW5LZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuU3RvcmFnZUtleXMuYWNjZXNzVG9rZW5LZXkgPSAna2FrYW9fJyArIGhhc2goJ2thdCcgKyBfay5SVU5USU1FLmFwcEtleSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9rZW5TdG9yYWdlS2V5cy5hY2Nlc3NUb2tlbktleTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBoYXNoKG1zZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGFzaGVkID0gX2NyeXB0by5NRDUobXNnKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhhc2hlZC50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGVuY3J5cHQobXNnLCBwYXNzcGhyYXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbmNyeXB0ZWQgï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             aW5rKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWRhdGlvbl90YWxrLmxlbmd0aCA+IDEwMDAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgX2suS2FrYW9FcnJvcignRmFpbGVkIHRvIHNlbmQgbWVzc2FnZSBiZWNhdXNlIGl0IGV4Y2VlZHMgdGhlIG1lc3NhZ2Ugc2l6ZSBsaW1pdC4gUGxlYXNlIGNvbnRhY3QgdGhlIGFwcCBhZG1pbmlzdHJhdG9yLicpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKFVBLnBsYXRmb3JtID09ICdtb2JpbGUnIHx8IGlzSXBhZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZExpbmsodXJsLCBzZXR0aW5ncy5mYWlsLCBzZXR0aW5ncy5pbnN0YWxsVGFsayk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZV9tc2c6IHJlcy50ZW1wbGF0ZV9tc2cgfHwge30sXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5nX21zZzogcmVzLndhcm5pbmdfbXNnIHx8IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRfbXNnOiByZXMuYXJndW1lbnRfbXNnIHx8IHt9XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3Muc3VjY2VzcyhyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBMaW5rLnNlbmRDdXN0b20gPSBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNldHRpbmdzID0gX2sucHJvY2Vzc1J1bGVzKHNldHRpbmdzLCBydWxlcy5jdXN0b20sICdMaW5rLnNlbmRDdXN0b21UZW1wbGF0ZScpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29tbW9uQ2xpY2tFdmVudCh2YWxpZGF0ZVJlcXVlc3QsIHNldHRpbmdzLCBsaW5rVHlwZS5jdXN0b20pO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBMaW5rLnNlbmRTY3JhcCA9IGZ1bmN0aW9uIChzZXR0aW5ncykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2V0dGluZ3MgPSBfay5wcm9jZXNzUnVsZXMoc2V0dGluZ3MsIHJ1bGVzLnNjcmFwLCAnTGluay5zZW5kU2NyYXAnKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1vbkNsaWNrRXZlbnQoc2NyYXBSZXF1ZXN0LCBzZXR0aW5ncywgbGlua1R5cGUuc2NyYXApO1xuICAgICAgICAgICAgICAgIH07XG5cblxuICAgICAgICAgICAgICAgIExpbmsuc2VuZERlZmF1bHQgPSBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZXR0aW5ncy5vYmplY3RUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgX2suS2FrYW9FcnJvcignb2JqZWN0VHlwZSBpcyByZXF1aXJlZCBmb3IgS2FrYW9UYWxrIExpbmsnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgc2V0dGluZ3MgPSBfay5wcm9jZXNzUnVsZXMoc2V0dGluZ3MsIHJ1bGVzW3NldHRpbmdzLm9iamVjdFR5cGVdLCAnTGluay5zZW5kRGVmYXVsdCcpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29tbW9uQ2xpY2tFdmVudChkZWZhdWx0UmVxdWVzdCwgc2V0dGluZ3MsIGxpbmtUeXBlLmRlZmF1bHRUeXBlKTtcbiAgICAgICAgICAgICAgICB9O1xuXG5cbiAgICAgICAgICAgICAgICBMaW5rLnVwbG9hZEltYWdlID0gZnVuY3Rpb24gKHNldHRpbmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzID0gX2sucHJvY2Vzc1J1bGVzKHNldHRpbmdzLCBydWxlcy51cGxvYWRJbWFnZSwgJ0xpbmsudXBsb2FkSW1hZ2UnKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVwbG9hZEltYWdlUmVxdWVzdChzZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHVwbG9hZEltYWdlUmVxdWVzdChzZXR0aW5ncykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2FwaS5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJy92Mi9hcGkvdGFsay9tZXNzYWdlL2ltYWdlL3VwbG9hZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZTogc2V0dGluZ3MuZmlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBMaW5rLmRlbGV0ZUltYWdlID0gZnVuY3Rpb24gKHNldHRpbmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzID0gX2sucHJvY2Vzc1J1bGVzKHNldHRpbmdzLCBydWxlcy5kZWxldGVJbWFnZSwgJ0xpbmsuZGVsZXRlSW1hZ2UnKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlbGV0ZUltYWdlUmVxdWVzdChzZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRlbGV0ZUltYWdlUmVxdWVzdChzZXR0aW5ncykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2FwaS5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJy92Mi9hcGkvdGFsay9tZXNzYWdlL2ltYWdlL2RlbGV0ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VfdXJsOiBzZXR0aW5ncy5pbWFnZVVybFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBMaW5rLnNjcmFwSW1hZ2UgPSBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3MgPSBfay5wcm9jZXNzUnVsZXMoc2V0dGluZ3MsIHJ1bGVzLnNjcmFwSW1hZ2UsICdMaW5rLnNjcmFwSW1hZ2UnKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjcmFwSW1hZ2VSZXF1ZXN0KHNldHRpbmdzKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc2NyYXBJbWFnZVJlcXVlc3Qoc2V0dGluZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9hcGkucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICcvdjIvYXBpL3RhbGsvbWVzc2FnZS9pbWFnZS9zY3JhcCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VfdXJsOiBzZXR0aW5ncy5pbWFnZVVybFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgdHlwZXMgPSBbJ2ZlZWQnLCAnbGlzdCcsICdsb2NhdGlvbicsICdjb21tZXJjZScsICd0ZXh0J107XG4gICAgICAgICAgICAgICAgdmFyIHJ1bGVzID0ge1xuICAgICAgICAgICAgICAgICAgICB0YWxrTGluazoge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXy5wYXNzZXNPbmVPZihbXy5pc1N0cmluZywgXy5pc09iamVjdF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlOiBfLmlzT2JqZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlYkltYWdlOiBfLmlzT2JqZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlYkJ1dHRvbjogXy5pc09iamVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWJMaW5rOiBfLmlzT2JqZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcEJ1dHRvbjogXy5pc09iamVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBMaW5rOiBfLmlzT2JqZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvcml6b250YWxCdXR0b246IF8uaXNBcnJheSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsOiBfLmlzRnVuY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFsbFRhbGs6IF8uaXNCb29sZWFuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcndhcmRhYmxlOiBfLmlzQm9vbGVhbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYXM6IF8uaXNPYmplY3RcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmU6IGZ1bmN0aW9uIGJlZm9yZShzZXR0aW5ncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfLmlzU3RyaW5nKHNldHRpbmdzLmxhYmVsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5sYWJlbCA9IHsgdGV4dDogc2V0dGluZ3MubGFiZWwgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YWxsVGFsazogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3J3YXJkYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFpbDogXy5lbXB0eUZ1bmNcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY3VzdG9tOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlSWQ6IF8uaXNOdW1iZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlQXJnczogXy5pc09iamVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YWxsVGFsazogXy5pc0Jvb2xlYW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFpbDogXy5pc0Z1bmN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsd2F5czogXy5pc0Z1bmN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IF8uaXNGdW5jdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYXM6IF8uaXNPYmplY3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IF8uaXNGdW5jdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJDYWxsYmFja0FyZ3M6IF8uaXNTdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3VnaFRhbGs6IF8uaXNCb29sZWFuXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZUFyZ3M6IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbGxUYWxrOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsOiBfLmVtcHR5RnVuYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHdheXM6IF8uZW1wdHlGdW5jLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IF8uZW1wdHlGdW5jLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBfLmVtcHR5RnVuYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdWdoVGFsazogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzY3JhcDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0VXJsOiBfLmlzU3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZUlkOiBfLmlzTnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlQXJnczogXy5pc09iamVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YWxsVGFsazogXy5pc0Jvb2xlYW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFpbDogXy5pc0Z1bmN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsd2F5czogXy5pc0Z1bmN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IF8uaXNGdW5jdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYXM6IF8uaXNPYmplY3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IF8uaXNGdW5jdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJDYWxsYmFja0FyZ3M6IF8uaXNTdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3VnaFRhbGs6IF8uaXNCb29sZWFuXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZUFyZ3M6IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbGxUYWxrOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsOiBfLmVtcHR5RnVuYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHdheXM6IF8uZW1wdHlGdW5jLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IF8uZW1wdHlGdW5jLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBfLmVtcHR5RnVuYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdWdoVGFsazogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBmZWVkOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdFR5cGU6IF8uaXNPbmVPZih0eXBlcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXy5pc09iamVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc29jaWFsOiBfLmlzT2JqZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvblRpdGxlOiBfLmlzU3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnM6IF8uaXNBcnJheSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YWxsVGFsazogXy5pc0Jvb2xlYW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFpbDogXy5pc0Z1bmN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsd2F5czogXy5pc0Z1bmN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IF8uaXNGdW5jdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYXM6IF8uaXNPYmplY3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IF8uaXNGdW5jdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJDYWxsYmFja0FyZ3M6IF8uaXNTdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3VnaFRhbGs6IF8uaXNCb29sZWFuXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YWxsVGFsazogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFpbDogXy5lbXB0eUZ1bmMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx3YXlzOiBfLmVtcHR5RnVuYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBfLmVtcHR5RnVuYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogXy5lbXB0eUZ1bmMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3VnaFRhbGs6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY29tbWVyY2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0VHlwZTogXy5pc09uZU9mKHR5cGVzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBfLmlzT2JqZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lcmNlOiBfLmlzT2JqZWN0XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25UaXRsZTogXy5pc1N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zOiBfLmlzQXJyYXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFsbFRhbGs6IF8uaXNCb29sZWFuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWw6IF8uaXNGdW5jdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHdheXM6IF8uaXNGdW5jdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBfLmlzRnVuY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFzOiBfLmlzT2JqZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBfLmlzRnVuY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmVyQ2FsbGJhY2tBcmdzOiBfLmlzU3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm91Z2hUYWxrOiBfLmlzQm9vbGVhblxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFsbFRhbGs6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWw6IF8uZW1wdHlGdW5jLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsd2F5czogXy5lbXB0eUZ1bmMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogXy5lbXB0eUZ1bmMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IF8uZW1wdHlGdW5jLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm91Z2hUYWxrOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGxpc3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0VHlwZTogXy5pc09uZU9mKHR5cGVzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJUaXRsZTogXy5pc1N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJMaW5rOiBfLmlzT2JqZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRzOiBfLmlzQXJyYXlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvblRpdGxlOiBfLmlzU3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnM6IF8uaXNBcnJheSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJJbWFnZVVybDogXy5pc1N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJJbWFnZVdpZHRoOiBfLmlzTnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlckltYWdlSGVpZ2h0OiBfLmlzTnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbGxUYWxrOiBfLmlzQm9vbGVhbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsOiBfLmlzRnVuY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx3YXlzOiBfLmlzRnVuY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogXy5pc0Z1bmN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhczogXy5pc09iamVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogXy5pc0Z1bmN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZlckNhbGxiYWNrQXJnczogXy5pc1N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdWdoVGFsazogXy5pc0Jvb2xlYW5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0czoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbGxUYWxrOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsOiBfLmVtcHR5RnVuYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHdheXM6IF8uZW1wdHlGdW5jLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IF8uZW1wdHlGdW5jLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBfLmVtcHR5RnVuYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdWdoVGFsazogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3RUeXBlOiBfLmlzT25lT2YodHlwZXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IF8uaXNPYmplY3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzczogXy5pc1N0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzc1RpdGxlOiBfLmlzU3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvY2lhbDogXy5pc09iamVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25UaXRsZTogXy5pc1N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zOiBfLmlzQXJyYXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFsbFRhbGs6IF8uaXNCb29sZWFuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWw6IF8uaXNGdW5jdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHdheXM6IF8uaXNGdW5jdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBfLmlzRnVuY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFzOiBfLmlzT2JqZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBfLmlzRnVuY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmVyQ2FsbGJhY2tBcmdzOiBfLmlzU3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm91Z2hUYWxrOiBfLmlzQm9vbGVhblxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFsbFRhbGs6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWw6IF8uZW1wdHlGdW5jLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsd2F5czogXy5lbXB0eUZ1bmMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogXy5lbXB0eUZ1bmMsXG4gICAgICAgICAgï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             cmVudE5vZGUucmVtb3ZlQ2hpbGQoWSk7WSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBvbkRPTVJlYWR5OiBmdW5jdGlvbiBvbkRPTVJlYWR5KCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZSA9IGFiLnJlbW90ZTtwLkZuLnNldChcImZsYXNoX1wiICsgYWIuY2hhbm5lbCArIFwiX2luaXRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWQudXAuY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7cC5Gbi5zZXQoXCJmbGFzaF9cIiArIGFiLmNoYW5uZWwgKyBcIl9vbk1lc3NhZ2VcIiwgYWcpO2FiLnN3ZiA9IEMoYWIuc3dmKTt2YXIgYWkgPSBBKGFiLnN3Zik7dmFyIGFoID0gZnVuY3Rpb24gYWgoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLnN0YWNrLkZsYXNoVHJhbnNwb3J0W2FpXS5pbml0ID0gdHJ1ZTtaID0gcC5zdGFjay5GbGFzaFRyYW5zcG9ydFthaV0uc3dmO1ouY3JlYXRlQ2hhbm5lbChhYi5jaGFubmVsLCBhYi5zZWNyZXQsIGsoYWIucmVtb3RlKSwgYWIuaXNIb3N0KTtpZiAoYWIuaXNIb3N0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgJiYgYWIuc3dmTm9UaHJvdHRsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVKGFiLnByb3BzLCB7IHBvc2l0aW9uOiBcImZpeGVkXCIsIHJpZ2h0OiAwLCB0b3A6IDAsIGhlaWdodDogXCIyMHB4XCIsIHdpZHRoOiBcIjIwcHhcIiB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9VShhYi5wcm9wcywgeyBzcmM6IFEoYWIucmVtb3RlLCB7IHhkbV9lOiBrKHEuaHJlZiksIHhkbV9jOiBhYi5jaGFubmVsLCB4ZG1fcDogNiwgeGRtX3M6IGFiLnNlY3JldCB9KSwgbmFtZTogViArIGFiLmNoYW5uZWwgKyBcIl9wcm92aWRlclwiIH0pO1kgPSBCKGFiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtpZiAocC5zdGFjay5GbGFzaFRyYW5zcG9ydFthaV0gJiYgcC5zdGFjay5GbGFzaFRyYW5zcG9ydFthaV0uaW5pdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcC5zdGFjay5GbGFzaFRyYW5zcG9ydFthaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLnN0YWNrLkZsYXNoVHJhbnNwb3J0W2FpXSA9IHsgcXVldWU6IFthaF0gfTthYShhaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuc3RhY2suRmxhc2hUcmFuc3BvcnRbYWldLnF1ZXVlLnB1c2goYWgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSChhZC5vbkRPTVJlYWR5LCBhZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSB9O1xuICAgICAgICAgICAgICAgICAgICB9O3Auc3RhY2suUG9zdE1lc3NhZ2VUcmFuc3BvcnQgPSBmdW5jdGlvbiAoYWMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhZSwgYWYsIGFhLCBhYjtmdW5jdGlvbiBaKGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFnLm9yaWdpbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gayhhZy5vcmlnaW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1pZiAoYWcudXJpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBrKGFnLnVyaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfWlmIChhZy5kb21haW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHEucHJvdG9jb2wgKyBcIi8vXCIgKyBhZy5kb21haW47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfXRocm93IFwiVW5hYmxlIHRvIHJldHJpZXZlIHRoZSBvcmlnaW4gb2YgdGhlIGV2ZW50XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9ZnVuY3Rpb24gYWQoYWgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFoLmRhdGEgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH12YXIgYWcgPSBaKGFoKTtpZiAoYWcgPT0gYWIgJiYgdHlwZW9mIGFoLmRhdGEgPT09IFwic3RyaW5nXCIgJiYgYWguZGF0YS5zdWJzdHJpbmcoMCwgYWMuY2hhbm5lbC5sZW5ndGggKyAxKSA9PSBhYy5jaGFubmVsICsgXCIgXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWUudXAuaW5jb21pbmcoYWguZGF0YS5zdWJzdHJpbmcoYWMuY2hhbm5lbC5sZW5ndGggKyAxKSwgYWcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1mdW5jdGlvbiBZKGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFnLmRhdGEgPT0gYWMuY2hhbm5lbCArIFwiLXJlYWR5XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWEgPSBcInBvc3RNZXNzYWdlXCIgaW4gYWYuY29udGVudFdpbmRvdyA/IGFmLmNvbnRlbnRXaW5kb3cgOiBhZi5jb250ZW50V2luZG93LmRvY3VtZW50O3koTywgXCJtZXNzYWdlXCIsIFkpO3coTywgXCJtZXNzYWdlXCIsIGFkKTtMKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFlLnVwLmNhbGxiYWNrKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9cmV0dXJuIGFlID0geyBvdXRnb2luZzogZnVuY3Rpb24gb3V0Z29pbmcoYWgsIGFpLCBhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYS5wb3N0TWVzc2FnZShhYy5jaGFubmVsICsgXCIgXCIgKyBhaCwgYWkgfHwgYWIpO2lmIChhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkoTywgXCJtZXNzYWdlXCIsIFkpO3koTywgXCJtZXNzYWdlXCIsIGFkKTtpZiAoYWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFhID0gbnVsbDthZi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGFmKTthZiA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBvbkRPTVJlYWR5OiBmdW5jdGlvbiBvbkRPTVJlYWR5KCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYiA9IGsoYWMucmVtb3RlKTtpZiAoYWIgPT09IFwiZmlsZTovL1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYiA9IFwiKlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9aWYgKGFjLmlzSG9zdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdyhPLCBcIm1lc3NhZ2VcIiwgWSk7VShhYy5wcm9wcywgeyBzcmM6IFEoYWMucmVtb3RlLCB7IHhkbV9lOiBrKHEuaHJlZiksIHhkbV9jOiBhYy5jaGFubmVsLCB4ZG1fcDogMSB9KSwgbmFtZTogViArIGFjLmNoYW5uZWwgKyBcIl9wcm92aWRlclwiIH0pO2FmID0gQihhYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3KE8sIFwibWVzc2FnZVwiLCBhZCk7YWEgPSBcInBvc3RNZXNzYWdlXCIgaW4gTy5wYXJlbnQgPyBPLnBhcmVudCA6IE8ucGFyZW50LmRvY3VtZW50O2FhLnBvc3RNZXNzYWdlKGFjLmNoYW5uZWwgKyBcIi1yZWFkeVwiLCBhYik7TChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWUudXAuY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEgoYWUub25ET01SZWFkeSwgYWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gfTtcbiAgICAgICAgICAgICAgICAgICAgfTtwLnN0YWNrLkZyYW1lRWxlbWVudFRyYW5zcG9ydCA9IGZ1bmN0aW9uIChaKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWEsIGFjLCBhYiwgWTtyZXR1cm4gYWEgPSB7IG91dGdvaW5nOiBmdW5jdGlvbiBvdXRnb2luZyhhZSwgYWYsIGFkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFiLmNhbGwodGhpcywgYWUpO2lmIChhZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWMucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChhYyk7YWMgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgb25ET01SZWFkeTogZnVuY3Rpb24gb25ET01SZWFkeSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWSA9IGsoWi5yZW1vdGUpO2lmIChaLmlzSG9zdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVShaLnByb3BzLCB7IHNyYzogUShaLnJlbW90ZSwgeyB4ZG1fZTogayhxLmhyZWYpLCB4ZG1fYzogWi5jaGFubmVsLCB4ZG1fcDogNSB9KSwgbmFtZTogViArIFouY2hhbm5lbCArIFwiX3Byb3ZpZGVyXCIgfSk7YWMgPSBCKFopO2FjLmZuID0gZnVuY3Rpb24gKGFkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGFjLmZuO2FiID0gYWQ7TChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFhLnVwLmNhbGxiYWNrKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDApO3JldHVybiBmdW5jdGlvbiAoYWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWEudXAuaW5jb21pbmcoYWUsIFkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQucmVmZXJyZXIgJiYgayhkLnJlZmVycmVyKSAhPSBULnhkbV9lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTy50b3AubG9jYXRpb24gPSBULnhkbV9lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWFiID0gTy5mcmFtZUVsZW1lbnQuZm4oZnVuY3Rpb24gKGFkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWEudXAuaW5jb21pbmcoYWQsIFkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7YWEudXAuY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIKGFhLm9uRE9NUmVhZHksIGFhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IH07XG4gICAgICAgICAgICAgICAgICAgIH07cC5zdGFjay5OYW1lVHJhbnNwb3J0ID0gZnVuY3Rpb24gKGFjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWQ7dmFyIGFmLCBhaiwgYWIsIGFoLCBhaSwgWiwgWTtmdW5jdGlvbiBhZyhhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbCA9IGFjLnJlbW90ZUhlbHBlciArIChhZiA/IFwiI18zXCIgOiBcIiNfMlwiKSArIGFjLmNoYW5uZWw7YWouY29udGVudFdpbmRvdy5zZW5kTWVzc2FnZShhbSwgYWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfWZ1bmN0aW9uIGFlKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKythaCA9PT0gMiB8fCAhYWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkLnVwLmNhbGxiYWNrKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWcoXCJyZWFkeVwiKTthZC51cC5jYWxsYmFjayh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9ZnVuY3Rpb24gYWsoYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZC51cC5pbmNvbWluZyhhbCwgWik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9ZnVuY3Rpb24gYWEoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWkodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1yZXR1cm4gYWQgPSB7IG91dGdvaW5nOiBmdW5jdGlvbiBvdXRnb2luZyhhbSwgYW4sIGFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFpID0gYWw7YWcoYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFqLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYWopO2FqID0gbnVsbDtpZiAoYWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFiLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYWIpO2FiID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIG9uRE9NUmVhZHk6IGZ1bmN0aW9uIG9uRE9NUmVhZHkoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmID0gYWMuaXNIb3N0O2FoID0gMDtaID0gayhhYy5yZW1vdGUpO2FjLmxvY2FsID0gQyhhYy5sb2NhbCk7aWYgKGFmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLkZuLnNldChhYy5jaGFubmVsLCBmdW5jdGlvbiAoYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWYgJiYgYW0gPT09IFwicmVhZHlcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLkZuLnNldChhYy5jaGFubmVsLCBhayk7YWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtZID0gUShhYy5yZW1vdGUsIHsgeGRtX2U6IGFjLmxvY2FsLCB4ZG1fYzogYWMuY2hhbm5lbCwgeGRtX3A6IDIgfSk7VShhYy5wcm9wcywgeyBzcmM6IFkgKyBcIiNcIiArIGFjLmNoYW5uZWwsIG5hbWU6IFYgKyBhYy5jaGFubmVsICsgXCJfcHJvdmlkZXJcIiB9KTthYiA9IEIoYWMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWMucmVtb3RlSGVscGVyID0gYWMucmVtb3RlO3AuRm4uc2V0KGFjLmNoYW5uZWwsIGFrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfXZhciBhbCA9IGZ1bmN0aW9uIGFsKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFtID0gYWogfHwgdGhpczt5KGFtLCBcImxvYWRcIiwgYWwpO3AuRm4uc2V0KGFjLmNoYW5uZWwgKyBcIl9sb2FkXCIsIGFhKTsoZnVuY3Rpb24gYW4oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhbS5jb250ZW50V2luZG93LnNlbmRNZXNzYWdlID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEwoYW4sIDUwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O2FqID0gQih7IHByb3BzOiB7IHNyYzogYWMubG9jYWwgKyBcIiNfNFwiICsgYWMuY2hhbm5lbCB9LCBvbkxvYWQ6IGFsIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEgoYWQub25ET01SZWFkeSwgYWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gfTtcbiAgICAgICAgICAgICAgICAgICAgfTtwLnN0YWNrLkhhc2hUcmFuc3BvcnQgPSBmdW5jdGlvbiAoYWEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhZDt2YXIgYWkgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW07dmFyIGFoLCBaO2Z1bmN0aW9uIGFsKGFwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfXZhciBhbyA9IGFhLnJlbW90ZSArIFwiI1wiICsgYW4rKyArIFwiX1wiICsgYXA7KGFnIHx8ICFhaCA/IGFtLmNvbnRlbnRXaW5kb3cgOiBhbSkubG9jYXRpb24gPSBhbztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1mdW5jdGlvbiBhZihhbykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFlID0gYW87YWQudXAuaW5jb21pbmcoYWUuc3Vic3RyaW5nKGFlLmluZGV4T2YoXCJfXCIpICsgMSksIFopO1xuICAgICAgICAgICAgICAgICAgICAgICAgfWZ1bmN0aW9uIGFrKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYWMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH12YXIgYW8gPSBhYy5sb2NhdGlvbi5ocmVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcSA9IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwID0gYW8uaW5kZXhPZihcIiNcIik7aWYgKGFwICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFxID0gYW8uc3Vic3RyaW5nKGFwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9aWYgKGFxICYmIGFxICE9IGFlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmKGFxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9ZnVuY3Rpb24gYWooKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWIgPSBzZXRJbnRlcnZhbChhaywgWSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9cmV0dXJuIGFkID0geyBvdXRnb2luZzogZnVuY3Rpb24gb3V0Z29pbmcoYW8sIGFwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsKGFvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPLmNsZWFySW50ZXJ2YWwoYWIpO2lmIChhZyB8fCAhYWgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFtLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9YW0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIG9uRE9NUmVhZHk6IGZ1bmN0aW9uIG9uRE9NUmVhZHkoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFnID0gYWEuaXNIb3N0O1kgPSBhYS5pbnRlcnZhbDthZSA9IFwiI1wiICsgYWEuY2hhbm5lbDthbiA9IDA7YWggPSBhYS51c2VQYXJlbnQ7WiA9IGsoYWEucmVtb3RlKTtpZiAoYWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFUoYWEucHJvcHMsIHsgc3JjOiBhYS5yZW1vdGUsIG5hbWU6IFYgKyBhYS5jaGFubmVsICsgXCJfcHJvdmlkZXJcIiB9KTtpZiAoYWgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYS5vbkxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjID0gTzthaigpO2FkLnVwLmNhbGxiYWNrKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcSA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFvID0gYWEuZGVsYXkgLyA1MDsoZnVuY3Rpb24gYXAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgrK2FxID4gYW8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byByZWZlcmVuY2UgbGlzdGVuZXJ3aW5kb3dcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH10cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWMgPSBhbS5jb250ZW50V2luZG93LmZyYW1lc1tWICsgYWEuY2hhbm5lbCArIFwiX2NvbnN1bWVyXCJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             ï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½      @      3ï¿½             aW1lb3V0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB3ZWIyYXBwVmlhSW50ZW50VVJJKGxhdW5jaFVSSSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodWEuYnJvd3Nlci5jaHJvbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQobW92ZSwgMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG1vdmUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3AubG9jYXRpb24uaHJlZiA9IGxhdW5jaFVSSTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHdlYjJhcHBWaWFDdXN0b21VcmxTY2hlbWVGb3JJT1ModXJsU2NoZW1lLCBzdG9yZVVSTCwgZmFsbGJhY2ssIHVuaXZlcnNhbExpbmspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpZCA9IGRlZmVyRmFsbGJhY2soVElNRU9VVF9JT1MsIHN0b3JlVVJMLCBmYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZUludCh1YS5vcy52ZXJzaW9uLm1ham9yLCAxMCkgPCA4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiaW5kUGFnZWhpZGVFdmVudCh0aWQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmluZFZpc2liaWxpdHlDaGFuZ2VFdmVudCh0aWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzU3VwcG9ydFVuaXZlcnNhbExpbmtzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1bml2ZXJzYWxMaW5rID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml2ZXJzYWxMaW5rID0gdXJsU2NoZW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxhdW5jaEFwcFZpYUNoYW5naW5nTG9jYXRpb24odW5pdmVyc2FsTGluayk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXVuY2hBcHBWaWFIaWRkZW5JZnJhbWUodXJsU2NoZW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGJpbmRQYWdlaGlkZUV2ZW50KHRpZCkge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncGFnZWhpZGUnLCBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1BhZ2VWaXNpYmxlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncGFnZWhpZGUnLCBjbGVhcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGJpbmRWaXNpYmlsaXR5Q2hhbmdlRXZlbnQodGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1BhZ2VWaXNpYmxlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgY2xlYXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBpc1BhZ2VWaXNpYmxlKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXR0ck5hbWVzID0gWydoaWRkZW4nLCAnd2Via2l0SGlkZGVuJ107XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhdHRyTmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnRbYXR0ck5hbWVzW2ldXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWRvY3VtZW50W2F0dHJOYW1lc1tpXV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gbGF1bmNoQXBwVmlhQ2hhbmdpbmdMb2NhdGlvbih1cmxTY2hlbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LnRvcC5sb2NhdGlvbi5yZXBsYWNlKHVybFNjaGVtZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gbGF1bmNoQXBwVmlhSGlkZGVuSWZyYW1lKHVybFNjaGVtZSkge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpZnJhbWUgPSBjcmVhdGVIaWRkZW5JZnJhbWUoJ2FwcExhdW5jaGVyJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZnJhbWUuc3JjID0gdXJsU2NoZW1lO1xuICAgICAgICAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUhpZGRlbklmcmFtZShpZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmcmFtZS5pZCA9IGlkO1xuICAgICAgICAgICAgICAgICAgICBpZnJhbWUuc3R5bGUuYm9yZGVyID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgICAgICBpZnJhbWUuc3R5bGUud2lkdGggPSAnMCc7XG4gICAgICAgICAgICAgICAgICAgIGlmcmFtZS5zdHlsZS5oZWlnaHQgPSAnMCc7XG4gICAgICAgICAgICAgICAgICAgIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgICAgICBpZnJhbWUuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWZyYW1lO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGlzU3VwcG9ydFVuaXZlcnNhbExpbmtzKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQodWEub3MudmVyc2lvbi5tYWpvciwgMTApID4gOCAmJiB1YS5vcy5pb3M7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdlYjJhcHA7XG4gICAgICAgICAgICB9KCk7XG4gICAgICAgIH0sIHsgXCIuL3VzZXJBZ2VudC5qc1wiOiAzMCB9XSB9LCB7fSwgWzIwXSkoMjApO1xufSk7IiwiY29uc3QgV2ViZm9udCA9IHJlcXVpcmUoJ3dlYmZvbnRsb2FkZXInKTtcbmNvbnN0IFZ1ZSA9IHJlcXVpcmUoJ3Z1ZScpO1xuXG5XZWJmb250LmxvYWQoe1xuICAgIGN1c3RvbToge1xuICAgICAgICBmYW1pbGllczogWydWb2x0ZScsICdTcG9xYSBIYW4gU2FucyddLFxuICAgICAgICB1cmxzOiBbJy4vd2ViZm9udC5jc3MnXVxuICAgIH1cbn0pO1xuXG5cbndpbmRvdy52dWUgPSBuZXcgVnVlKHtcbiAgICBlbDogJyNhcHAnLFxuICAgIGRhdGE6IHtcbiAgICAgICAgcGFnZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBxdWVzdGlvbjogJ+yVoOyduOydgCDsl4bripTrjbAg6rCR7J6Q6riwIOyEueyKpOqwgCDrhIjrrLQg7ZWY6rOg7Iu27J2AIOyalOymiOydjCDri7nsi6DsnYAnLFxuICAgICAgICAgICAgICAgIGFuc3dlcjE6ICfsg4jroZzsmrQg7IKs656M6rO87J2YIOyEueyKpOulvCDsnITtlbQg7KCB6re57KCB7Jy866GcIOunjOuCqOydhCDstpTsp4TtlZzri6QuJyxcbiAgICAgICAgICAgICAgICBhbnN3ZXIyOiAn7ZSE66as66+47JeEIOyEueyKpO2GoOydtOuhnCDsnpDsnITrpbwg7ZWY6rGw64KYIOuCmOunjOydmCDst6jrr7gg7Zmc64+Z7J2EIOuNlCDrp47snbQg6rCW64qU64ukLicsXG4gICAgICAgICAgICAgICAgdmFsdWUxOiAnYicsXG4gICAgICAgICAgICAgICAgdmFsdWUyOiAnYSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcXVlc3Rpb246ICfri7nsi6DsnYAg67O07Ya1IO2DgOyduOqzvCDssqsg7IS57Iqk66W8IOyLnOyeke2VmOq4sCDsoITsl5AnLFxuICAgICAgICAgICAgICAgIGFuc3dlcjE6ICfsoovslYTtlZjqsbDrgpgg7Iur7Ja07ZWY64qUIOyVoOustCDrsKnsi50sIOyytOychCDrk7Hsl5Ag64yA7ZW0IOyhsOq4iOydtOudvOuPhCDsoJXrs7Qg6rWQ66WY66W8IO2VmOuKlCDsqr3snbQg66eYIO2OuO2VmOuLpC4nLFxuICAgICAgICAgICAgICAgIGFuc3dlcjI6ICfshLnsiqTripQg7JiI7LihIOu2iOqwgOuKpe2VnCDsg4HtmansnYQg7KaQ6riw64qUIOuqqO2XmOyXkCDqsIDquZ3ri6QuIOq1s+ydtCDsnbTqsoPsoIDqsoMg66y87Ja067O07KeAIOyViuuKlCDtjrjsnbTri6QuJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTE6ICdjJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTI6ICdkJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBxdWVzdGlvbjogJ+y1nOq3vCDtlZwg7IS57Iqk6rCAIOuEiOustCDtmantmYDtlojri6Tqs6Ag66eQ7ZWY64qUIOy5nOq1rCwg64u57Iug7J2YIOuwmOydkeydgCcsXG4gICAgICAgICAgICAgICAgYW5zd2VyMTogJ+yYpCEhIOutkOqwgCDslrTrlrvqsowg7KKL7JWY64qU642wPyDtirnrs4Ttnogg7KKL7J2AIOu2gOu2hOydtCDsnojsl4jslrQ/JyxcbiAgICAgICAgICAgICAgICBhbnN3ZXIyOiAn7JmALi4u64SI64SkIOyEnOuhnCDsp4Tsp5wg7JWg7KCV7ZWY6rOgIOyCrOueke2VmOuCmOuztOuLpOKApiEnLFxuICAgICAgICAgICAgICAgIHZhbHVlMTogJ2UnLFxuICAgICAgICAgICAgICAgIHZhbHVlMjogJ2YnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHF1ZXN0aW9uOiAn7KO866eQIOyggOuFgSA57IucLCDsjbjtg4DripQg7Jew7J246rO8IO2VqOq7mCDsoIDrhYEg7Iud7IKs66W8IOuniOy5nCDri7nsi6DsnZgg66i466a/7IaN7J2AIOyngOq4iCcsXG4gICAgICAgICAgICAgICAgYW5zd2VyMTogJ+u2hOychOq4sCDsnojripQgMuywqCDsnqXshowsIOq3gOqwgCDrj5nshKAsIOynkSDssq3showg7IOB7YOcLCDtlLzsnoTrj4Tqtawg65Ox7J2EIOq8vOq8vO2VmOqyjCDsoJDqsoAg7KSR7J2064ukLicsXG4gICAgICAgICAgICAgICAgYW5zd2VyMjogJ+yDgeuMgOyZgCDtlajqu5jrnbzrqbQg7Ja065SU65OgIOyii+uLpC4g65K3IOydvOydgCDrgpjspJHsl5Ag7IOd6rCB7ZWY6rOgIOyasOyEoCDsnbQg7Iic6rCE7J2EIOunjOuBve2VnOuLpC4nLFxuICAgICAgICAgICAgICAgIHZhbHVlMTogJ2cnLFxuICAgICAgICAgICAgICAgIHZhbHVlMjogJ2gnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHF1ZXN0aW9uOiAn64u57Iug7JeQ6rKMIOyeiOyWtCDsg4jroZzsmrQg66eM64Ko7J2EIOq4sOuMgO2VmOqyjCDtlZjripQg7J6l7IaM64qUJyxcbiAgICAgICAgICAgICAgICBhbnN3ZXIxOiAnMuuwlSAz7J28IOy6oO2VkeycvOuhnCDsp4TtlonrkJjripQg7Jq47Yq46528IOuupOyngSDtjpjsiqTti7DrsownLFxuICAgICAgICAgICAgICAgIGFuc3dlcjI6ICfsl6zsnKDroa3qs6Ag7ZWc7KCB7ZWcIO2ctOyWkeyngCDqt7zsspgg7KGw7Jqp7ZWcIOy5tO2OmCcsXG4gICAgICAgICAgICAgICAgdmFsdWUxOiAnYicsXG4gICAgICAgICAgICAgICAgdmFsdWUyOiAnYSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcXVlc3Rpb246ICfqs7Xsp5wg7JiB7ZmU7ZGc66GcIOyYge2ZlOq0gOyXkCDsmKTqsowg65CcIOuLueyLoCwg64u57Iug7J20IOyYge2ZlOulvCDqs6DrpbTripQg67Cp7Iud7J2AJyxcbiAgICAgICAgICAgICAgICBhbnN3ZXIxOiAn6rSA6rCd7IiY7JmAIOq0gOuejO2bhOq4sOulvCDsiqTrp4jtirjtj7DsnLzroZwg6ry86ry87ZWY6rKMIOqygOyDie2VtCDsi6TtjKjtlZjsp4Ag7JWK7J2EIOyYge2ZlOulvCDqs6Drpbjri6QuJyxcbiAgICAgICAgICAgICAgICBhbnN3ZXIyOiAn7Jik64qY7J2YIOuCtCDqsJDsoJUg7IOB7YOc7JeQIOuUsOudvCDrp4jsnYzsl5Ag65Oc64qUIOyYge2ZlOulvCDsp4HqtIDsoIHsnLzroZwg6rOg66W464ukLicsXG4gICAgICAgICAgICAgICAgdmFsdWUxOiAnYycsXG4gICAgICAgICAgICAgICAgdmFsdWUyOiAnZCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcXVlc3Rpb246ICfshLnsiqTspJHsnbgg64u57IugLCDsg4HrjIDsnZgg7Ja065akIOuqqOyKteydhCDrs7TslZjsnYQg65WMIOuNlCDquLDrtoTsnbQg7KKL7J2A6rCA7JqUJyxcbiAgICAgICAgICAgICAgICBhbnN3ZXIxOiAn64K06rCAIOyLnOuPhCDtlZwg7JWg66y07JmAIOyghO2drOulvCDthrXtlbQg7LC47J2EIOyImCDsl4bripQg7Iug7LK07KCBIOy+jOqwkOydhCDripDrgbzripQg7IOB64yA66W8IOuzvCDrlYwnLFxuICAgICAgICAgICAgICAgIGFuc3dlcjI6ICfshJzroZwg66eI7KO8IOuztOqzoCDsnojripQg7Ja86rW07J20IOuEiOustOuCmCDslaDti4vtlZjqs6Ag7IKs656R7Iqk65+s7Jq4IOuVjCcsXG4gICAgICAgICAgICAgICAgdmFsdWUxOiAnZScsXG4gICAgICAgICAgICAgICAgdmFsdWUyOiAnZidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcXVlc3Rpb246ICfsm4Dsp4HsnbTquLDrj4Qg7Z6Y65OkIOunjO2BvCDqsqnroKztlZwg7IS57Iqk66W8IOuniOy5nCDri7nsi6AsIOuLpOydjCDtlonrj5nsnYAnLFxuICAgICAgICAgICAgICAgIGFuc3dlcjE6ICfrhIjrrLQg7Z6Y65Ok7KeA66eMIOyDpOybjOuPhCDtlZjqs6Ag7Lmo6rWs64+EIOygleumrO2VmOqzoCDsnqDsmLfrj4Qg7J6F6rOgLi4uJyxcbiAgICAgICAgICAgICAgICBhbnN3ZXIyOiAn7JS77J2EIOqzs+unjCDrjIDstqkg7JS76rOgIOqzp+uwlOuhnCDqv4jrgpjrnbzroZwg7KeB7ZaJLi4uJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTE6ICdnJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTI6ICdoJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBxdWVzdGlvbjogJ+2VnOywvSDrrLTrpbTsnbXsnYAg64+Z7Zi47ZqMIOyIoOyekOumrCwg67CY64yA7Y64IO2FjOydtOu4lOyXkCDrp4jsnYzsl5Ag65Oc64qUIOyDgeuMgOqwgCDrs7Tsnbjri6QnLFxuICAgICAgICAgICAgICAgIGFuc3dlcjE6ICfrqLzsoIAg7KO864+E7KCB7Jy866GcIOyekOumrOulvCDrsJTqv5Qg6re4IOyCrOuejOqzvCDrjIDtmZTrpbwg7Iuc7J6R7ZWc64ukLicsXG4gICAgICAgICAgICAgICAgYW5zd2VyMjogJzLssKjroZwg7J2064+Z7ZWY66m07IScIOyekOyXsOyKpOufveqyjCDsnpDrpqzqsIAg67CU64CM6riw66W8IOq4sOuLpOumsOuLpC4nLFxuICAgICAgICAgICAgICAgIHZhbHVlMTogJ2InLFxuICAgICAgICAgICAgICAgIHZhbHVlMjogJ2EnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHF1ZXN0aW9uOiAn64K06rCAIOyjvOuhnCDshLnsiqTslrTtlYTsnYQg64qQ64G864qUIOuMgOyDgeydgCcsXG4gICAgICAgICAgICAgICAgYW5zd2VyMTogJ+yZuOuqqOuCmCDrjIDtmZQsIOuwsOqyveuTseydtCDsnpgg66ee7JWEIOqwmeydtCDsnojsnLzrqbQg7Y647JWI7ZWY6rOgIOygkOygkCDtmLjqsJDsnbQg7Luk7KeIIOqygyDqsJnsnYAg7IKs656MJyxcbiAgICAgICAgICAgICAgICBhbnN3ZXIyOiAn662Q65286rOgIOy9lSDsp5HslrQg7ISk66qF7ZWgIOyInCDsl4bsp4Drp4wsIOyngOuPhe2VmOqyjCDslr3tnpAg7IiYIOyeiOydhCDqsoMg6rCZ7J2AIOy5mOuqheyggeyduCDsgqzrnownLFxuICAgICAgICAgICAgICAgIHZhbHVlMTogJ2MnLFxuICAgICAgICAgICAgICAgIHZhbHVlMjogJ2QnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHF1ZXN0aW9uOiAn7IOIIOyVoOyduOqzvOydmCDshLnsiqTqsIAg7I2pIOyii+yngCDslYrri6TripQg7Lmc6rWs7JeQ6rKMIOuLueyLoOydgCcsXG4gICAgICAgICAgICAgICAgYW5zd2VyMTogJ+yDge2ZqeydhCDrk6TslrTrs7Tqs6Ag642UIOuCmOydgCDrjIDslYjsnYQg7KCc7Iuc7ZWY6rGw64KYIOyGjeq2ge2VqeydgCDslrTsqZQg7IiYIOyXhuuLpOqzoCDrp5DtlbTspIDri6QuJyxcbiAgICAgICAgICAgICAgICBhbnN3ZXIyOiAn7KCQ7KCQIOuNlCDsoovslYTsp4gg6rGw65286rOgIOuUsOucu+2VnCDsnITroZzrpbwg6rG064So64ukLicsXG4gICAgICAgICAgICAgICAgdmFsdWUxOiAnZScsXG4gICAgICAgICAgICAgICAgdmFsdWUyOiAnZidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcXVlc3Rpb246ICfslaDsnbjqs7zsnZgg7IS57Iqk6rCAIOydtOukhOyngOuKlCDsi5zqsITrjIDripQnLFxuICAgICAgICAgICAgICAgIGFuc3dlcjE6ICfqsIDquInsoIEg7Ye06re8IOydtO2bhOuCmCDso7zrp5AsIOyXsO2ctCDrk7Eg7JiI7LihIOqwgOuKpe2VnCDsi5zqsITrjIDsl5Ag7IS57Iqk7ZWY64qUIOqyg+ydhCDshKDtmLjtlZzri6QuJyxcbiAgICAgICAgICAgICAgICBhbnN3ZXIyOiAn7ISc66GcIOunmOydtCDrp57ripTri6TrqbQg7KaJ7Z2l7KCB7J206rOgIOyYiOy4oSDrtojqsIDriqXtlZwg7Iuc6rCE64yA7JeQIOyEueyKpO2VmOuKlCDqsoPrj4Qg7KKL64ukLicsXG4gICAgICAgICAgICAgICAgdmFsdWUxOiAnZycsXG4gICAgICAgICAgICAgICAgdmFsdWUyOiAnaCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIHJlc3VsdHM6IFtdLFxuICAgICAgICBjdXJyZW50UGFnZTogMCxcbiAgICAgICAgYW5pbWF0aW9uRGVsYXk6IDMwMCxcbiAgICAgICAgY3VycmVudFBhZ2VUaW1lb3V0OiBudWxsLFxuICAgICAgICBvbnBvcHN0YXRlVGltZW91dDogbnVsbCxcbiAgICAgICAgbG9hZGluZ1RpbWVvdXQ6IG51bGwsXG4gICAgICAgIGludHJvUGFnZUhlaWdodDogMCxcbiAgICAgICAgcXVlc3Rpb25QYWdlTWF4SGVpZ2h0OiAwLFxuICAgIH0sXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgdHlwZSgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlc3VsdHMubGVuZ3RoIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHR5cGUgPSAnJztcbiAgICAgICAgICAgIHR5cGUgKz0gKHRoaXMuY291bnRSZXN1bHRzKCdhJykgPiB0aGlzLmNvdW50UmVzdWx0cygnYicpKSA/ICdhJyA6ICdiJztcbiAgICAgICAgICAgIHR5cGUgKz0gKHRoaXMuY291bnRSZXN1bHRzKCdjJykgPiB0aGlzLmNvdW50UmVzdWx0cygnZCcpKSA/ICdjJyA6ICdkJztcbiAgICAgICAgICAgIHR5cGUgKz0gKHRoaXMuY291bnRSZXN1bHRzKCdlJykgPiB0aGlzLmNvdW50UmVzdWx0cygnZicpKSA/ICdlJyA6ICdmJztcbiAgICAgICAgICAgIHR5cGUgKz0gKHRoaXMuY291bnRSZXN1bHRzKCdnJykgPiB0aGlzLmNvdW50UmVzdWx0cygnaCcpKSA/ICdnJyA6ICdoJztcbiAgICAgICAgICAgIHJldHVybiB0eXBlO1xuICAgICAgICB9LFxuICAgIH0sXG4gICAgd2F0Y2g6IHtcbiAgICAgICAgY3VycmVudFBhZ2UoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50UGFnZVRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5jdXJyZW50UGFnZVRpbWVvdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoKHRoaXMuY3VycmVudFBhZ2UgLSAxKSA+IHRoaXMucmVzdWx0cy5maWx0ZXIodiA9PiAhIXYpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAvLyDslZ7shKAg7Y6Y7J207KeA7JeQ7IScIOuLteydhCDtlZjsp4Ag7JWK6rOgIOyZlOuLpOuptFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdvTm90QW5zd2VyZWRQYWdlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcy5hbmltYXRpb25EZWxheSk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUhhc2goKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVzdWx0cygpIHtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdyZXN1bHRzJywgSlNPTi5zdHJpbmdpZnkodGhpcy5yZXN1bHRzKSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgY291bnRSZXN1bHRzKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXN1bHRzLnJlZHVjZSgoYSwgdikgPT4gKHYgPT09IHZhbHVlID8gYSArIDEgOiBhKSwgMClcbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlSGFzaCgpIHtcbiAgICAgICAgICAgIGNvbnN0IGlkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtcGFnZS1udW1iZXI9JyR7dGhpcy5jdXJyZW50UGFnZX0nXWApLmlkO1xuICAgICAgICAgICAgbG9jYXRpb24uYXNzaWduKGAjJHtpZH1gKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ29Ob3RBbnN3ZXJlZFBhZ2UoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5yZXN1bHRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSAwO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBub3RBbnN3ZXJlZFBhZ2UgPSB0aGlzLnJlc3VsdHMuZmluZEluZGV4KHYgPT4gdiA9PT0gdW5kZWZpbmVkKSArIDE7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dEFuc3dlcmVkUGFnZSA9IHRoaXMucmVzdWx0cy5sZW5ndGggKyAxO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSBNYXRoLm1heChub3RBbnN3ZXJlZFBhZ2UsIG5leHRBbnN3ZXJlZFBhZ2UpO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlSGFzaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVMb2dvQ2xhc3MoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUhlaWdodCgpO1xuICAgICAgICAgICAgfSwgdGhpcy5hbmltYXRpb25EZWxheSk7XG4gICAgICAgIH0sXG4gICAgICAgIGNoYW5nZVBhZ2UoKSB7XG4gICAgICAgICAgICBjb25zdCBoYXNoID0gKG5ldyBVUkwoZG9jdW1lbnQubG9jYXRpb24pKS5oYXNoLnN1YnN0cigxKSB8fCAnaW50cm8nO1xuXG4gICAgICAgICAgICBpZiAoaGFzaCA9PT0gJ2ludHJvJykge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMucmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdyZXN1bHRzJywgJ1tdJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgdmlkZW8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtaW50cm8tdmlkZW8nKTtcbiAgICAgICAgICAgICAgICB2aWRlby5wbGF5KCkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtaW50cm8tdmlkZW8nKS5jbGFzc0xpc3QuYWRkKCd1LWhpZGRlbicpO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtaW50cm8taW1hZ2UnKS5jbGFzc0xpc3QucmVtb3ZlKCd1LWhpZGRlbicpO1xuICAgICAgï¿½2ï¿½     ï¿½2ï¿½                     ï¿½ï¿½ï¿½              zï¿½     X3ï¿½             3ï¿½            3ï¿½             ICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZSA9IHBhcnNlSW50KGhhc2gucmVwbGFjZSgncScsICcnKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMudXBkYXRlTG9nb0NsYXNzKCk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUhlaWdodCgpO1xuXG4gICAgICAgICAgICBpZiAoaGFzaCA9PT0gJ2xvYWRpbmcnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZSA9IDEzO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmdUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24uYXNzaWduKCdyZXN1bHQvJyArIHRoaXMudHlwZSArICcuaHRtbCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdvTm90QW5zd2VyZWRQYWdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sIDMwMDAgLSB0aGlzLmFuaW1hdGlvbkRlbGF5KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCB2aWRlbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1sb2FkaW5nLXZpZGVvJyk7XG4gICAgICAgICAgICAgICAgdmlkZW8ucGxheSgpLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWxvYWRpbmctdmlkZW8nKS5jbGFzc0xpc3QuYWRkKCd1LWhpZGRlbicpO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtbG9hZGluZy1pbWFnZScpLmNsYXNzTGlzdC5yZW1vdmUoJ3UtaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmxvYWRpbmdUaW1lb3V0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXByb2dyZXNzLWJhcicpLnN0eWxlLndpZHRoID0gdGhpcy5jdXJyZW50UGFnZSAvIDEyICogMTAwICsgJyUnO1xuICAgICAgICB9LFxuICAgICAgICBlbnRlckNvbXBsZXRlKGVsKSB7XG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCdzbGlkZS1lbnRlci1jb21wbGV0ZScpXG4gICAgICAgIH0sXG4gICAgICAgIGxlYXZlQ29tcGxldGUoZWwpIHtcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ3NsaWRlLWVudGVyLWNvbXBsZXRlJylcbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlSGVpZ2h0KCkge1xuICAgICAgICAgICAgY29uc3QgaGFzaCA9IChuZXcgVVJMKGRvY3VtZW50LmxvY2F0aW9uKSkuaGFzaC5zdWJzdHIoMSkgfHwgJ2ludHJvJztcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XG4gICAgICAgICAgICBjb25zdCBzbGlkZUNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1zbGlkZS1jb250YWluZXInKTtcblxuICAgICAgICAgICAgd2luZG93Lm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyDruYTrlJTsmKTsmYAg7J2066+47KeA6rCAIOuqqOuRkCDroZzrk5zrkJwg7ZuE7JeQIOuCtOyaqSDrhpLsnbTrpbwg6rWs7ZW07JW8IOygnOuMgOuhnCDqtaztlbTsp4Tri6QuXG4gICAgICAgICAgICAgICAgY29uc3QgY29udGVudEhlaWdodCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhcHAnKS5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgICAgICAgY29uc3Qgd2luZG93SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnRIZWlnaHQgPiB3aW5kb3dIZWlnaHQgfHwgdGhpcy5jdXJyZW50UGFnZSA9PT0gMTMpIHtcbiAgICAgICAgICAgICAgICAgICAgYm9keS5jbGFzc0xpc3QucmVtb3ZlKCd2ZXJ0aWNhbC1jZW50ZXJpbmctb24td2lkZScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGJvZHkuY2xhc3NMaXN0LmFkZCgndmVydGljYWwtY2VudGVyaW5nLW9uLXdpZGUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChoYXNoID09PSAnbG9hZGluZycpIHtcbiAgICAgICAgICAgICAgICBzbGlkZUNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSAnOTB2aCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNsaWRlQ29udGFpbmVyLnN0eWxlLmhlaWdodCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZUxvZ29DbGFzcygpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRQYWdlICE9PSAxMykge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jLWxvZ28nKS5jbGFzc0xpc3QucmVtb3ZlKCdjLWxvZ28tLW1lZGl1bScpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYy1sb2dvJykuY2xhc3NMaXN0LmFkZCgnYy1sb2dvLS1tZWRpdW0nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdGVzdCgpIHtcbiAgICAgICAgICAgIHRoaXMucmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0eXBlcyA9IFtbJ2EnLCAnYiddLCBbJ2QnLCAnYyddLCBbJ2YnLCAnZSddLCBbJ2gnLCAnZyddXTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDM7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmFuZG9tID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAwMCkgJSAyO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3VsdHMucHVzaCh0eXBlc1tpXVtyYW5kb21dKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRQYWdlID0gMTM7XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBtb3VudGVkKCkge1xuICAgICAgICBpZiAoSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncmVzdWx0cycpKSkge1xuICAgICAgICAgICAgdGhpcy5yZXN1bHRzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncmVzdWx0cycpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdpbmRvdy5vbnBvcHN0YXRlID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMub25wb3BzdGF0ZVRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5vbnBvcHN0YXRlVGltZW91dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHRoaXMuY2hhbmdlUGFnZSwgdGhpcy5hbmltYXRpb25EZWxheSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudXBkYXRlTG9nb0NsYXNzKCk7XG4gICAgICAgIHRoaXMuY2hhbmdlUGFnZSgpO1xuICAgIH1cbn0pOyIsImNvbnN0IENsaXBib2FyZEpTID0gcmVxdWlyZSgnY2xpcGJvYXJkJyk7XG5jb25zdCBXZWJmb250ID0gcmVxdWlyZSgnd2ViZm9udGxvYWRlcicpO1xuY29uc3QgS2FrYW8gPSByZXF1aXJlKCcuL2tha2FvJyk7XG5cbldlYmZvbnQubG9hZCh7XG4gICAgY3VzdG9tOiB7XG4gICAgICAgIGZhbWlsaWVzOiBbJ1ZvbHRlJywgJ1Nwb3FhIEhhbiBTYW5zJ10sXG4gICAgICAgIHVybHM6IFsnLi4vLi4vd2ViZm9udC5jc3MnXVxuICAgIH1cbn0pO1xuXG5jb25zdCBjbGlwYm9hcmQgPSBuZXcgQ2xpcGJvYXJkSlMoJy5qcy1jbGlwYm9hcmQnKTtcbmNsaXBib2FyZFxuICAgIC5vbignc3VjY2VzcycsIGUgPT4ge1xuICAgICAgICBhbGVydCgn7IS57IqkIOyEse2WpSDthYzsiqTtirgg6rKw6rO866W8IOuzteyCrO2WiOyKteuLiOuLpC4g7Lmc6rWs64KYIOyVoOyduOqzvCDtlajqu5gg6rO17Jyg7ZW067O07IS47JqULiDwn5iAJyk7XG4gICAgfSlcbiAgICAub24oJ2Vycm9yJywgZSA9PiB7XG4gICAgICAgIHByb21wdCgn7IS57IqkIOyEse2WpSDthYzsiqTtirgg6rKw6rO866W8IOuzteyCrO2VtOyEnCDsuZzqtazrgpgg7JWg7J246rO8IO2VqOq7mCDqs7XsnKDtlbTrs7TshLjsmpQuIPCfmIAnLCBlLnRleHQpO1xuICAgIH0pO1xuXG5pZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXNoYXJlLWtha2FvdGFsaycpKSB7XG4gICAgS2FrYW8uaW5pdCgnMTBmMmRiNjlhZjY1YTNlNTBiM2ZiZTVhOGI4MzdmYzMnKTtcblxuICAgIEtha2FvLkxpbmsuY3JlYXRlU2NyYXBCdXR0b24oe1xuICAgICAgICBjb250YWluZXI6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1zaGFyZS1rYWthb3RhbGsnKSxcbiAgICAgICAgcmVxdWVzdFVybDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbGlua1tyZWw9Y2Fub25pY2FsXScpLmhyZWYsXG4gICAgfSk7XG59XG5cbihmdW5jdGlvbigpIHtcbiAgICAvLyDrqqjri6xcbiAgICBjb25zdCBtb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9tb01vZGFsJyk7XG4gICAgY29uc3QgYnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb21vQnRuJyk7XG5cbiAgICAvLyDrsoTtirwg7YG066at7ZWY66m0IOuqqOuLrCDsl7TquLBcbiAgICBidG4ub25jbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbW9kYWwuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICB9XG4gICAgLy8g67CU6rmlIOyYgeyXreydhCDtgbTrpq3tlZjrqbQg66qo64usIOuLq+q4sFxuICAgIHdpbmRvdy5vbmNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC50YXJnZXQgPT09IG1vZGFsKSB7XG4gICAgICAgICAgICBtb2RhbC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgIH1cbiAgICB9XG59KSgpO1xuIiwiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4iLCIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=